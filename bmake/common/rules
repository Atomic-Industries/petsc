
LDIR        = $(IPETSCDIR)/lib/lib$(BOPT)/$(PETSC_ARCH)
PDIR        = $(PETSC_DIR)/lib/lib$(BOPT)/$(PETSC_ARCH)
LIBNAME     = $(PDIR)/$(LIBBASE).a
SOURCE      = $(SOURCEC) $(SOURCEF)
OBJS        = $(OBJSC) $(OBJSF)
INCLUDEDIRS = -I$(IPETSCDIR) -I$(IPETSCDIR)/include $(MPI_INCLUDE) \
               -I$(IPETSCDIR)/src

PETSC_LIB   = -L$(LDIR) -lpetscstencil -lpetscgrid \
                -lpetscsnes  -lpetscsles -lpetscksp \
                -lpetscmat  -lpetscvec -lpetscdraw \
                -lpetscsys \
                $(BS_LIB) $(LAPACK_LIB) $(BLAS_LIB) $(X11_LIB) \
                $(MPI_LIB) $(FC_LIB) $(SYS_LIB) -lm
SLES_LIB    =   -L$(LDIR) -lpetscsles -lpetscksp \
                -lpetscmat  -lpetscvec -lpetscdraw \
                -lpetscsys \
                $(BS_LIB) $(LAPACK_LIB) $(BLAS_LIB) $(X11_LIB) \
                $(MPI_LIB) $(FC_LIB) $(SYS_LIB) -lm

include $(IPETSCDIR)/bmake/common.$(PETSC_VERSION) 
include $(IPETSCDIR)/bmake/$(PETSC_ARCH)/$(PETSC_ARCH).site
include $(IPETSCDIR)/bmake/$(PETSC_ARCH)/$(PETSC_ARCH).$(BOPT)
include $(IPETSCDIR)/bmake/$(PETSC_ARCH)/$(PETSC_ARCH).$(PETSC_VERSION)

# next line cause trouble with gnumake when OBJS is empty
#$(LIBNAME)($(OBJS)): $(LINCLUDE)

# 
# Checks that PETSC_DIR variable is set
#
chkpetsc_dir:
	@if [ Holder = Holder$(PETSC_DIR) ] ; then \
          echo "You must set the variable PETSC_DIR to the petsc directory.1";\
          false ;\
          elif [ ! -d $(PETSC_DIR)/ ] ; then \
          echo "You must set the variable PETSC_DIR to the petsc directory.2";\
          false ;\
          fi

chkbopt:
	@if [ Holder = Holder$(BOPT) ] ; then \
          echo "You must set the variable BOPT [g,O, or Opg]" ; false; fi

examples: chkbopt
	@-if [ "$(EXAMPLES)" != "" ] ; then \
          (for ex in $(EXAMPLES) foo ; do \
          $(OMAKE) -f makefile PETSC_ARCH=$(PETSC_ARCH) BOPT=$(BOPT) $$ex\
          > trashz 2>&1; egrep -i '(Error|warning)' trashz >> /dev/null ; \
          if [ "$$?" != 1 ]; then \
          cat trashz ; fi; $(RM) trashz;\
          done;) fi

foo:

lib: $(SOURCE)
	@-if [ "$(SOURCEC)" != "" ] ; then \
           $(OMAKE) -f makefile PETSC_ARCH=$(PETSC_ARCH) BOPT=$(BOPT) \
                               PETSC_VERSION=$(PETSC_VERSION) libc; fi
	@-if [ "$(SOURCEF)" != "" ] ; then \
                $(OMAKE) -f makefile PETSC_ARCH=$(PETSC_ARCH) BOPT=$(BOPT) libf; fi
	@-if [ "$(OBJS)" != " " ] ; then \
        	$(RANLIB)  $(LIBNAME); \
	        $(RM) -f $(OBJS); \
        fi

libfast: $(SOURCEC) $(SOURCEF)
	@-if [ "$(SOURCEC)" != "" ] ; then \
	     $(CC) -c $(CFLAGS) $(BASEOPT) $(SOURCEC) ;\
	fi
	@-if [ "$(SOURCEF)" != "" ] ; then \
	     $(FC) -c $(FFLAGS) $(BASEOPTF) $(SOURCEF) ;\
	fi
	@-if [ "$(OBJS)" != " " ] ; then \
          $(AR) clr $(LIBNAME) $(OBJS); \
	  $(RM) -f $(OBJS); \
        fi

rcs: 
	@-rcs -i -agropp,bsmith,curfman -L -t/dev/null $(SOURCEH)\
           $(SOURCE) makefile $(EXAMPLESC) $(EXAMPLESF) $(TESTSC)\
           $(TESTSF)

ci: 
	@-ci -u -q -mAutoCheckin $(SOURCEH) $(SOURCE) makefile \
          $(EXAMPLESC) $(EXAMPLESF) $(TESTSC) $(TESTSF) 

co:
	@-co -l -q $(SOURCEH) $(SOURCE) makefile $(EXAMPLESC)\
          $(EXAMPLESF) $(TESTSC) $(TESTSF)

#  true is to prevent make error message from empty grep
lint:
	@-if [ "$(SOURCEC)" != "" ] ; then \
           lint -cvhu -DLINT -DPETSC_ARCH_$(PETSC_ARCH) $(CFLAGS) $(SOURCEC)\
                | grep -v "never defined"\
                | grep -v "pointer alignment problem" | grep -v\
                "function prototype not in scope"; true ;\
           $(RM) -f *.ln ; fi

C2f77:
	@-if [ -n "$(WOBJS)" ] ; then \
  	$(IPETSCDIR)/c2f77/bfort -nomsgs -anyname -mapptr \
                         $(SOURCEC) $(SOURCEH); fi

C2f77lib: 
	@-if [ -n "$(WOBJS)" ] ; then \
	echo "Compiling wrappers: " $(WSOURCEC); \
	$(CC) -c $(CDEFS) $(CFLAGS) $(BASEOPT) -I$(IPETSCDIR) $(WSOURCEC); \
	$(AR) clr $(LDIR)/libpetscfort.a $(WOBJS) ; \
	$(RM) -f $(WOBJS) $(WSOURCE); \
	fi

manpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	doctext -jumpfile $(IPETSCDIR)/docs/routine.list \
                -mpath $(PETSC_DIR)/docs/man/man$(MANSEC) -ext $(MANSEC)  \
                -keyword $(PETSC_DIR)/Keywords $(SOURCEC) $(SOURCEH); \
                chmod g+w $(PETSC_DIR)/docs/man/man$(MANSEC)/*; fi 

latexpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	doc2lt  \
          $(SOURCEC) $(SOURCEH) >> \
                    $(PETSC_DIR)/docs/tex/rsum/rsum$(MANSEC).tex ; fi 

wwwpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	doctext -html -index $(PETSC_DIR)/docs/www/www.cit \
                -mpath $(PETSC_DIR)/docs/www/man$(MANSEC) -ext $(MANSEC)\
                -indexdir www/man$(MANSEC)  \
                 $(SOURCEC) $(SOURCEH); \
                chmod g+w $(PETSC_DIR)/docs/www/man$(MANSEC)/*; fi 

clean:
	@-$(RM) -f *.o *~ $(CLEANFILES) $(WSOURCEC) $(CEXAMPLES) $(TESTS) \
               PI* *.ln l.outa* mputil.mp_* core *.tmp *.map *.log gmon.out \
               trashz

testexamples: examples runexamples clean


tree: $(ACTION)
	@-if [ "$(DIRS)" != "" ]; then \
        for dir in $(DIRS) foo ; do if [ -s $$dir ]; then \
        (cd $$dir ; echo $(ACTION) in: `pwd`  ; \
        $(OMAKE) -f makefile tree ACTION=$(ACTION) BOPT=$(BOPT) \
        PETSC_ARCH=$(PETSC_ARCH) PETSC_VERSION=$(PETSC_VERSION) ) ;fi; \
        done ; fi




