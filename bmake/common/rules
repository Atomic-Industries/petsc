

LDIR     = $(PETSCLIB)/libs/libs$(BOPT)/$(ARCH)/$(COMPLEX)
LIBNAME  = $(LDIR)/$(LIBBASE).a
SOURCE   = $(SOURCEC) $(SOURCEF)
OBJS     = $(OBJSC) $(OBJSF)
INCLUDEDIRS = -I$(ITOOLSDIR) -I$(ITOOLSDIR)/include $(COPT)

include $(ITOOLSDIR)/bmake/$(PARCH)/$(PARCH).site
include $(ITOOLSDIR)/bmake/$(PARCH)/$(PARCH).$(BOPT)
include $(ITOOLSDIR)/bmake/$(PARCH)/$(PARCH).$(COMPLEX)

$(LIBNAME)($(OBJS)): $(LINCLUDE)

examples: 
	@-if [ "$(EXAMPLES)" != "" ] ; then \
          (for ex in $(EXAMPLES) foo ; do \
          $(OMAKE) -f makefile PARCH=$(PARCH) BOPT=$(BOPT) $$ex; done;) fi

runexamples: 
	@-if [ "$(EXAMPLES)" != "" ] ; then \
          (for ex in $(EXAMPLES) echo ; do \
          $$ex; done;) fi

tests:
	@-if [ "$(TESTS)" != "" ] ; then \
	(for ex in $(TESTS) foo ; do \
	$(OMAKE) -f makefile PARCH=$(PARCH) BOPT=$(BOPT) $$ex; done;) fi

runtests: 
	@-if [ "$(TESTS)" != "" ] ; then \
          (for ex in $(TESTS) echo ; do \
          $$ex; done;) fi

foo:

lib: $(SOURCE)
	@-if [ "$(SOURCEC)" != "" ] ; then \
           $(OMAKE) -f makefile PARCH=$(PARCH) BOPT=$(BOPT) \
                               COMPLEX=$(COMPLEX) libc; fi
	@-if [ "$(SOURCEF)" != "" ] ; then \
           $(OMAKE) -f makefile PARCH=$(PARCH) BOPT=$(BOPT) libf; fi
	@-if [ "$(OBJS)" != " " ] ; then \
        	$(RANLIB)  $(LIBNAME); \
        fi

libfast: $(SOURCEC) $(SOURCEF)
	@-if [ "$(SOURCEC)" != "" ] ; then \
	     $(CC) -c $(CFLAGS) $(BASEOPT) $(SOURCEC) ;\
	fi
	@-if [ "$(SOURCEF)" != "" ] ; then \
	     $(FC) -c $(FFLAGS) $(BASEOPTF) $(SOURCEF) ;\
	fi
	@-if [ "$(OBJS)" != " " ] ; then \
          $(AR) clq $(LIBNAME) $(OBJS); \
	  $(RM) $(OBJS); \
        fi

rcs: 
	@-rcs -i -agropp,bsmith,curfman -L -t/dev/null $(SOURCEH)\
           $(SOURCE) makefile $(EXAMPLESC) $(EXAMPLESF) $(TESTSC)\
           $(TESTSF)

ci: 
	@-ci -u -q -mAutoCheckin $(SOURCEH) $(SOURCE) makefile \
          $(EXAMPLESC) $(EXAMPLESF) $(TESTSC) $(TESTSF) readme*

co:
	@-co -l -q $(SOURCEH) $(SOURCE) makefile $(EXAMPLESC)\
          $(EXAMPLESF) $(TESTSC) $(TESTSF)

lint:
	lint -cvhu -DLINT $(CFLAGS) $(SOURCE)

C2f77:
	@-if [ -n "$(WOBJS)" ] ; then \
  	$(ITOOLSDIR)/c2f77/bfort -nomsgs -anyname -mapptr \
                         $(SOURCEC) $(SOURCEH); fi

C2f77lib: 
	@-if [ -n "$(WOBJS)" ] ; then \
	echo "Compiling wrappers: " $(WSOURCEC); \
	$(CC) -c $(CDEFS) $(CFLAGS) $(BASEOPT) -I$(ITOOLSDIR) $(WSOURCEC); \
	$(AR) clr $(LDIR)/libpetscfort.a $(WOBJS) ; \
	$(RM) $(WOBJS) $(WSOURCE); \
	fi

manpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	$(ITOOLSDIR)/doc/doctext -jumpfile $(ITOOLSDIR)/routine.list \
                -mpath $(ITOOLSDIR)/man/man$(MANSEC) -ext $(MANSEC)  \
                 $(SOURCEC) $(SOURCEH); fi 

wwwpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	$(ITOOLSDIR)/doc/doctext -html \
                -mpath $(ITOOLSDIR)/www/man$(MANSEC) -ext $(MANSEC)  \
                 $(SOURCEC) $(SOURCEH); fi 

clean:
	-/bin/rm -f *.o *~ $(CLEANFILES) $(WSOURCEC) $(EXAMPLES) $(TESTS)

findusage:
	@-if [ "$(SOURCE)" != " " ] ; then \
	grep $(EXPRESSION) $(SOURCE) /dev/null; fi
	@-if [ "$(SOURCEH)" != "" ] ; then \
	grep $(EXPRESSION) $(SOURCEH) /dev/null; fi

tree: $(ACTION)
	@-if [ "$(DIRS)" != "" ]; then \
        for dir in $(DIRS) foo ; do if [ -s $$dir ]; then \
        (cd $$dir ; echo $(ACTION) in: `pwd`  ; \
        $(OMAKE) -f makefile tree ACTION=$(ACTION) BOPT=$(BOPT) \
        PARCH=$(PARCH) COMPLEX=$(COMPLEX) ) ;fi; \
        done ; fi

