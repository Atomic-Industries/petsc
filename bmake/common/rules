#
# LDIR (defined from $PETSC_DIR) determines the libraries that are linked.
# PDIR (defined from $PETSC_DIR) determines where the libraries are built.
# LDIR and PDIR will usually be identical.
# LIBNAME       - library name
# SOURCE        - source files
# OBJS          - object files
# PETSC_INCLUDE - locations of include files
# CPPFLAGS      - preprocessor flags for *.c, *.F preprocessing
#
LDIR	      = $(PETSC_DIR)/lib/lib$(BOPT)/$(PETSC_ARCH)
PDIR	      = $(PETSC_DIR)/lib/lib$(BOPT)/$(PETSC_ARCH)
LIBNAME	      = $(PDIR)/$(LIBBASE).a
SOURCE	      = $(SOURCEC) $(SOURCEF)
OBJS	      = $(OBJSC) $(OBJSF)
PETSC_INCLUDE = -I$(PETSC_DIR) -I$(PETSC_DIR)/include $(MPI_INCLUDE)
CPPFLAGS      = $(PETSC_INCLUDE) $(PCONF) $(PETSCFLAGS) 
#
# Defines all libraries needed for using linear and nonlinear solvers, 
# and all lower level PETSc components (such as vectors and matrices).
# The order of listing these libraries is important!
#
PETSC_LIB   = -L$(LDIR) -lpetscsnes  -lpetscsles -lpetscksp \
		-lpetscmat  -lpetscvec -lpetscdraw \
		-lpetscsys  $(X11_LIB) \
		$(BS_LIB) $(LAPACK_LIB) $(BLAS_LIB) \
		$(MPE_LIB) $(MPI_LIB) $(FC_LIB) $(SYS_LIB) -lm 
#
# Defines all libraries needed for using linear solvers and all lower
# level PETSc components (such as vectors and matrices).  The order
# of listing these libraries is important!
#
SLES_LIB    =	-L$(LDIR) -lpetscsles -lpetscksp \
		-lpetscmat  -lpetscvec -lpetscdraw \
		-lpetscsys $(BS_LIB) $(LAPACK_LIB) $(BLAS_LIB) $(X11_LIB) \
		$(MPE_LIB) $(MPI_LIB) $(FC_LIB) $(SYS_LIB) -lm

#
# Link if you are using the PETSc Fortran interface.
#
PETSC_FORTRAN_LIB = -L$(LDIR) -lpetscfortran
#
# These include files set customized site, optimization, and version options.
# Do NOT remove any of these include files.  You should generally have to edit
# only $(PETSC_DIR)/bmake/$(PETSC_ARCH)/base.site for your particular
# machine configuration.  See the users manual for details.
#
include $(PETSC_DIR)/bmake/$(PETSC_ARCH)/base.site
# (This line MUST be present for certain machines (e.g., Cray T3D))
include $(PETSC_DIR)/bmake/$(PETSC_ARCH)/base.$(BOPT)

# Checks that PETSC_DIR variable is set and creates library directory
# if it does not exist
chkpetsc_dir:
	@if [ Holder = Holder$(BOPT) ] ; then \
	  echo "You must set the variable BOPT=[g,O,Opg,O_c++,O_complex,...]" ; false; fi
	-@if [ ! -d $(PDIR) ]; then \
	  echo Making directory $(PDIR) for library; mkdir -p $(PDIR) ; fi

# Checks that user has set BOPT variable
chkopts: 
	@if [ Holder = Holder$(BOPT) ] ; then \
	  echo "You must set the variable BOPT=[g,O,Opg,O_c++,O_complex,...]" ; false; fi
	@if [ ! -d $(LDIR) ]; then \
	  echo Libraries not built for this BOPT: $(BOPT); false ; fi


# Does nothing, obviously; need for some rules that require actions.
foo:

# Builds library
lib: chkpetsc_dir $(SOURCE)
	@-if [ "$(SOURCEC)" != "" ] ; then \
	   $(OMAKE) -f makefile PETSC_ARCH=$(PETSC_ARCH) BOPT=$(BOPT) \
				libc; fi
	@-if [ "$(SOURCEF)" != "" ] ; then \
		$(OMAKE) -f makefile PETSC_ARCH=$(PETSC_ARCH) BOPT=$(BOPT) libf; fi
	@-if [ "$(OBJS)" != " " ] ; then \
		$(RANLIB)  $(LIBNAME); \
		$(RM) -f $(OBJS); \
	fi
#
#  Does not work for some machines with .F fortran files.
#
# Builds library - fast version
libfast: chkpetsc_dir $(SOURCEC) $(SOURCEF)
	@-if [ "$(SOURCEC)" != "" ] ; then \
	     $(CC) -c $(CFLAGS) $(COPTFLAGS) $(SOURCEC) ;\
	fi
	@-if [ "$(SOURCEF)" != "" ] ; then \
	     $(FC) -c $(FFLAGS) $(FOPTFLAGS) $(SOURCEF) ;\
	fi
	@-if [ "$(OBJS)" != " " ] ; then \
	  $(AR) cr $(LIBNAME) $(OBJS); \
	  $(RM) -f $(OBJS); \
	fi

# Removes garbage files
clean:
	@-$(RM) -f *.o *~ ex[0-9] ex[0-9][0-9] $(CLEANFILES) $(TESTS) \
	       PI* *.ln l.outa* mputil.mp_* core *.tmp *.map *.log gmon.out \
	       trashz \#*\# *.mex* *.stolen *.trace Log.* joe jeff *.stolen \
	       output/*~ .mpirtmp mon.out *.aus *.mon.*

#
#  testexamples_X - Runs various PETSc test suites
#    1 - basic C suite used in installation tests
#    2 - additional C suite including graphics
#    3 - basic Fortran .F suite
#    4 - subset of 1 and 2 that runs on only a single processor
#    5 - examples that require complex numbers
#    6 - C examples that don't work with complex numbers 
#    7 - C examples that require BlockSolve
#    8 - Fortran .F examples that don't work with complex numbers
#    9 - uniprocessor version of 3
#
testexamples_1: $(TESTEXAMPLES_1)
testexamples_2: $(TESTEXAMPLES_2)
testexamples_3: $(TESTEXAMPLES_3)
testexamples_4: $(TESTEXAMPLES_4)
testexamples_5: $(TESTEXAMPLES_5)
testexamples_6: $(TESTEXAMPLES_6)
testexamples_7: $(TESTEXAMPLES_7)
testexamples_8: $(TESTEXAMPLES_8)
testexamples_9: $(TESTEXAMPLES_9)
buildexamples_1: $(BUILDEXAMPLES_1)
buildexamples_2: $(BUILDEXAMPLES_2)
buildexamples_3: $(BUILDEXAMPLES_3)
buildexamples_4: $(BUILDEXAMPLES_4)
buildexamples_5: $(BUILDEXAMPLES_5)
buildexamples_6: $(BUILDEXAMPLES_6)
buildexamples_7: $(BUILDEXAMPLES_7)
buildexamples_8: $(BUILDEXAMPLES_8)
buildexamples_9: $(BUILDEXAMPLES_9)

# Performs the specified action throughout the directory tree
tree: $(ACTION)
	@-if [ "$(DIRS)" != "" ]; then \
	for dir in $(DIRS) foo ; do if [ -s $$dir ]; then \
	(cd $$dir ; echo $(ACTION) in: `pwd`; \
	$(OMAKE) -f makefile tree ACTION=$(ACTION) BOPT=$(BOPT) \
	PETSC_ARCH=$(PETSC_ARCH)  ) ;fi; \
	done ; fi

# --------------------------------------------------------------------
#
# All remaining actions are intended for PETSc developers only.
# PETSc users should not generally need to use these commands.
#

# RCS file check-in
ci: 
	@-/usr/local/bin/ci -u -q -mAutoCheckin $(SOURCEH) $(SOURCE) makefile\
	  $(EXAMPLESC) $(EXAMPLESF) $(TESTSC) $(TESTSF) 

# RCS file check-out
co:
	@-/usr/local/bin/co -l -q $(SOURCEH) $(SOURCE) makefile $(EXAMPLESC)\
	  $(EXAMPLESF) $(TESTSC) $(TESTSF)

# Uses lint; true is to prevent make error message from empty grep
lint:
	@-if [ "$(SOURCEC)" != "" ] ; then \
	   lint -cvhu -DLINT -DPETSC_ARCH_$(PETSC_ARCH) $(CFLAGS) $(SOURCEC)\
		| grep -v "never defined"\
		| grep -v "pointer alignment problem" | grep -v\
		"function prototype not in scope"; true ;\
	   $(RM) -f *.ln ; fi

# Builds Fortran-77 wrappers
fortranstubs:
	@-/home/bsmith/bin/sun4/bfort -dir /home/bsmith/petsc/src/fortran/auto \
	  -mnative -ansi -nomsgs -anyname -mapptr -mpi -ferr -ptrprefix MPIR_\
	  -ptr64 HAVE_64BITS -fcaps HAVE_FORTRAN_CAPS \
          -fuscore HAVE_FORTRAN_UNDERSCORE $(SOURCEC)


# Builds man pages (xman version)
manpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	/home/gropp/bin/sun4/doctext -mpath \
               $(PETSC_DIR)/docs/man/man$(MANSEC) -ext $(MANSEC) \
                -locdir $(LOCDIR) -heading PETSc \
		readme $(SOURCEC) $(SOURCEH); \
		chmod g+w $(PETSC_DIR)/docs/man/man$(MANSEC)/*; fi 

# Builds man pages (LaTeX version)
latexpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	/home/gropp/bin/sun4/doc2lt	\
	  $(SOURCEC) $(SOURCEH) >> \
		    $(PETSC_DIR)/docs/tex/rsum/rsum$(MANSEC).tex ; fi 

# Builds man pages (HTML version) in two stages
# See rule for allwwwpages in $(PETSC_DIR)/makefile 
#   1.) wwwpages_buildcite: builds the file www.cit for hyperlinks
#   2.) wwwpages: builds the html pages, complete with hyperlinks
wwwpages_buildcite:
	@-if [ "$(MANSEC)" != "" ] ; then \
	/home/gropp/bin/sun4/doctext -html -indexdir ../man$(MANSEC) \
		-index $(PETSC_DIR)/docs/www/www.cit \
		-mpath $(PETSC_DIR)/docs/www/man$(MANSEC) $(SOURCEC) $(SOURCEH); \
		chmod g+w $(PETSC_DIR)/docs/www/man$(MANSEC)/*; fi 

wwwpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	/home/gropp/bin/sun4/doctext -html \
		-mpath $(PETSC_DIR)/docs/www/man$(MANSEC) -heading PETSc \
		-locdir $(LOCDIR) -mapref $(PETSC_DIR)/docs/www/www.cit \
		-defn $(PETSC_DIR)/docs/www/sec/eop.$(MANSEC) \
		$(SOURCEC) $(SOURCEH); \
		chmod g+w $(PETSC_DIR)/docs/www/man$(MANSEC)/*; fi 


.PRECIOUS: $(PRECIOUS) $(LIBNAME)
.SUFFIXES: $(SUFFIXES) .F .PETSc .C .cc .cpp .r .rm

.c.a: 
	$(CC) -c $(CFLAGS) $(COPTFLAGS) $<
	$(AR) cr $(LIBNAME) $*.o
	$(RM) $*.o
.c.o: 
	$(CC) -c $(CFLAGS) $(COPTFLAGS) $<
.cpp.a .cc.a .C.a: 
	$(CC) -c $(CFLAGS) $(COPTFLAGS) $<
	$(AR) cr $(LIBNAME) $*.o
	$(RM) $*.o
.cpp.o .cc.o .C.o: 
	$(CC) -c $(CFLAGS) $(COPTFLAGS) $<
.f.o: 
	$(FC) -c $(FFLAGS) $(FOPTFLAGS) $<
.f.a: 
	$(FC) -c $(FFLAGS) $(FOPTFLAGS) $<
	$(AR) cr $(LIBNAME) $*.o
	$(RM) $*.o

.cpp.rm .cc.rm .C.rm .F.rm .f.rm .c.rm:
	-@$(RM) -f $* *.o $*.mon.* gmon.out mon.out
.c.PETSc:
	-@$(OMAKE) -f makefile PETSC_ARCH=$(PETSC_ARCH) BOPT=$(BOPT) $* > trashz 2>&1
	-@grep -v clog trashz | grep -v "information sections" | \
          grep -v "preempts that definition" | grep -v EXTERNAL trashz |\
          grep -v inconsistent | grep -v "multiply defined" | \
	  egrep -i '(Error|warning|Can)' >> /dev/null;\
	  if [ "$$?" != 1 ]; then \
	  cat trashz ; fi; $(RM) trashz
.F.PETSc:
	-@$(OMAKE) -f makefile PETSC_ARCH=$(PETSC_ARCH) BOPT=$(BOPT) $* > trashz 2>&1
	-@grep -v EXTERNAL trashz | grep -v Wall | \
        grep -v inconsistent | \
	egrep -i '(Error|warning|Can)'  >> /dev/null ; \
	if [ "$$?" != 1 ]; then \
	cat trashz ; fi; $(RM) trashz;
