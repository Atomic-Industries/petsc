

LDIR        = $(PETSCLIB)/lib/lib$(BOPT)/$(PARCH)
LIBNAME     = $(LDIR)/$(LIBBASE).a
SOURCE      = $(SOURCEC) $(SOURCEF)
OBJS        = $(OBJSC) $(OBJSF)
INCLUDEDIRS = -I$(IPETSCDIR) -I$(IPETSCDIR)/include $(MPI_INCLUDE) \
               -I$(IPETSCDIR)/src

PETSC_LIB   = -L$(LDIR) -lpetscstencil -lpetscgrid \
                -lpetscsnes -lpetscsles -lpetscksp -lpetscmat \
                -lpetscvec -lpetscsys -lpetscdraw \
                $(BS_LIB) $(LAPACK_LIB) $(BLAS_LIB) $(X11_LIB) \
                $(MPI_LIB) $(SYS_LIB) $(FC_LIB) -lm
SLES_LIB    = -L$(LDIR) -lpetscsles -lpetscksp -lpetscmat \
                -lpetscvec -lpetscsys -lpetscdraw \
                $(BS_LIB) $(LAPACK_LIB) $(BLAS_LIB) $(X11_LIB) \
                $(MPI_LIB) $(SYS_LIB) $(FC_LIB) -lm

include $(IPETSCDIR)/bmake/common.$(COMPLEX) 
include $(IPETSCDIR)/bmake/$(PARCH)/$(PARCH).site
include $(IPETSCDIR)/bmake/$(PARCH)/$(PARCH).$(BOPT)
include $(IPETSCDIR)/bmake/$(PARCH)/$(PARCH).$(COMPLEX)

# next line cause trouble with gnumake when OBJS is empty
#$(LIBNAME)($(OBJS)): $(LINCLUDE)

# 
# Checks that PETSCLIB variable is set
#
chkpetsclib:
	@-if [ Holder = Holder$(PETSCLIB) ] ; then \
          echo "You must set the variable PETSCLIB to the petsc directory.1";\
          elif [ ! -d $(PETSCLIB)/ ] ; then \
          echo "You must set the variable PETSCLIB to the petsc directory.2";\
          fi

examples: 
	@-if [ "$(EXAMPLES)" != "" ] ; then \
          (for ex in $(EXAMPLES) foo ; do \
          $(OMAKE) -f makefile PARCH=$(PARCH) BOPT=$(BOPT) $$ex; done;) fi

foo:

lib: $(SOURCE)
	@-if [ "$(SOURCEC)" != "" ] ; then \
           $(OMAKE) -f makefile PARCH=$(PARCH) BOPT=$(BOPT) \
                               COMPLEX=$(COMPLEX) libc; fi
	@-if [ "$(SOURCEF)" != "" ] ; then \
                $(OMAKE) -f makefile PARCH=$(PARCH) BOPT=$(BOPT) libf; fi
	@-if [ "$(OBJS)" != " " ] ; then \
        	$(RANLIB)  $(LIBNAME); \
	        $(RM) -f $(OBJS); \
        fi

libfast: $(SOURCEC) $(SOURCEF)
	@-if [ "$(SOURCEC)" != "" ] ; then \
	     $(CC) -c $(CFLAGS) $(BASEOPT) $(SOURCEC) ;\
	fi
	@-if [ "$(SOURCEF)" != "" ] ; then \
	     $(FC) -c $(FFLAGS) $(BASEOPTF) $(SOURCEF) ;\
	fi
	@-if [ "$(OBJS)" != " " ] ; then \
          $(AR) clr $(LIBNAME) $(OBJS); \
	  $(RM) -f $(OBJS); \
        fi

rcs: 
	@-rcs -i -agropp,bsmith,curfman -L -t/dev/null $(SOURCEH)\
           $(SOURCE) makefile $(EXAMPLESC) $(EXAMPLESF) $(TESTSC)\
           $(TESTSF)

ci: 
	@-ci -u -q -mAutoCheckin $(SOURCEH) $(SOURCE) makefile \
          $(EXAMPLESC) $(EXAMPLESF) $(TESTSC) $(TESTSF) 

co:
	@-co -l -q $(SOURCEH) $(SOURCE) makefile $(EXAMPLESC)\
          $(EXAMPLESF) $(TESTSC) $(TESTSF)

#  true is to prevent make error message from empty grep
lint:
	@-if [ "$(SOURCEC)" != "" ] ; then \
           lint -cvhu -DLINT -DPARCH_$(PARCH) $(CFLAGS) $(SOURCEC)\
                | grep -v "never defined"\
                | grep -v "pointer alignment problem" | grep -v\
                "function prototype not in scope"; true ;\
           $(RM) -f *.ln ; fi

C2f77:
	@-if [ -n "$(WOBJS)" ] ; then \
  	$(IPETSCDIR)/c2f77/bfort -nomsgs -anyname -mapptr \
                         $(SOURCEC) $(SOURCEH); fi

C2f77lib: 
	@-if [ -n "$(WOBJS)" ] ; then \
	echo "Compiling wrappers: " $(WSOURCEC); \
	$(CC) -c $(CDEFS) $(CFLAGS) $(BASEOPT) -I$(IPETSCDIR) $(WSOURCEC); \
	$(AR) clr $(LDIR)/libpetscfort.a $(WOBJS) ; \
	$(RM) -f $(WOBJS) $(WSOURCE); \
	fi

manpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	doctext -jumpfile $(IPETSCDIR)/docs/routine.list \
                -mpath $(PETSCLIB)/docs/man/man$(MANSEC) -ext $(MANSEC)  \
                -keyword $(PETSCLIB)/Keywords $(SOURCEC) $(SOURCEH); \
                chmod g+w $(PETSCLIB)/docs/man/man$(MANSEC)/*; fi 

latexpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	doc2lt  \
          $(SOURCEC) $(SOURCEH) >> \
                    $(PETSCLIB)/docs/tex/rsum/rsum$(MANSEC).tex ; fi 

wwwpages:
	@-if [ "$(MANSEC)" != "" ] ; then \
	doctext -html -index $(PETSCLIB)/docs/www/www.cit \
                -mpath $(PETSCLIB)/docs/www/man$(MANSEC) -ext $(MANSEC)\
                -indexdir www/man$(MANSEC)  \
                 $(SOURCEC) $(SOURCEH); fi 

clean:
	-$(RM) -f *.o *~ $(CLEANFILES) $(WSOURCEC) $(EXAMPLES) $(TESTS) \
               PI* *.ln l.outa* mputil.mp_* core *.tmp *.map *.log

testexamples: examples runexamples clean
	-@echo "Tests complete"


tree: $(ACTION)
	@-if [ "$(DIRS)" != "" ]; then \
        for dir in $(DIRS) foo ; do if [ -s $$dir ]; then \
        (cd $$dir ; echo $(ACTION) in: `pwd`  ; \
        $(OMAKE) -f makefile tree ACTION=$(ACTION) BOPT=$(BOPT) \
        PARCH=$(PARCH) COMPLEX=$(COMPLEX) ) ;fi; \
        done ; fi




