# $Id: common,v 1.203.1.111.1.32 2000/08/16 19:21:24 bsmith Exp $ 
#
#
# Checks that PETSC_DIR variable is set and creates library directory
# if it does not exist
chkpetsc_dir:
	@if [ ${BOPT}foo = foo ] ; then \
	  echo "You must use the make variable BOPT=[g,O,O_c++,O_complex,...]" ; \
	  echo "For example, use: make BOPT=g ex1"; \
          echo "Remove all .o files and rerun make with appropriate BOPT"; false; fi
	-@if [ ! -d ${PDIR} ]; then \
	  echo Making directory ${PDIR} for library; mkdir -p ${PDIR} ; fi

# 1. Checks that user has set BOPT variable
# 2. Check if the ${LDIR} exists
chkopts_basic: 
	@if [ ${BOPT}foo = foo ] ; then \
	  echo "You must set the variable BOPT=[g,O,O_c++,O_complex,...]" ; \
	  echo "For exampe, use: make BOPT=g ex1"; \
          echo "Remove all .o files and rerun make with appropriate BOPT"; false; fi
	@if [ ! -d ${LDIR} ]; then \
	  echo Libraries not built for this BOPT: ${BOPT}; false ; fi

# 3. Check if the shared libs are out of date
chkopts: chkopts_basic
	@for LIBNAME in  ${SHLIBS} ; do  \
	if [ -f ${LDIR}/$$LIBNAME.a ];	then \
	if [ -f ${LDIR}/$$LIBNAME.${SLSUFFIX} ]; then \
	flag=`find ${LDIR} -type f -name $$LIBNAME.a -newer ${LDIR}/$$LIBNAME.${SLSUFFIX} -print` ;\
	if [ "$$flag" != "" ]; then \
	echo "Shared libs in ${LDIR} are out of date, attempting to rebuild." ;\
	if [ -w ${LDIR} ]; then \
	${OMAKE} BOPT=${BOPT} PETSC_ARCH=${PETSC_ARCH} shared ;\
	else \
	echo "Unable to rebuild shared libraries; you do not have write permission." ;\
	user=`ls -l ${LDIR}/$$LIBNAME.${SLSUFFIX}  | tr -s ' ' | cut -d ' ' -f 3` ;\
	echo "Libraries were built by user $$user; please contact him/her to have them rebuilt." ;\
	false ;\
	fi ;\
	fi ;\
	fi ;\
	fi ;\
	done

# Does nothing; needed for some rules that require actions.
foo:

# Builds library
lib: chkpetsc_dir ${SOURCE}
	@-if [ "${SOURCEC}" != "" ] ; then \
	   ${OMAKE}  PETSC_ARCH=${PETSC_ARCH} BOPT=${BOPT} libc; fi
	@-if [ "${SOURCEF}" != "" ] ; then \
		${OMAKE}  PETSC_ARCH=${PETSC_ARCH} BOPT=${BOPT} libf; fi
	@-if [ "${OBJS}" != " " ] ; then \
		${RANLIB}  ${LIBNAME}; \
		${RM} -f ${OBJS}; \
	fi
#
#  Does not work for some machines with .F fortran files.
#
# Builds library - fast version
libfast: chkpetsc_dir ${SOURCEC} ${SOURCEF}
	@-if [ "${SOURCEC}" != "" ] ; then \
	     ${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} ${SOURCEC} ${SSOURCE} ;\
	  ${AR} ${AR_FLAGS} ${LIBNAME} ${OBJSC} ${SOBJS}; \
	  ${RM} -f ${OBJSC} ${SOBJS}; \
	fi

# Removes garbage files
clean::
	@-${RM} -f *.o *~ ex[0-9] ex[0-9][0-9] ex[0-9]f ex[0-9][0-9]f \
	       ${CLEANFILES} ${TESTS} ex[0-9]f90 ex[0-9][0-9]f90 \
	       PI* *.ln l.outa* mputil.mp_* core core.* *.tmp *.map gmon.out \
	       trashz \#*\# *.mex* *.stolen *.trace Log.* joe jeff *.stolen \
	       output/*~ .mpirtmp mon.out *.aus *.mon.* __* p4pg ins10*.c \
	       ex[0-9].exe ex[0-9][0-9].exe ex[0-9]f.exe ex[0-9][0-9]f.exe \
	       *.ad.c *.ad.h ad_deriv.h .adic* *.cp_ *.cp__ *.c*.c pageform.txt \
               .adic* *.dep *.proj ctoatmp PETScArena* *.L *.anl main *.mod .mpi* .class pageform.txt
	@-${RM} -rf output.*

cleanstolen:
	@-${RM} -f *.stolen

cleanadic:
	@-${RM} -f *.ad.*
#
#  testexamples_X - Runs various PETSc test suites
#    1 - basic C suite used in installation tests
#    2 - additional C suite including graphics
#    3 - basic Fortran .F suite
#    4 - uniprocessor version of 1 and 2
#    5 - C examples that require complex numbers
#    6 - C examples that don't work with complex numbers 
#    7 - C examples that require BlockSolve
#    8 - Fortran .F examples that don't work with complex numbers
#    9 - uniprocessor version of 3
#   10 - Fortran examples that require complex
#   11 - uniprocessor version of 5
#   12 - basic f90 examples
#   13 - Examples that should only be compiled.
#   14 - requires Matlab - src/dm/da/examples/tests
#   15 - AMS (Alice Memory Snooper) tests - src/snes/examples/tutuorials
#   16 - Requires ParMetis
#   17 - requires PYTHON (uses urlget.py) and popen()
#
testexamples_1: ${TESTEXAMPLES_1} clean
testexamples_2: ${TESTEXAMPLES_2} clean
testexamples_3: ${TESTEXAMPLES_3} clean
testexamples_4: ${TESTEXAMPLES_4} clean
testexamples_5: ${TESTEXAMPLES_5} clean
testexamples_6: ${TESTEXAMPLES_6} clean
testexamples_7: ${TESTEXAMPLES_7} clean
testexamples_8: ${TESTEXAMPLES_8} clean
testexamples_9: ${TESTEXAMPLES_9} clean
testexamples_10: ${TESTEXAMPLES_10} clean
testexamples_11: ${TESTEXAMPLES_11} clean
testexamples_12: ${TESTEXAMPLES_12} clean
testexamples_13: ${TESTEXAMPLES_13} clean
testexamples_14: ${TESTEXAMPLES_14} clean
testexamples_15: ${TESTEXAMPLES_15} clean
testexamples_16: ${TESTEXAMPLES_16} clean
testexamples_17: ${TESTEXAMPLES_17} clean

buildexamples_1: 
	-@${OMAKE} testexamples_1 TESTEXAMPLES_1=`echo ${TESTEXAMPLES_1} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_2: 
	-@${OMAKE} testexamples_2 TESTEXAMPLES_2=`echo ${TESTEXAMPLES_2} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_3:
	-@${OMAKE} testexamples_3 TESTEXAMPLES_3=`echo ${TESTEXAMPLES_3} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_4:
	-@${OMAKE} testexamples_4 TESTEXAMPLES_4=`echo ${TESTEXAMPLES_4} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_5:
	-@${OMAKE} testexamples_5 TESTEXAMPLES_5=`echo ${TESTEXAMPLES_5} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_6:
	-@${OMAKE} testexamples_6 TESTEXAMPLES_6=`echo ${TESTEXAMPLES_6} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_7:
	-@${OMAKE} testexamples_7 TESTEXAMPLES_7=`echo ${TESTEXAMPLES_7} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_8:
	-@${OMAKE} testexamples_8 TESTEXAMPLES_8=`echo ${TESTEXAMPLES_8} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_9:
	-@${OMAKE} testexamples_9 TESTEXAMPLES_9=`echo ${TESTEXAMPLES_9} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_10:
	-@${OMAKE} testexamples_10 TESTEXAMPLES_10=`echo ${TESTEXAMPLES_10} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_11:
	-@${OMAKE} testexamples_11 TESTEXAMPLES_11=`echo ${TESTEXAMPLES_11} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_12:
	-@${OMAKE} testexamples_12 TESTEXAMPLES_12=`echo ${TESTEXAMPLES_12} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_13:
	-@${OMAKE} testexamples_13 TESTEXAMPLES_13=`echo ${TESTEXAMPLES_13} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_14:
	-@${OMAKE} testexamples_14 TESTEXAMPLES_14=`echo ${TESTEXAMPLES_14} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`
buildexamples_15:
	-@${OMAKE} testexamples_15 TESTEXAMPLES_15=`echo ${TESTEXAMPLES_15} | sed s/runex[0-9]*[a-z]*[f]*[9]*[0]*[_]*[0-9]*//g`

#  Checks if directory requires particular package or language
# The makefile may contain
#    #requirespackage '-DPETSC_HAVE_XXX' 
#    #requireslanguage CONLY (or CPP)
#    #requiresscalar   real (or complex)

tree: ${ACTION}
	-@if [ "${DIRS}" != "" ]; then \
	  for dir in ${DIRS} foo ; do \
            if [ -d $$dir ]; then \
	      r=`egrep requirespackage $$dir/makefile`; \
              if [ "$$?" = 0 ]; then \
                f=0; \
                for l in ${PCONF} foo ; do \
                  echo $$r | egrep "'$$l'" > /dev/null; \
                  if [ "$$?" = 0 ]; then \
	            f=1; \
                    break; \
                  fi; \
                done ; \
                if [ "$$f" = 0 ]; then \
                  continue; \
                fi; \
              fi; \
              r=`egrep requireslanguage $$dir/makefile`; \
              if [ "$$?" = 0 ]; then \
                echo $$r | egrep ${PETSC_LANGUAGE} > /dev/null; \
                if [ "$$?" = 1 ]; then \
                  continue; \
                fi; \
              fi; \
              r=`egrep requiresscalar $$dir/makefile`; \
              if [ "$$?" = 0 ]; then \
                echo $$r |  egrep ${PETSC_SCALAR} > /dev/null; \
                if [ "$$?" = 1 ]; then \
                  continue; \
                fi; \
              fi; \
            else \
              continue; \
            fi; \
            (cd $$dir ; \
            echo ${ACTION} in: `pwd`; \
            ${OMAKE} tree ACTION=${ACTION} BOPT=${BOPT} PETSC_ARCH=${PETSC_ARCH});\
	  done ; \
        fi

# Performs the specified action throughout the directory tree
ttree: ${ACTION}
	@-if [ "${DIRS}" != "" ]; then \
	for dir in ${DIRS} foo ; do if [ -d $$dir ]; then \
	(cd $$dir ; echo ${ACTION} in: `pwd`; \
	${OMAKE}  ttree ACTION=${ACTION} BOPT=${BOPT} \
	PETSC_ARCH=${PETSC_ARCH}  ) ;fi; \
	done ; fi

#This target goes through all the dirs that contains a makefile
alltree_makefile: ${ACTION}
	-@DIRS=`ls`; \
	for dir in $$DIRS foo ; do if [ -f $$dir/makefile ]; then \
	(cd $$dir ; echo ${ACTION} in: `pwd`; \
	${OMAKE}  alltree_makefile ACTION=${ACTION} BOPT=${BOPT} \
	PETSC_ARCH=${PETSC_ARCH}  ) ;fi; \
	done
# This target goes through all dirs specified by DIRS,EDIRS, and 
# excludes dirs specified by $XDIRS
alltree: ${ACTION}
	@-if [ "${DIRS} ${EDIRS}" != " " ]; then \
	NDIRS="${DIRS} ${EDIRS}" ;\
	if [ "${XDIRS}" != "" ]; then \
	for XDIR in ${XDIRS} qwertyuiop ; do \
	NDIRS=`echo $$NDIRS | sed s/$$XDIR//g`; \
	done; fi ; \
	for dir in $$NDIRS foo ; do if [ -d $$dir ]; then \
	(cd $$dir ; echo ${ACTION} in: `pwd`; \
	${OMAKE}  alltree ACTION=${ACTION} BOPT=${BOPT} \
	PETSC_ARCH=${PETSC_ARCH}  ) ;fi; \
	done ; fi

etags_sourcec:
	-@if [ "${SOURCEC}" != "" ]; then \
		etags -a -f ${TAGSFILE} ${SOURCEC} ; fi
etags_sourceh:
	-@if [ "${SOURCEH}" != "" ]; then \
		etags -a -f ${TAGSFILE} ${SOURCEH}; fi
etags_sourcef:
	-@if [ "${SOURCEF}" != "" ]; then \
		etags -a -f ${TAGSFILE} ${SOURCEF}; fi
etags_docs:
	-@if [ "${DOCS}" != "" ]; then \
		etags -a -f ${TAGSFILE} ${DOCS}; fi
etags_bmakefiles:
	-@if [ "${BMAKEFILES}" != "" ]; then \
		etags -a -f ${TAGSFILE} ${BMAKEFILES}; fi
etags_examplesc:
	-@if [ "${EXAMPLESC}" != "" ]; then \
		etags -a -f ${TAGSFILE} ${EXAMPLESC}; fi
etags_examplesch:
	-@if [ "${EXAMPLESCH}" != "" ]; then \
		etags -a -f ${TAGSFILE} ${EXAMPLESCH}; fi
etags_examplesf:
	-@if [ "${EXAMPLESF}" != "" ]; then \
		etags -a -f ${TAGSFILE} ${EXAMPLESF}; fi
etags_examplesfh:
	-@if [ "${EXAMPLESFH}" != "" ]; then \
		etags -a -f ${TAGSFILE} ${EXAMPLESFH}; fi
etags_makefile:
	-@etags -a -f ${TAGSFILE} makefile
etags_scripts:
	-@if [ "${SCRIPTS}" != "" ]; then \
		etags -a -f ${TAGSFILE} ${SCRIPTS}; fi

# --------------------------------------------------------------------
#
# All remaining actions are intended for PETSc developers only.
# PETSc users should not generally need to use these commands.
#
chkpetsc_path:
	@petsc_path=`pwd`; \
	mod_path=`echo $$petsc_path | sed 's+/mcs-homes07/bsmith+/petsc/+g'`; \
	if [ $${mod_path} = $${petsc_path} ] ; then \
	  echo 'Error! Wrong PETSc Dir! Please use /home/bsmith/petsc'; \
	   false; \
	fi

# RCS file check-in
ci: chkpetsc_path
	@-/usr/local/bin/ci -u -q -mAutoCheckin ${SOURCEH} ${DOCS} ${SOURCE} \
	  ${EXAMPLESC} ${EXAMPLESF} ${EXAMPLESCH} ${EXAMPLESFH} \
	  ${TESTSC} ${TESTSF} ${SCRIPTS} ${BMAKEFILES} makefile

# RCS file check-out
co: chkpetsc_path
	@-/usr/local/bin/co -l -q ${SOURCEH} ${DOCS} ${SOURCE} \
	  ${EXAMPLESC} ${EXAMPLESF} ${EXAMPLESCH} ${EXAMPLESFH} \
	  ${TESTSC} ${TESTSF} ${SCRIPTS} ${BMAKEFILES} makefile

# Add another person to RCS access
add: chkpetsc_path
	@-rcs -a${NEW_RCS_USER} -q ${SOURCEH} ${DOCS} ${SOURCE} \
	  ${EXAMPLESC} ${EXAMPLESF} ${EXAMPLESCH} ${EXAMPLESFH} \
	  ${TESTSC} ${TESTSF} ${SCRIPTS} ${BMAKEFILES} makefile

# Remove person from RCS access
remove: chkpetsc_path
	@-rcs -e${NEW_RCS_USER} -q ${SOURCEH} ${DOCS} ${SOURCE} \
	  ${EXAMPLESC} ${EXAMPLESF} ${EXAMPLESCH} ${EXAMPLESFH} \
	  ${TESTSC} ${TESTSF} ${SCRIPTS} ${BMAKEFILES} makefile

# Builds Fortran-77 wrappers 
# Source of bfort is in ~gropp/sowing/src/bfort
fortranstubs:
	@-/home/petsc/bin/solaris/bfort -dir /home/bsmith/petsc/src/fortran/auto \
	  -mnative -ansi -nomsgs -anyname -mapptr -mpi -ferr -ptrprefix Petsc\
	  -ptr64 PETSC_USE_POINTER_CONVERSION  -fcaps PETSC_HAVE_FORTRAN_CAPS \
          -fuscore PETSC_HAVE_FORTRAN_UNDERSCORE ${SOURCEC}



# Builds man pages (LaTeX version)
latexpages:
	@-if [ "${MANSEC}" != "" ] ; then \
	/home/gropp/bin/solaris/doc2lt	\
	  ${SOURCEC} ${SOURCEH} >> \
		    ${PETSC_DIR}/docs/tex/rsum/rsum${MANSEC}.tex ; fi 

# Builds man pages (HTML version) in two stages
# See rule for allmanualpages in ${PETSC_DIR}/makefile 
#   1.) manualpages_buildcite: builds the file manualpages.cit for hyperlinks
#   2.) manualpages: builds the html pages, complete with hyperlinks
manualpages_buildcite:
	@-if [ "${MANSEC}" != "" ] ; then \
	  DOCTEXT_PATH=/home/bsmith/petsc/docs/tex/doctext; \
          /home/gropp/bin/solaris/doctext -html -indexdir ../${MANSEC} \
		-index ${PETSC_DIR}/docs/manualpages/manualpages.cit \
		-mpath ${PETSC_DIR}/docs/manualpages/${MANSEC} ${SOURCEC} ${SOURCEH}; \
		chmod g+w ${PETSC_DIR}/docs/manualpages/${MANSEC}/* > /dev/null 2>&1; fi 
#
#   DOCTEXT_PATH env variable is used by doctext
#
manualpages:
	@-if [ "${MANSEC}" != "" ] ; then \
	  DOCTEXT_PATH=/home/bsmith/petsc/docs/tex/doctext; \
	  /home/gropp/bin/solaris/doctext -html \
		-mpath ${PETSC_DIR}/docs/manualpages/${MANSEC} -heading PETSc \
		-defn /home/bsmith/petsc/docs/tex/doctext/html.def \
		-locdir ${LOCDIR} -mapref ${PETSC_DIR}/docs/manualpages/manualpages.cit \
		${SOURCEC} ${SOURCEH}; \
		chmod g+w ${PETSC_DIR}/docs/manualpages/${MANSEC}/* > /dev/null 2>&1; fi 

#.PRECIOUS: ${PRECIOUS} ${LIBNAME}
.SUFFIXES: .F ${SUFFIXES} .PETSc .C .cc .cpp .r .rm .so

.c.o: 
	-${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
.c.a:
	-${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
	-${AR} ${AR_FLAGS} ${LIBNAME} $*.o
	-${RM} $*.o
.cpp.o .cc.o .C.o: 
	-${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
.cpp.a .cc.a .C.a: 
	-${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
	-${AR} ${AR_FLAGS} ${LIBNAME} $*.o
	-${RM} $*.o

.F.o .F90.o:
	-${FC} -c ${FOPTFLAGS} ${FFLAGS} ${FCPPFLAGS} $<
.F.a: 
	-${FC} -c ${FOPTFLAGS} ${FFLAGS} ${FCPPFLAGS} $<
	-${AR} ${AR_FLAGS} ${LIBNAME} $*.o
	-${RM} $*.o

.f.o .f90.o: 
	-${FC} -c ${FFLAGS} ${FOPTFLAGS} $<
.f.a: 
	-${FC} -c ${FFLAGS} ${FOPTFLAGS} $<
	-${AR} ${AR_FLAGS} ${LIBNAME} $*.o
	-${RM} $*.o

#
#  These rules are for compiling the test examples.
#
.cpp.rm .cc.rm .C.rm .F.rm .f.rm .c.rm:
	-@${RM} -f $* *.o $*.mon.* gmon.out mon.out
.c.PETSc:
	-@${OMAKE}  PETSC_ARCH=${PETSC_ARCH} BOPT=${BOPT} $* > trashz 2>&1
	-@grep -v clog trashz | grep -v "information sections" | \
          grep -v "WARNING: TOC" | \
          grep -v "Extra instructions" | \
          grep -v "Unused external reference" | \
          grep -v "f90 continuing despite warning messages" | \
          grep -v "symbol if the" | \
          grep -v "ignoring symbol version info" | \
          grep -v "preempts that definition" | \
          grep -v "is an array from" | \
          grep -v "Cannot cast" | \
          grep -v "WARNING 134: weak definition of" | \
          grep -v "Warning(s) detected" | \
          grep -v "consider using mkstemp"  |\
          grep -v EXTERNAL  |\
          grep -v volatile  |\
          grep -v -i inconsistent | grep -v Anachronism | \
	  egrep -i '(Error|warning|Can|Unresolved)' >> /dev/null;\
	  if [ "$$?" != 1 ]; then \
	  cat trashz ; fi; ${RM} trashz
.F.PETSc:
	-@${OMAKE}  PETSC_ARCH=${PETSC_ARCH} BOPT=${BOPT} $* > trashz 2>&1
	-@grep -v EXTERNAL trashz | grep -v Wall | \
          grep -v "Unused external reference" | \
          grep -v "WARNING: TOC overflow." | \
          grep -v "Extra instructions are being" | \
          grep -v "symbol if the symbol" | \
          grep -v -i inconsistent | \
          grep -v -i "unused dummy" | \
	  grep -v "WARNING:  -cpp is ignored" | \
          grep -v "ignoring symbol version info" | \
	  grep -v "Inconsistent structure" | \
	  grep -v "ex20.F:30:" | \
	  grep -v "f90 continuing despite warning messages" | \
          grep -v "is an array from" | \
          grep -v "consider using mkstemp"  |\
	  grep -v "Unused external reference" | \
          grep -v "WARNING 134: weak definition of" | \
          grep -v 'continuing despite warning messages' | \
	  grep -v "Unused dummy argument" | \
	  egrep -i '(Error|warning|Can|Unresolved)'  >> /dev/null ; \
	  if [ "$$?" != 1 ]; then \
	  cat trashz ; fi; ${RM} trashz;
# -------------------------------------------------------------------------------
#
#   Rule for generating ADIC derivatives from PETSc .c and .hfiles
#
adic:
	@-if [ "${NOADIC}" != "true" ]; then if [ "${SOURCEC}" != "" ]; then \
          for i in ${SOURCEC} foo; do if [ -f $$i ]; then \
          ${ADIC_CC} -s -h -f 1 ${CFLAGS} ${CCPPFLAGS} $$i ; \
          fi; done ; \
        fi; fi
	@-if [ "${NOADIC}" != "true" ]; then if [ "${SOURCEH}" != "" ]; then \
          for i in ${SOURCEH} foo; do if [ -f $$i ]; then \
          ${ADIC_CC} -s -h -f 1 ${CFLAGS} ${CCPPFLAGS} $$i ; \
          fi; done ; \
        fi; fi
	-@chmod -f go+rw *.ad.*

adic2:
	-if [ "${NOADIC}" != "true" ]; then if [ "${SOURCEC}" != "" ]; then \
          for i in ${SOURCEC} foo; do if [ -f $$i ]; then \
          ${ADIC_CC} -h -f 1 ${CFLAGS} ${CCPPFLAGS} $$i ; \
          fi; done ; \
        fi; fi
	-if [ "${NOADIC}" != "true" ]; then if [ "${SOURCEH}" != "" ]; then \
          for i in ${SOURCEH} foo; do if [ -f $$i ]; then \
          ${ADIC_CC} -h -f 1 ${CFLAGS} ${CCPPFLAGS} $$i ; \
          fi; done ; \
        fi; fi
	-@chmod -f go+rw *.ad.*

adiclib:
	-@if [ "${NOADIC}" != "true" ]; then if [ "${SOURCEC}" != "" ]; then \
          ${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} ${ADIC_INCLUDE} *.ad.c ; \
        fi; fi
	-@if [ "${NOADIC}" != "true" ]; then if [ "${SOURCEC}" != "" ]; then \
          ${AR} ${AR_FLAGS} ${PDIR}/${LIBBASE}.a *.ad.o ; \
        fi; fi
	-@chmod -f go+rw ${PDIR}/${LIBBASE}.a
	-@${RM} -f *.ad.o

adiclib2:
	-if [ "${NOADIC}" != "true" ]; then if [ "${SOURCEC}" != "" ]; then \
          ${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} ${ADIC_INCLUDE} *.ad.c ; \
        fi; fi
	-if [ "${NOADIC}" != "true" ]; then if [ "${SOURCEC}" != "" ]; then \
          ${AR} ${AR_FLAGS} ${PDIR}/${LIBBASE}.a *.ad.o ; \
        fi; fi
	-@chmod -f go+rw ${PDIR}/${LIBBASE}.a
	-@${RM} -f *.ad.o
#
#
countfunctions: chkpetsc_dir
	-@if [ ! -f ${PDIR}/countfunctions ]; then \
	  touch ${PDIR}/countfunctions ; fi
	@-if [ "${SOURCEC}" != "" ]; then \
          for i in ${SOURCEC} foo; do if [ -f $$i ]; then \
           grep "define __FUNC__" $$i | cut -f2 -d\" >> ${PDIR}/countfunctions ; \
          fi; done ; \
        fi

checkbadPetscFunctionBegin:
	-@if [ "${SOURCEC}" != "" ] ; then \
	${OMAKE}  PETSC_ARCH=${PETSC_ARCH} BOPT=${BOPT} \
	checkbadPetscFunctionBegin_private ; fi

checkbadPetscFunctionBegin_private:
	-@for filename in ${SOURCEC} ; do \
	a=`grep '#define __FUNC__' $$filename | wc -l`; \
	b=`grep 'PetscFunctionBegin' $$filename | wc -l`; \
	if [ $$a -ne $$b ] ; then \
	echo "$$filename: __FUNC__ = $$a; PetscFunctionBegin = $$b" ; \
	fi; \
	done

checkbadFileHeader:
	-@for filename in ${SOURCEC} makefile ${SOURCEH} ${SOURCEF} ${EXAMPLESC} ${EXAMPLESF}; do \
	a=`grep 'Id:' $$filename | wc -l`; \
	if [ $$a -ne 1 ] ; then \
	echo "$$filename: missing RCS file header" ; \
	fi; \
	done

checkbadSource:
	-@for filename in ${SOURCEC} makefile ${SOURCEH} ${SOURCEF} ${EXAMPLESC} ${EXAMPLESF}; do \
       a=`grep '( ' $$filename | wc -l`; \
       if [ $$a -ge 1 ] ; then \
       echo "$$filename: extra blank after (" ; \
       fi; \
       a=`grep ' )' $$filename | wc -l`; \
       if [ $$a -ge 1 ] ; then \
       echo "$$filename: extra blank before )" ; \
       fi; \
         a=`grep 'register int' $$filename | wc -l`; \
       if [ $$a -ge 1 ] ; then \
       echo "$$filename: do not use register keyword in PETSc" ; \
       fi; \
         a=`grep 'register double' $$filename | wc -l`; \
       if [ $$a -ge 1 ] ; then \
       echo "$$filename: do not use register keyword in PETSc" ; \
       fi; \
         a=`grep '; CHK' $$filename | wc -l`; \
       if [ $$a -ge 1 ] ; then \
       echo "$$filename: space before CHKERRx() or CHKPTRx()" ; \
       fi; \
         done

# -------------------------------------------------------------------------------
deleteshared: chkopts_basic
	${RM} ${LDIR}/*.${SLSUFFIX} ${LDIR}/so_locations

noshared:

#
#  Generates the input file to pagemaker, see the rule exercises in ../makefile
#
pagemaker: 
	-@if [ "${TUTORIALS}" != "" ] ; then ${OMAKE} pageform; fi

pageform: 
	-@echo "NONE title=\"PETSc ${MANSEC}\" command=link src=../../${LOCDIR}../exercises/main.htm target=replace" >> ${PETSC_DIR}/docs/pageform.txt
	-@${RM} pageform.txt
	-@${RM} -rf ../exercises
	-@mkdir ../exercises
	-@echo "title=\"PETSc ${MANSEC} examples\""                               >  pageform.txt 
	-@echo "access_format=short"                                            >> pageform.txt
	-@echo "access_title=${MANSEC} exercises"                            >>  pageform.txt 
	-@echo "startpage=../exercises/introduction.htm"                         >> pageform.txt
	-@echo "NONE title=\"Introduction\" command=link src=../exercises/introduction.htm" >> pageform.txt
	-@cp -f ${PETSC_DIR}/docs/manualpages/sec/bop.${MANSEC} ../exercises/introduction.htm
	-@for file in ${TUTORIALS}; do \
          cmess=`grep "static char help" $${file} | cut -d\" -f2 | cut -d\. -f1`; \
          if [ "$$cmess" = "" ] ; then \
            echo "$${file} title=\"$${file}\" command=listing" >> pageform.txt; \
          else \
            echo "NONE title=\"$${cmess}\"" >> pageform.txt; \
            echo "$${file} title=\"$${file}\" command=c" >> pageform.txt; \
          fi; \
        done
	-@echo "makefile title=\"makefile\" command=listing"                     >> pageform.txt
	-@echo "NONE title=\"<HR>\" " >> pageform.txt; 
	-@ROOT=`echo ${LOCDIR} | sed s?/[a-z]*?/..?g | sed s?src/??g`; echo "NONE title=\"Return to all Exercises\" command=link src=$${ROOT}/docs/exercises/main.htm target=replace" >> pageform.txt
	-@ROOT=`echo ${LOCDIR} | sed s?/[a-z]*?/..?g | sed s?src/??g`; echo "NONE title=\"PETSc Documentation\" command=link src=$${ROOT}/docs/index.html target=replace" >> pageform.txt
	/home/MPI/class/mpiexmpl/maint/makepage.new -pageform=pageform.txt -access_extra=/dev/null -map=+${PETSC_DIR}/docs/manualpages/manualpages.cit -outdir=../exercises








