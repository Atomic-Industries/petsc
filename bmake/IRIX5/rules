CC       = cc -DPARCH_IRIX
FC       = f77
AR       = ar
RM       = rm -f
#
# the  following is used to convert petsclib into dynamic libraries 
#
RANLIB   = $(PETSC_DIR)/bmake/$(PETSC_ARCH)/make_dso_IRIX $(LDIR)
#RANLIB	 = true
OMAKE    = make
SHELL    = /bin/sh
#
# -rpath is requied to specify the location of any dynamic libraries
# which are not found in the standard locations (/lib:/usr/lib:) etc
#
CLINKER  = cc $(COPTFLAGS) -rpath $(LDIR):$(DYLIBPATH)
FLINKER  = f77 $(FOPTFLAGS) -rpath $(LDIR):$(DYLIBPATH)

SYS_LIB    = -lfpe -lsun 
#
#  For SGI 64 bit machines use the PETSC_ARCH IRIX64
#
CONF    = -DHAVE_PWD_H -DHAVE_STRING_H -DHAVE_STROPTS_H \
          -DHAVE_MALLOC_H -DHAVE_X11 -DHAVE_FORTRAN_UNDERSCORE \
          -DHAVE_DRAND48  -DHAVE_GETDOMAINNAME \
          -DUSES_V_V_V_V_TSEARCH

SHELL   = /bin/sh

include $(PETSC_DIR)/bmake/common

libc:
	for i in $(OBJSC); do $(OMAKE) libmember LIBMEMBER=$$i ; done

libf:
	for i in $(OBJSF); do $(OMAKE) libmember LIBMEMBER=$$i ; done

libmember:    $(LIBNAME)($(LIBMEMBER))

.c.a: 
	$(CC) -c $(CFLAGS) $(COPTFLAGS) $*.c
	$(AR) cr $(LIBNAME) $*.o
	$(RM) $*.o
.c.o: 
	$(CC) -c $(CFLAGS) $(COPTFLAGS) $*.c
.C.a: 
	$(CC) -c $(CFLAGS) $(COPTFLAGS) $*.C
	$(AR) cr $(LIBNAME) $*.o
	$(RM) $*.o
.C.o: 
	$(CC) -c $(CFLAGS) $(COPTFLAGS) $*.C
.f.o: 
	$(FC) -c $(FFLAGS) $(FOPTFLAGS) $*.f

.f.a: 
	$(FC) -c $(FFLAGS) $(FOPTFLAGS) $*.f
	$(AR) cr $(LIBNAME) $*.o
	$(RM) $*.o

.SUFFIXES: $(SUFFIXES) .F

.F.o:
	$(FC) -c $(FFLAGS) $(FOPTFLAGS) $(CFLAGS) $*.F

.F.a: 
	$(FC) -c $(FFLAGS) $(FOPTFLAGS) $(CFLAGS) $*.F
	$(AR) cr $(LIBNAME) $*.o
	$(RM) $*.o

# the IRIX is very picky about static functions they must be declared
# as static functions before being used otherwise it will use the 
# nonstatic one or have an unresolved symbol.

# The following appeared on the network on changing quiet NaNs to 
# signaling NaNs:
#        To do this on the SGI, you need to set the environment and load the
#floating point library.  When you are through, reset the environment.  The 
#following example will work quite nicely.  Refer to the man page for fpe for
#details.
#
##
## Trap floating pointing errors for overflows, invalid operations, and
##   divide by zero.  All underflows will be ignored and set to 0.0.
##
##      Overflow - set to NaN to avoid multiple overflows
##
#setenv TRAP_FPE "DEBUG; OVERFL =INF,COUNT,TRACE(10),EXIT(100); INVALID=IEEE,COUN
#T,TRACE(10),EXIT(100); DIVZERO=INF,COUNT,TRACE(10),EXIT(100)"
##
## compile and load with libfpe.a library
##
#f77 -g -C -o sample sample.f /usr/lib/libfpe.a
##
## execute
##
#sample  
##
## turn off trapping of floating point errors
##
#setenv TRAP_FPE="OFF"

