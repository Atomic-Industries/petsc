/* TODO:
Invidividual task lists.
  - Jason:
    . *Fix SNESNEWTONASInitialActiveSet_Private():
        : use a tolerance and declare a constraint active if g is within epsilon of the lower/upper bound (and the multiplier is positive/negative)
	: allow the user to set it via -snes_newtonas_activity_tol
        : the default is to be PETSC_SQRT_MACHINE_EPSILON
    . *Fix SNESNESNEWTONASModifyActiveSet_Private() -- the tbar calculation
        : When calculating tbar_i take into account the fact that bx_v[c] and dl_v[c]  might be negative, which might screw up the allowable interval
	  calculation.
    . *Add SNESLineSearchGetMerit() to retrieve the cached merit function from the final solution found by the linesearch.
        : It would be best to add it to the list of things returned by SNESLineSearchGetNorms(), but that breaks the existing API.
  - Dmitry:
    . *Finish SNESSolve_NEWTONAS() with the linear solve as a stub, but all of the DM interaction in place.
    .  Implement SNESNEWTONASComputeSearchDirectionSaddle_Private()
        : *using a user-provided assembled augmented Jacobian
        : by assembling the augmented Jacobian out of blocks using MatConvert_Nest_MPIAIJ
   - Todd:
    . *Pontificate
General task list by category.
    - 'ACTIVITY MANAGEMENT'
     . SNESNESNEWTONASModifyActiveSet_Private() -- actually make this modify the active set, instead of throwing an error.
       Otherwise we might be infeasible after the first iteration and will need projection.
    - 'LINESEARCH'
     . Derivative-based version of SNESLineSearch impls that work with and without projection.
    - 'LINEAR SOLVE'
     . SNESNEWTONASComputeSearchDirectionPrimal_Private()
    - 'WIRING'
     . Replace scatter/gathers by VecNest/VecSubVec
    'MISC'
     . Create SNESNEWTONASComputeConstraints() and similar wrappers for use in custom Merit functions?
     . Check for DOMAIN_ERROR in the merit function.
*/
/*
   QUESTIONS:
   - How do we ensure that in the absence of true constraints (i.e., when all constraints are +/-Inf)
     the algorithm reduces to an efficient approximation of constraint-free SNES (e.g., similar to SNESNEWTONLS).
*/