dnl Process this file with autoconf to produce a configure script.
dnl The file must be relative to the location of the configure program
dnl itself
dnl
dnl Here is a typical configure usage
dnl setenv PETSC_ARCH sun4config
dnl ./bin/configure --enable-installsite --enable-opt=-O --enable-optname=O \
dnl                --with-blas=/home/petsc/software/blaslapack/blas.a \
dnl                --with-lapack=/home/petsc/software/blaslapack/lapack.a
dnl
dnl To build a new version of configure, execute the following:
dnl    autoheader
dnl    autoconf
dnl These should correspond to at least version 2.12; these are in 
dnl /mcs/bin at Argonne.
dnl
dnl The documentation for configure is available through Emacs info; look
dnl for autoconf 2.12.
dnl 
dnl --------- End of Header ----------
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
dnl
dnl We may prefer to allow an alternate cache to be specified; in that case,
dnl we may want to set cache_file to /dev/null instead of defining load/save
dnl as empty.
dnl
dnl Set CFLAGS for C compiler
dnl Set LDFLAGS for things like -L/usr/local/mpi
dnl See the petsc.conf file below for an alternative approach
dnl
dnl Make sure that we're in the correct directory by looking for a file
dnl that must be present.  Initialize configure (this will process the
dnl command line)
AC_INIT(../include/petsc.h)
dnl
dnl Insist on autoconf 2.12 or later
AC_PREREQ(2.12)
dnl
dnl Find the root PETSC directory if it hasn't been specified
if test -z "$PETSC_DIR" ; then 
    PETSC_DIR=`pwd`
fi
dnl
dnl Try to determine the architecture if PETSC_ARCH is not defined.
dnl The name is likely to be long and specific; a user might want to 
dnl pick a shorter name.
if test -z "$PETSC_ARCH" ; then
    AC_CANONICAL_HOST
    PETSC_ARCH="$host"
    echo "PETSC_ARCH must be defined; guessing $PETSC_ARCH"
fi
dnl AC_SUBST causes @PETSC_ARCH@ in the output files to be replaced with the
dnl value of the variable PETSC_ARCH.  AC_SUBST is implicit in many of the
dnl autoconf commands.
AC_SUBST(PETSC_ARCH)
dnl
dnl Also remove any local petscconf.h file
dnl comment rm -f petscconf.h
dnl
dnl
dnl NOT DONE YET
dnl Read in a "petsc.conf" file containing values to use, particularly for
dnl things like the location of BlockSolve, MPI, etc.
dnl
dnl This adds a definition of the CPP name ARCH_NAME with the value 
dnl "$PETSC_ARCH" (including the quotes!) to the generated petscconf.h file
dnl (see below)
AC_DEFINE_UNQUOTED(ARCH_NAME,"$PETSC_ARCH")
dnl
dnl Place the ARG processing AFTER the petsc.conf file so that the
dnl command line args can override any defaults.
dnl 
dnl To activate these, you do things like
dnl  --enable-echo
dnl  --with-mpi
dnl  --with-mpi=no  (no mpi)
dnl  --with-blocksolve=<library location>
dnl  --with-blocksolve-inc=<include location>
dnl  --enable-opt="-g -Wall"
dnl configure -help will remind you of much of this
dnl
dnl This is fairly awkward; if you want an easier syntax for command line
dnl arguments, the right way to do it is to write a separate script that
dnl converts friendly formated command line args to the uglier configure
dnl arguments, and then invokes configure.  Similar things can be done
dnl for the environment variables.
dnl
AC_ARG_ENABLE(echo,Turn on strong echoing,set -x)
AC_ARG_WITH(mpi, mpi - Choose MPI implementation,USE_MPI=1,USE_MPI=0)
AC_ARG_ENABLE(opt, opt=flagsChoose compiler optimization,
              COPTFLAGS="$COPTFLAGS $enable_opt")
AC_ARG_ENABLE(optname, optname=name - Choose BOPT name,
              BOPTNAME="$enable_optname")
AC_ARG_ENABLE(installsite, installsite - Install bmake site files,install_sitefiles=1,
install_sitefiles=0)
dnl
AC_ARG_WITH(matlab,Include matlab interface,MATLABPATH=$withval)
dnl
AC_ARG_WITH(blas, blas=library - Use system-provided BLAS,BLAS_LIB=$withval)
AC_SUBST(BLAS_LIB)
AC_ARG_WITH(lapack, lapack=library - Use system-provide LAPACK,LAPACK_LIB=$withval)
AC_SUBST(LAPACK_LIB)
dnl
AC_ARG_WITH(blocksolve, blocksolve=library - Use BlockSolve95,BS_LIB=$withval)
AC_ARG_WITH(blocksolve-inc, blocksolve-inc=dir - Use BlockSolve95 (include path),BS_INCLUDE=$withval)
dnl
dnl convert the BlockSolve include into a CPP command
if test -n "$BS_INCLUDE" ; then
    BS_INCLUDE="-I$BS_INCLUDE"
fi
dnl
dnl Set default optname
if test -z "$BOPTNAME" ; then
    if test -n "$enable_opt" ; then 
	BOPTNAME=`echo $enable_opt | sed -e 's/-//' -e 's/^(.).*$/\1/'`
    fi
fi
dnl
dnl Determine if HAVE_BLOCKSOLVE should be defined.  
if test -n "$BS_INCLUDE" -a -n "$BS_LIB" ; then 
    dnl
    dnl Add information on this CPP variable to acconfig.h as well (this 
    dnl is used to generate petscconf.h.in automatically with the autoheader
    dnl command)
    dnl Previously, this was put into the PCONF variable; it should be
    dnl in the definitions file instead.
    dnl AC_DEFINE(HAVE_BLOCKSOLVE)
    PCONF="$PCONF -DPETSC_HAVE_BLOCKSOLVE"
fi
AC_SUBST(BS_LIB)
AC_SUBST(BS_INCLUDE)
dnl
AC_ARG_WITH(pvode, pvode=library - Use PVODE,PVODE_LIB=$withval)
AC_ARG_WITH(pvode-inc, pvode-inc=dir - Use PVODE (include path),PVODE_INCLUDE=$withval)
dnl
dnl as for BLOCKSOLVE
if test -n "$PVODE_INCLUDE" ; then
    PVODE_INCLUDE="-I$PVODE_INCLUDE"
fi
if test -n "$PVODE_INCLUDE" -a -n "$PVODE_LIB" ; then 
    dnl AC_DEFINE(HAVE_PVODE)
    PCONF="$PCONF -DPETSC_HAVE_PVODE"
fi
AC_SUBST(PVODE_LIB)
AC_SUBST(PVODE_INCLUDE)
dnl
AC_ARG_WITH(adic-inc, adic-inc=dir - Specify ADIC include directories,
            ADIC_INCLUDE="$withval")
AC_ARG_WITH(adic-lib, adic-lib=liblist - Specify ADIC library list,
            ADIC_LIB="$withval")
AC_ARG_WITH(adic-cc, adic-cc=program - Specify ADIC compiler,
            ADIC_CC="$withval")
AC_SUBST(ADIC_INCLUDE)
AC_SUBST(ADIC_LIB)
AC_SUBST(ADIC_CC)
dnl
AC_ARG_WITH(sitefile, sitefile=file - Specify sitefile,sitefile=$withval)
dnl
dnl
dnl This defines a file that will contain the definitions that configure
dnl determines (rather than put them in CFLAGS or DEFS).  This is preferable,
dnl since (a) some compilers/systems limit the command line length and (b)
dnl the file can be kept with the libraries, showing how they were compiled
dnl and ensuring that definitions are consistent.  It also makes user
dnl Makefiles simpler, and allows users to concoct their own Makefiles more
dnl easily (the Makefiles are currently one place where PETSc really, really
dnl wants to be in charge).
dnl
AC_CONFIG_HEADER(bmake/config/petscconf.h:../bmake/config/petscconf.h.in)
dnl
dnl PETSc can have a fairly complex site configuration.  Rather than
dnl force the user to set a zillion environment variables, we allow the user
dnl to provide a configuration file that sets the environment variables
dnl The environment variables are:
dnl
dnl CC - C compiler
dnl CFLAGS - Flags for C compiler
dnl LDFLAGS - Flags for Loader (such as additional directories)
dnl FC_LIB - Fortran/C libraries
dnl BLAS_LIB - Full LD specification for BLAS
dnl LAPACK_LIB - Full LD specification for LAPACK
AC_MSG_CHECKING(for petsc.conf file)
if test -n "$sitefile" -a -s "$sitefile" ; then
    AC_MSG_RESULT(using $sitefile)
    dnl This syntax is just the sh way to read a file; it is similar to 
    dnl source filename in csh.
    . $sitefile
elif test -s petsc.conf ; then
    AC_MSG_RESULT(found petsc.conf)
    . petsc.conf
elif test -s $PETSC_DIR/bmake/$PETSC_ARCH/petsc.conf ; then
    AC_MSG_RESULT(found petsc.conf in bmake/$PETSC_ARCH)
    . $PETSC_DIR/bmake/$PETSC_ARCH/petsc.conf
else
    AC_MSG_RESULT(none)
fi
dnl
dnl Now we turn to fairly standard autoconf commands.  There are two major 
dnl types:  Specific and General.  The Specific types know how to look for
dnl things like X11 or awk that might have different versions or strange
dnl places to hide in.  The General ones test for arbitrary header files, 
dnl functions, programs, and such.
dnl
dnl Checks for programs.
AC_PROG_AWK
dnl This checks preferentially for gcc.  To change, set CC
AC_PROG_CC
if test "$GCC" = "yes" ; then
    # Check if -D__USE_FIXED_PROTOTYPES__ is needed
    dnl This test is not yet available.
    :
fi
dnl
if test -z "$AR" ; then
     AR="ar"
fi
AC_SUBST(AR)
if test -z "$AR_FLAGS" ; then
     AR_FLAGS="cr"
fi
AC_SUBST(AR_FLAGS)
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_CHECK_PROGS(MATLAB,matlab)
AC_CHECK_PROGS(FC,f77)

dnl Use --with-matlab-mex=path to select matlab support
dnl if test -z "$MATLABINCPATH" ; then
dnl     MATLABINCPATH=/usr/local/matlab/extern
dnl fi
dnl PAC_FIND_USER_LIB(mex,$MATLABPATH,MATLAB_LIB=$pac_lib_file)
dnl PAC_FIND_USER_INCLUDE(cmex,$MATLABINCPATH,MATLAB_INCLUDE=-I$pac_inc_dir)

dnl Check for UNIX variants
AC_AIX
AC_MINIX

dnl Checks for libraries.
dnl Math library
dnl AC_CHECK_LIB(m, sin)

# libnsl needed on Solaris for socket and gethostbyname calls
AC_CHECK_LIB(nsl,gethostbyname)
AC_CHECK_LIB(socket,socket)
#
# BLAS are in sunperf.  They include a C version, so we need only test for
# the C name
# LAPACK is also in sunperf (check for sgebak)
# Note that sunperf expect -lm
# sunperf is actually licensed, so you need bizarre syntax to access it
# It also doesn't want to work with the C compiler/linker (apparently it
# expects to be linked with Fortran always)
# It needs -xlic_lib=sunperf
#
# Check that the specified libraries exist
if test -n "$BLAS_LIB" -a ! -f "$BLAS_LIB" ; then
    echo "BLAS library $BLAS_LIB does not exist!"
    BLAS_LIB=""
fi
if test -n "$LAPACK_LIB" -a ! -f "$LAPACK_LIB" ; then
    echo "LAPACK library $LAPACK_LIB does not exist!"
    LAPACK_LIB=""
fi
if test -z "$BLAS_LIB" -a -z "$LAPACK_LIB" ; then 
    SAVE_LIBS="$LIBS"
    LIBS="$LIBS -xlic_lib=sunperf"
    AC_CHECK_FUNC(dgemm,found_insunperf=1,found_insunperf=0)
    if test $found_insunperf = 1 ; then
	:
    else
        LIBS="$SAVE_LIBS"
    fi
fi

if test $USE_MPI = 1 ; then 
    dnl MPI library; if not found, select uniprocessor version
    dnl We could look for the library in the directory MPILIBPATH
    dnl or check the PETSc arch for likely locations.  On some vendor
    dnl systems, the simple check below will work
    dnl
    AC_CHECK_LIB(mpi, MPI_Init,,USE_MPI=0)
    if test $USE_MPI = 0 ; then
	# Try harder
        LDFLAGSSAV=$LDFLAGS
        LDFLAGS="$LDFLAGS $MPILIBPATH"
        USE_MPI=1
        AC_CHECK_LIB(mpi, MPI_Init,,USE_MPI=0)
	LDFLAGS="$LDFLAGSSAV"
        if test $USE_MPI = 0 ; then
	    LDFLAGS="$LDFLAGSSAV"
	fi
    fi
    if test $USE_MPI = 0 ; then
        echo "No MPI library; PETSc will be compiled in uniprocessor mode" 
	echo "You can set a library path with the environment variable"
	echo "MPILIBPATH.  For example, "
	echo "setenv MPILIBPATH /usr/local/mpich/lib/sun4/ch_p4/libmpich.a"
    fi
fi
if test $USE_MPI = 0 ; then
    MPI_LIB="-lmpiuni"
    MPI_INCLUDE="-I$PETSC_DIR/src/sys/src/mpiuni"
    MPIRUN="$PETSC_DIR/src/sys/src/mpiuni/mpirun"
    # The location of mpi.h in PETSc has moved
    if test ! -s $PETSC_DIR/src/sys/src/mpiuni/mpi.h ; then
	echo "Could not find PETSc's mpi.h file!"
	echo "configure expected to find PETSc's mpi.h (for running in"
        echo "single processor mode) in  $PETSC_DIR/src/sys/src/mpiuni/mpi.h"
        echo "Check that you have PETSC_DIR set correctly, and that the"
	echo "PETSc source tree has been correctly unpacked (for example,"
        echo "check that the extraction was not terminated due to low disk"
        echo "space)."
	exit 1
    fi
fi
AC_SUBST(MPI_LIB)
AC_SUBST(MPIRUN)
AC_SUBST(MPI_INCLUDE)
dnl
dnl MPICH MPE libraries
if test -n "$MPE_LIB" -a -n "$MPE_INCLUDE" ; then 
    dnl AC_DEFINE(HAVE_MPE)
    PCONF="$PCONF -DPETSC_HAVE_MPE"
fi
AC_SUBST(MPE_LIB)
AC_SUBST(MPE_INCLUDE)
dnl
AC_SUBST(PCONF)
dnl
dnl Fortran support
export CC
export FC
FC_LIB=`bin/findftnlibs | tr '\012' ' '`
if test -n "$FC_LIB" ; then
    echo "Fortran linker needs $FC_LIB"
fi
AC_SUBST(FC_LIB)
# End of Fortran name checks
dnl Check for needs _fcdtocp
dnl ... not done yet ... (in MPICH, we use include <fortran.h>, since
dnl _fcdtocp might be a macro)
dnl
AC_FORTRAN_NAMES_IN_C
dnl
dnl These need to know the Fortran naming rules first
dnl NOT DONE YET
dnl if test "$FORTRAN_NAMING" = "-DHAVE_FORTRAN_UNDERSCORE" ; then
dnl     AC_CHECK_LIB(blas,ddot_)
dnl     AC_CHECK_LIB(lapack,dgemm_)
dnl elif test "$FORTRAN_NAMING" = "-DHAVE_FORTRAN_CAPS" ; then
dnl     AC_CHECK_LIB(blas,DDOT)
dnl     AC_CHECK_LIB(lapack,DGEMM)
dnl elif test "$FORTRAN_NAMING" = "-DHAVE_FORTRAN_UNDERSCORE_UNDERSCORE" ; then
dnl     AC_CHECK_LIB(blas,ddot__)
dnl     AC_CHECK_LIB(lapack,dgemm__)
dnl else
dnl     AC_CHECK_LIB(blas,ddot)
dnl     AC_CHECK_LIB(lapack,dgemm)
dnl fi
dnl We can't use AC_CHECK_LIB, since it requires libs in the -lname and
dnl can't handle /.../blas.a etc.  People shouldn't use names that don't
dnl start with lib, but we shouldn't mandate that.
dnl
dnl Compiler options
dnl 
AC_SUBST(COPTFLAGS)
AC_SUBST(PETSCFLAGS)
AC_SUBST(FOPTFLAGS)

#
# Determine shared library options if possible
# Options are -fPIC for C (gcc)
# -KPIC (Solaris SunPro)
# (none) (AIX, but makeing the library itself is a mess)
if test -z "$CC_SHARED_OPT" ; then
    PAC_CHECK_COMPILER_OPTION(-fPIC,CC_SHARED_OPT=-fPIC)
    SHAREDKIND=gcc
fi
if test -z "$CC_SHARED_OPT" ; then
    PAC_CHECK_COMPILER_OPTION(-KPIC,CC_SHARED_OPT=-KPIC)
    if test $ARCH = "solaris" ; then
	    SHAREDKIND=solaris
    fi
fi
# Fortran choices
# -PIC (SunOS)
# -KPIC (Solaris)
if test -z "$FC_SHARED_OPT" ; then
    PAC_CHECK_FC_COMPILER_OPTION(-PIC,FC_SHARED_OPT=-PIC)
fi
if test -z "$FC_SHARED_OPT" ; then
    PAC_CHECK_FC_COMPILER_OPTION(-fPIC,FC_SHARED_OPT=-fPIC)
fi
if test -z "$FC_SHARED_OPT" ; then
    PAC_CHECK_FC_COMPILER_OPTION(-fPIC,FC_SHARED_OPT=-KPIC)
fi
AC_SUBST(CC_SHARED_OPT)
AC_SUBST(FC_SHARED_OPT)
dnl
dnl This is needed on some older IRIX systems
AC_CHECK_LIB(sun,getpwnam)

dnl Checks for header files.
AC_PATH_X
dnl
dnl Convert results into values that we can use.  no_x is yes or empty
dnl (yes if x is turned off with --without-x, or could not find)
if test -z "$no_x" ; then
    dnl AC_DEFINE(HAVE_X11)
    PCONF="$PCONF -DPETSC_HAVE_X11"
fi
if test -n "$x_includes" ; then
     CPP_X_INCLUDE="-I$x_includes"
     AC_SUBST(CPP_X_INCLUDE)
fi
if test -n "$x_libraries" ; then
     # x_libraries is the directory that contains them
     X_LIBRARIES="-L$x_libraries -lX11"
     AC_SUBST(X_LIBRARIES)
fi
dnl
dnl Look for header files.  Some of these need special tests because 
dnl some are not implemented correctly on all platforms.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h strings.h sys/time.h unistd.h)
AC_CHECK_HEADERS(stropts.h search.h pwd.h string.h sys/systeminfo.h)
AC_CHECK_HEADERS( sys/resource.h sys/procfs.h)
dnl io.h is really only an NT header; we include this as part of unifying
dnl the configuration
AC_CHECK_HEADERS(io.h)
dnl 
dnl STDC checks for stdlib but also for some others.  We should probably
dnl NOT use HAVE_STDLIB_H; instead, use #if STDC_HEADERS .... #else declare 
dnl  function #endif
AC_CHECK_HEADERS(stdlib.h)
dnl
dnl Check that the stat macros work correctly.  Define STAT_MACROS_BROKEN
dnl otherwise
AC_HEADER_STAT
dnl
dnl Checks for typedefs, structures, and compiler characteristics.
dnl If this discovers that const doesn't work, defines const as empty
dnl so that you can use const in the program without fear.
AC_C_BIGENDIAN
AC_C_CONST
AC_CHECK_SIZEOF(void *,4)
AC_CHECK_SIZEOF(int,4)
dnl
dnl TYPE_UID_T and TYPE_SIZE_T get the types of these; if they aren't around,
dnl adds definitions that make these ints (again so you can use them without
dnl fear)
AC_TYPE_UID_T
AC_TYPE_SIZE_T
dnl
dnl See if both time.h and sys/time.h may be included (see autoconf 2 docs)
AC_HEADER_TIME
dnl
dnl Checks for library functions.
dnl This tests for needing -traditional on gcc when using ioctl.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
dnl
dnl PETSc also wants the check that VPRINTF takes void * or char * pointers.
dnl
dnl This is an example of a general test for the named functions)
AC_CHECK_FUNCS(getcwd gethostname gettimeofday getwd socket strstr sysinfo uname drand48 memmove realpath readlink)
AC_CHECK_FUNCS(rand)
AC_CHECK_FUNCS(sigaction signal sigset)
dnl
dnl T3D didn't provide DGESVD
dnl AC_CHECK_FUNCS(dgesvd_)
dnl
dnl IBM MPI needs
dnl (nee a test for this)
dnl AC_DEFINE(HAVE_BROKEN_REQUEST_FREE)
dnl
dnl Fortran BLAS should define
dnl AC_DEFINE(HAVE_SLOW_NRM2)
dnl
dnl Special routines
echo "checking for special routines for floating-point exceptions"
case $PETSC_ARCH in
    sun4*|solaris) 
          # Despite the documentation, the IEEE functions are in libm,
          # at least in SunOS 4.1.4.  We need to do this to get 
          # the compiler to link against -lm .
          AC_CHECK_LIB(m,sin)
          AC_CHECK_LIB(sunmath,standard_arithmetic)
	  AC_CHECK_HEADERS(floatingpoint.h sunmath.h)
          AC_CHECK_FUNCS(ieee_flags ieee_handler standard_arithmetic)
	  ;;
    IRIX*|SGI*) 
	  AC_CHECK_LIB(fpe,handle_sigfpes)
	  AC_CHECK_HEADERS(sigfpe.h)
          dnl AC_CHECK_FUNCS(handle_sigfpes) 
	  ;;
    intelnx|paragon)
	  AC_CHECK_HEADERS(ieeefp.h)
          AC_CHECK_FUNCS(fpsetmask)
	  ;;
    rs6000|AIX)
	  AC_CHECK_HEADERS(fpxcp.h)
          AC_CHECK_HEADERS(fptrap.h)
          AC_CHECK_FUNCS(fp_sh_trap_info fp_trap fp_enable fp_disable)
          ;;
    # Other cases just use default handler.
esac

dnl
dnl The "extra commands" are not executed in the environment of the
dnl configure script, and hence can't include any variables.
dnl
dnl Note that the input and output filenames are not handled correctly
dnl by configure in the case where configure lives in a subdirectory.
dnl To work around this, we use the output:input file name options
dnl
AC_OUTPUT(bmake/config/base.site:../bmake/config/base.site.in bmake/config/base:../bmake/config/base.in bmake/config/base_variables:../bmake/config/base_variables.in)
dnl
dnl If the user asked us, move the files into the bmake area in their own
dnl directory
dnl
if test $install_sitefiles = 1 ; then 
    if test ! -d $PETSC_DIR/bmake/$PETSC_ARCH ; then
        mkdir $PETSC_DIR/bmake/$PETSC_ARCH
    else 
	# Check that this is a config directory; else move it aside
	if test ! -f $PETSC_DIR/bmake/$PETSC_ARCH/.isconfig ; then
	     if test -d $PETSC_DIR/bmake/$PETSC_ARCH.bak ; then
		if test -f $PETSC_DIR/bmake/$PETSC_ARCH/.isconfig ; then
		    rm -rf $PETSC_DIR/bmake/$PETSC_ARCH.bak
		fi
	     fi
 	    if test ! -d $PETSC_DIR/bmake/$PETSC_ARCH.bak ; then 
                mv -f $PETSC_DIR/bmake/$PETSC_ARCH $PETSC_DIR/bmake/$PETSC_ARCH.bak
		mkdir $PETSC_DIR/bmake/$PETSC_ARCH
	    fi
	fi
    fi
    echo "Moving created files to $PETSC_DIR/bmake/$PETSC_ARCH"
    mv bmake/config/base.site $PETSC_DIR/bmake/$PETSC_ARCH/base.site
    mv bmake/config/base_variables $PETSC_DIR/bmake/$PETSC_ARCH/base_variables
    mv bmake/config/base     $PETSC_DIR/bmake/$PETSC_ARCH/base
    # Change all DEFINE to PETSC_DEFINE
    cat bmake/config/petscconf.h | sed s/'^#define '/'#define PETSC_'/g | grep '^#define' > bmake/config/petscconf.tmp
    mv -f bmake/config/petscconf.tmp $PETSC_DIR/bmake/$PETSC_ARCH/petscconf.h    
    mv -f bmake/config/petscconf.h $PETSC_DIR/bmake/$PETSC_ARCH/petscconf.unmodified
    touch $PETSC_DIR/bmake/$PETSC_ARCH/petscfix.h    
    # If we move the petscconf.h into the lib directory, we need to
    # fix the make all target to NOT delete it
    # Leave a marker that configure setup this directory
    rm -f $PETSC_DIR/bmake/$PETSC_ARCH/.isconfig
    date > $PETSC_DIR/bmake/$PETSC_ARCH/.isconfig
else
    echo "Leaving configuration files in bmake/config"
fi

