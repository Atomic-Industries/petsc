dnl Process this file with autoconf to produce a configure script.
dnl The file must be relative to the location of the configure program
dnl itself
dnl
dnl Here is a typical configure usage:
dnl
dnl setenv PETSC_ARCH solarisconfig
dnl setenv CC  cc
dnl setenv FC  f77
dnl setenv CCC CC
dnl ./bin/configure --enable-installsite --enable-opt=-O --enable-optname=O \
dnl                --with-blas=/home/petsc/software/blaslapack/blas_solaris.a \
dnl                --with-lapack=/home/petsc/software/blaslapack/lapack_solaris.a
dnl
dnl To build a new version of configure, execute the following:
dnl    autoheader
dnl    autoconf
dnl These should correspond to at least version 2.13; these are in 
dnl /mcs/bin at Argonne.
dnl
dnl The documentation for configure is available through Emacs info; look
dnl for autoconf 2.12.
dnl 
dnl --------- End of Header ----------
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
dnl
dnl We may prefer to allow an alternate cache to be specified; in that case,
dnl we may want to set cache_file to /dev/null instead of defining load/save
dnl as empty.
dnl
dnl Set CFLAGS for C compiler
dnl Set LDFLAGS for things like -L/usr/local/mpi
dnl See the petsc.conf file below for an alternative approach
dnl
dnl Make sure that we're in the correct directory by looking for a file
dnl that must be present.  Initialize configure (this will process the
dnl command line)
AC_INIT(../include/petsc.h)
dnl
dnl  Turn off printing tests to screen (but allow them as an option)
dnl
AC_ARG_ENABLE(print-tests,
[ --enable-print-tests -- Turn on configure-style printing of tests],
print_tests=$enableval,print_tests=no)

if test "$print_tests" != "yes" ; then
    exec 6>config.log6
    exec 9>&1
    exec 1>config.log1
fi

dnl
dnl Insist on autoconf 2.13 or later
AC_PREREQ(2.13)
dnl Find other required files in the config subdirectory
AC_CONFIG_AUX_DIR(config)
dnl
dnl Set flag for error exit
Fatal_errors_seen=no
dnl
dnl Find the root PETSC directory if it hasn't been specified
if test -z "$PETSC_DIR" ; then 
    PETSC_DIR=`pwd`
    PETSC_DIR_NOT_SET=yes
fi
dnl
dnl Try to determine the architecture if PETSC_ARCH is not defined.
dnl The name is likely to be long and specific; a user might want to 
dnl pick a shorter name.
if test -z "$PETSC_ARCH" ; then
    AC_CANONICAL_HOST
    PETSC_ARCH="$host"
else
    PETSC_ARCH_SET="yes"
fi
dnl AC_SUBST causes @PETSC_ARCH@ in the output files to be replaced with the
dnl value of the variable PETSC_ARCH.  AC_SUBST is implicit in many of the
dnl autoconf commands.
AC_SUBST(PETSC_ARCH)
dnl
dnl Also remove any local petscconf.h file
dnl comment rm -f petscconf.h
dnl
dnl
dnl NOT DONE YET
dnl Read in a "petsc.conf" file containing values to use, particularly for
dnl things like the location of BlockSolve, MPI, etc.
dnl
dnl This adds a definition of the CPP name ARCH_NAME with the value 
dnl "$PETSC_ARCH" (including the quotes!) to the generated petscconf.h file
dnl (see below)
AC_DEFINE_UNQUOTED(ARCH_NAME,"$PETSC_ARCH")
dnl
dnl Place the ARG processing AFTER the petsc.conf file so that the
dnl command line args can override any defaults.
dnl 
dnl To activate these, you do things like
dnl  --enable-echo
dnl  --with-mpi
dnl  --with-mpi=no  (no mpi)
dnl  --with-blocksolve=<library location>
dnl  --with-blocksolve-inc=<include location>
dnl  --enable-opt="-g -Wall"
dnl configure -help will remind you of much of this
dnl
dnl This is fairly awkward; if you want an easier syntax for command line
dnl arguments, the right way to do it is to write a separate script that
dnl converts friendly formated command line args to the uglier configure
dnl arguments, and then invokes configure.  Similar things can be done
dnl for the environment variables.
dnl
AC_ARG_ENABLE(echo,[ --enable-echo - Turn on strong echoing],set -x)
AC_ARG_WITH(mpi, [ --with-mpi - Choose MPI implementation],USE_MPI=yes,USE_MPI=no)
AC_ARG_ENABLE(opt, [ --enable-opt=flags - Choose compiler optimization],
              COPTFLAGS="$COPTFLAGS $enable_opt")
AC_ARG_ENABLE(optname, [ --enable-optname=name - Choose BOPT name],
              BOPTNAME="$enable_optname")
AC_ARG_WITH(cc,[  --with-cc=C_compiler - Choose the C compiler],
            CC="$withval")
AC_ARG_WITH(fc,[  --with-fc=Fortran_compiler - Choose the Fortran compiler],
            FC="$withval")
AC_ARG_WITH(cxx,[  --with-cxx=C++_compiler - Choose the C++ compiler],
            CXX="$withval")
AC_ARG_WITH(gnu,[  --with-gnu - Choose GNU compilers over native],
            USE_GNU=$withval,USE_GNU=yes)
AC_ARG_ENABLE(installsite,
[ --enable-installsite - Install bmake site files],install_sitefiles=yes,
install_sitefiles=no)
dnl
AC_ARG_WITH(matlab,[ --with-matlab=path - Include matlab interface],MATLABPATH=$withval)
dnl
dnl   
dnl
AC_ARG_WITH(bmakedir,[ --with-bmakedir=dir - Use BMAKEDIR],BMAKEDIR=$withval)
dnl
AC_ARG_WITH(blas,[ --with-blas=library - Use system-provided BLAS],BLAS_LIB=$withval)
AC_SUBST(BLAS_LIB)
AC_ARG_WITH(lapack,[ --with-lapack=library - Use system-provide LAPACK],LAPACK_LIB=$withval)
AC_SUBST(LAPACK_LIB)
dnl
AC_ARG_WITH(blocksolve,[ --with-blocksolve=library - Use BlockSolve95],BLOCKSOLVE_LIB=$withval)
AC_ARG_WITH(blocksolve-inc,[ --with-blocksolve-inc=dir - Use BlockSolve95 (include path)],BLOCKSOLVE_INCLUDE=$withval)
dnl
dnl convert the BlockSolve include into a CPP command
if test -n "$BLOCKSOLVE_INCLUDE" ; then
    BLOCKSOLVE_INCLUDE="-I$BLOCKSOLVE_INCLUDE"
fi
dnl
dnl Set default optname
if test -z "$BOPTNAME" ; then
    if test -n "$enable_opt" ; then 
	BOPTNAME=`echo $enable_opt | sed -e 's/-//' -e 's/^(.).*$/\1/'`
    fi
fi
dnl
dnl Determine if HAVE_BLOCKSOLVE should be defined.  
if test -n "$BLOCKSOLVE_INCLUDE" -a -n "$BLOCKSOLVE_LIB" ; then 
    dnl
    dnl Add information on this CPP variable to acconfig.h as well (this 
    dnl is used to generate petscconf.h.in automatically with the autoheader
    dnl command)
    PETSC_HAVE_BLOCKSOLVE="-DPETSC_HAVE_BLOCKSOLVE"
fi
AC_SUBST(BLOCKSOLVE_LIB)
AC_SUBST(BLOCKSOLVE_INCLUDE)
AC_SUBST(PETSC_HAVE_BLOCKSOLVE)
dnl
AC_ARG_WITH(pvode,[ --with-pvode=library - Use PVODE],PVODE_LIB=$withval)
AC_ARG_WITH(pvode-inc,[ --with-pvode-inc=dir - Use PVODE (include path)],PVODE_INCLUDE=$withval)
dnl
dnl as for BLOCKSOLVE
if test -n "$PVODE_INCLUDE" ; then
    PVODE_INCLUDE="-I$PVODE_INCLUDE"
fi
if test -n "$PVODE_INCLUDE" -a -n "$PVODE_LIB" ; then 
    PETSC_HAVE_PVODE="-DPETSC_HAVE_PVODE"
fi
AC_SUBST(PVODE_LIB)
AC_SUBST(PVODE_INCLUDE)
AC_SUBST(PETSC_HAVE_PVODE)
dnl
AC_ARG_WITH(adic-inc,[ --with-adic-inc=dir - Specify ADIC include directories],
            ADIC_INCLUDE="$withval")
AC_ARG_WITH(adic-lib,[ --with-adic-lib=liblist - Specify ADIC library list],
            ADIC_LIB="$withval")
AC_ARG_WITH(adic-cc,[ --with-adic-cc=program - Specify ADIC compiler],
            ADIC_CC="$withval")
if test -n "$ADIC_INCLUDE" -a -n "$ADIC_LIB" ; then 
    PETSC_HAVE_ADIC="-DPETSC_HAVE_ADIC"
fi
AC_SUBST(ADIC_INCLUDE)
AC_SUBST(ADIC_LIB)
AC_SUBST(ADIC_CC)
AC_SUBST(PETSC_HAVE_ADIC)
dnl
AC_ARG_WITH(sitefile,[ --with-sitefile=file - Specify sitefile],sitefile=$withval)
dnl
dnl
dnl This defines a file that will contain the definitions that configure
dnl determines (rather than put them in CFLAGS or DEFS).  This is preferable,
dnl since (a) some compilers/systems limit the command line length and (b)
dnl the file can be kept with the libraries, showing how they were compiled
dnl and ensuring that definitions are consistent.  It also makes user
dnl Makefiles simpler, and allows users to concoct their own Makefiles more
dnl easily (the Makefiles are currently one place where PETSc really, really
dnl wants to be in charge).
dnl
AC_CONFIG_HEADER(bmake/config/petscconf.h:../bmake/config/petscconf.h.in)
dnl
dnl PETSc can have a fairly complex site configuration.  Rather than
dnl force the user to set a zillion environment variables, we allow the user
dnl to provide a configuration file that sets the environment variables
dnl The environment variables are:
dnl
dnl CC - C compiler
dnl CFLAGS - Flags for C compiler
dnl LDFLAGS - Flags for Loader (such as additional directories)
dnl FC_LIB - Fortran/C libraries
dnl BLAS_LIB - Full LD specification for BLAS
dnl LAPACK_LIB - Full LD specification for LAPACK
AC_MSG_CHECKING(for petsc.conf file)
if test -n "$sitefile" -a -s "$sitefile" ; then
    AC_MSG_RESULT(using $sitefile)
    dnl This syntax is just the sh way to read a file; it is similar to 
    dnl source filename in csh.
    . $sitefile
elif test -s petsc.conf ; then
    AC_MSG_RESULT(found petsc.conf)
    . petsc.conf
elif test -s $PETSC_DIR/bmake/$PETSC_ARCH/petsc.conf ; then
    AC_MSG_RESULT(found petsc.conf in bmake/$PETSC_ARCH)
    . $PETSC_DIR/bmake/$PETSC_ARCH/petsc.conf
else
    AC_MSG_RESULT(none)
fi
dnl
dnl Now we turn to fairly standard autoconf commands.  There are two major 
dnl types:  Specific and General.  The Specific types know how to look for
dnl things like X11 or awk that might have different versions or strange
dnl places to hide in.  The General ones test for arbitrary header files, 
dnl functions, programs, and such.
dnl
dnl Checks for programs.
AC_PROG_AWK
dnl Try to find a non-gcc compiler
if test "$USE_GNU" != "yes" ; then
      AC_CHECK_PROGS(CC, cc xlC xlc pgcc)
fi
dnl This checks preferentially for gcc.  To change, set CC
AC_PROG_CC

if test "$GCC" = "yes" ; then
    # Check if -D__USE_FIXED_PROTOTYPES__ is needed
    dnl This test is not yet available.
    :
fi
dnl
if test -z "$AR" ; then
     AR="ar"
fi
AC_SUBST(AR)
if test -z "$AR_FLAGS" ; then
     AR_FLAGS="cr"
fi
AC_SUBST(AR_FLAGS)
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
dnl
dnl PROG_MAKE_SET sets the variable SET_MAKE to MAKE = ${MAKE} it
dnl makefiles require it
AC_PROG_MAKE_SET
dnl
dnl
AC_CHECK_PROGS(MATLAB,matlab)

AC_CHECK_PROGS(UCBPS,/usr/ucb/ps,/usr/usb/ps)
if test -n "$UCBPS" ; then
    AC_DEFINE(HAVE_UCBPS)
fi

AC_CHECK_PROGS(FC,f77 pgf77 g77)

if test -z "$CCC" ; then
      if test "$USE_GNU" != "yes" ; then
          AC_CHECK_PROGS(CXX, $CCC xlC pgCC c++ CC cxx cc++ cl , gcc)
      fi 
      AC_PROG_CXX
      CCC=$"CXX"
fi
AC_SUBST(CCC)

dnl Use --with-matlab-mex=path to select matlab support
dnl if test -z "$MATLABINCPATH" ; then
dnl     MATLABINCPATH=/usr/local/matlab/extern
dnl fi
dnl PAC_FIND_USER_LIB(mex,$MATLABPATH,MATLAB_LIB=$pac_lib_file)
dnl PAC_FIND_USER_INCLUDE(cmex,$MATLABINCPATH,MATLAB_INCLUDE=-I$pac_inc_dir)

dnl Check for UNIX variants
AC_AIX
AC_MINIX

dnl Check for recursive use of macros ok
PAC_MACRO_NAME_IN_MACRO(,[AC_DEFINE(HAVE_BROKEN_RECURSIVE_MACRO)])

dnl Checks for libraries.
dnl Math library
dnl AC_CHECK_LIB(m, sin)

# libnsl needed on Solaris for socket and gethostbyname calls
dnl These autoconf 2.13 functions add the library only if it is needed for
dnl the function in the first argument.  Some systems provide gethostbyname
dnl in the default libaries, for example.
AC_SEARCH_LIBS(gethostbyname,nsl)
AC_SEARCH_LIBS(socket,socket)
#
# BLAS are in sunperf.  They include a C version, so we need only test for
# the C name
# LAPACK is also in sunperf (check for sgebak)
# Note that sunperf expects -lm
# sunperf is actually licensed, so you need bizarre syntax to access it
# It also doesn't want to work with the C compiler/linker (apparently it
# expects to be linked with Fortran always)
# It needs -xlic_lib=sunperf
#
# Check that the specified libraries exist
if test -n "$BLAS_LIB" -a ! -f "$BLAS_LIB" ; then
    AC_MSG_WARN([BLAS library $BLAS_LIB does not exist!])
    BLAS_LIB=""
fi
if test -n "$LAPACK_LIB" -a ! -f "$LAPACK_LIB" ; then
    AC_MSG_WARN([LAPACK library $LAPACK_LIB does not exist!])
    LAPACK_LIB=""
fi
if test -z "$BLAS_LIB" -a -z "$LAPACK_LIB" ; then 
    SAVE_LIBS="$LIBS"
    LIBS="$LIBS -xlic_lib=sunperf"
    AC_CHECK_FUNC(dgemm,found_insunperf=yes,found_insunperf=no)
    if test $found_insunperf = "yes" ; then
	:
    else
        LIBS="$SAVE_LIBS"
    fi
fi

dnl Eventually, we should use the sowing version
if test $USE_MPI = "yes" ; then 
    dnl MPI library; if not found, select uniprocessor version
    dnl We could look for the library in the directory MPILIBPATH
    dnl or check the PETSc arch for likely locations.  On some vendor
    dnl systems, the simple check below will work
    dnl
    AC_SEARCH_LIBS(MPI_Init, mpi mpich,,USE_MPI=no)
    if test "$USE_MPI" = "no" ; then
	# Try harder
        LDFLAGSSAV=$LDFLAGS
        LDFLAGS="$LDFLAGS $MPILIBPATH"
        USE_MPI="yes"
        AC_SEARCH_LIBS(MPI_Init, mpi mpich,,USE_MPI="no")
	LDFLAGS="$LDFLAGSSAV"
        if test $USE_MPI = "no" ; then
	    LDFLAGS="$LDFLAGSSAV"
	fi
    fi
    if test $USE_MPI = "no" ; then
        AC_MSG_WARN([No MPI library; PETSc will be compiled in uniprocessor mode
	You can set a library path with the environment variable
	MPILIBPATH.  For example, 
	setenv MPILIBPATH /usr/local/mpich/lib/sun4/ch_p4/libmpich.a])
    else
        if test "$ac_cv_search_MPI_Init" != "none required" ; then
            MPI_LIB=$ac_cv_search_MPI_Init
        fi
    fi
fi
if test $USE_MPI = "no" ; then
    MPI_LIB="-lmpiuni"
    MPI_INCLUDE="-I$PETSC_DIR/src/sys/src/mpiuni"
    MPIRUN="$PETSC_DIR/src/sys/src/mpiuni/mpirun"
    # The location of mpi.h in PETSc has moved
    if test ! -s $PETSC_DIR/src/sys/src/mpiuni/mpi.h ; then
        AC_MSG_WARN([Could not find PETSc's mpi.h file!
	configure expected to find PETSc's mpi.h (for running in
        single processor mode) in  $PETSC_DIR/src/sys/src/mpiuni/mpi.h
        Check that you have PETSC_DIR set correctly, and that the
	PETSc source tree has been correctly unpacked (for example,
        check that the extraction was not terminated due to low disk
        space).])
	exit 1
    fi
fi
AC_SUBST(MPI_LIB)
AC_SUBST(MPIRUN)
AC_SUBST(MPI_INCLUDE)
dnl
dnl MPICH MPE libraries
if test -n "$MPE_LIB" -a -n "$MPE_INCLUDE" ; then 
    PETSC_HAVE_MPE="-DPETSC_HAVE_MPE"
fi
AC_SUBST(MPE_LIB)
AC_SUBST(MPE_INCLUDE)
AC_SUBST(PETSC_HAVE_MPE)
dnl
dnl
dnl Fortran support
dnl Autoconf 2.13 has a macro for this that we should consider
export CC
export FC
FC_LIB=`bin/config/findftnlibs | tr '\012' ' '`
if test -n "$FC_LIB" ; then
    echo "Fortran linker needs $FC_LIB" 1>&6
fi
AC_SUBST(FC_LIB)
# End of Fortran name checks
dnl Check for needs _fcdtocp
dnl ... not done yet ... (in MPICH, we use include <fortran.h>, since
dnl _fcdtocp might be a macro)
dnl
AC_FORTRAN_NAMES_IN_C
dnl
dnl These need to know the Fortran naming rules first
dnl NOT DONE YET
dnl if test "$FORTRAN_NAMING" = "-DHAVE_FORTRAN_UNDERSCORE" ; then
dnl     AC_CHECK_LIB(blas,ddot_)
dnl     AC_CHECK_LIB(lapack,dgemm_)
dnl elif test "$FORTRAN_NAMING" = "-DHAVE_FORTRAN_CAPS" ; then
dnl     AC_CHECK_LIB(blas,DDOT)
dnl     AC_CHECK_LIB(lapack,DGEMM)
dnl elif test "$FORTRAN_NAMING" = "-DHAVE_FORTRAN_UNDERSCORE_UNDERSCORE" ; then
dnl     AC_CHECK_LIB(blas,ddot__)
dnl     AC_CHECK_LIB(lapack,dgemm__)
dnl else
dnl     AC_CHECK_LIB(blas,ddot)
dnl     AC_CHECK_LIB(lapack,dgemm)
dnl fi
dnl We can't use AC_CHECK_LIB, since it requires libs in the -lname and
dnl can't handle /.../blas.a etc.  People shouldn't use names that don't
dnl start with lib, but we shouldn't mandate that.
dnl
dnl Compiler options
dnl 
AC_SUBST(COPTFLAGS)
AC_SUBST(PETSCFLAGS)
AC_SUBST(FOPTFLAGS)

#
# Determine shared library options if possible
# Options are -fPIC for C (gcc)
# -KPIC (Solaris SunPro)
# (none) (AIX, but makeing the library itself is a mess)
if test -z "$CC_SHARED_OPT" ; then
    PAC_CHECK_COMPILER_OPTION(-fPIC,CC_SHARED_OPT=-fPIC)
    SHAREDKIND=gcc
fi
if test -z "$CC_SHARED_OPT" ; then
    PAC_CHECK_COMPILER_OPTION(-KPIC,CC_SHARED_OPT=-KPIC)
    if test $ARCH = "solaris" ; then
	    SHAREDKIND=solaris
    fi
fi
# Fortran choices
# -PIC (SunOS)
# -KPIC (Solaris)
if test -z "$FC_SHARED_OPT" ; then
    PAC_CHECK_FC_COMPILER_OPTION(-PIC,FC_SHARED_OPT=-PIC)
fi
if test -z "$FC_SHARED_OPT" ; then
    PAC_CHECK_FC_COMPILER_OPTION(-fPIC,FC_SHARED_OPT=-fPIC)
fi
if test -z "$FC_SHARED_OPT" ; then
    PAC_CHECK_FC_COMPILER_OPTION(-fPIC,FC_SHARED_OPT=-KPIC)
fi
AC_SUBST(CC_SHARED_OPT)
AC_SUBST(FC_SHARED_OPT)
dnl
dnl This is needed on some older IRIX systems
AC_SEARCH_LIBS(getpwnam,sun)

dnl Checks for header files.
AC_PATH_X
dnl
dnl Convert results into values that we can use.  no_x is yes or empty
dnl (yes if x is turned off with --without-x, or could not find)
if test -z "$no_x" ; then
    PETSC_HAVE_X11="-DPETSC_HAVE_X11"
fi
AC_SUBST(PETSC_HAVE_X11)
if test -n "$x_includes" ; then
     CPP_X_INCLUDE="-I$x_includes"
     AC_SUBST(CPP_X_INCLUDE)
fi
if test -n "$x_libraries" ; then
     # x_libraries is the directory that contains them
     X_LIBRARIES="-L$x_libraries -lX11"
     AC_SUBST(X_LIBRARIES)
fi
dnl
dnl Look for header files.  Some of these need special tests because 
dnl some are not implemented correctly on all platforms.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h strings.h sys/time.h unistd.h)
AC_CHECK_HEADERS(stropts.h search.h pwd.h string.h sys/systeminfo.h)
AC_CHECK_HEADERS(sys/resource.h sys/procfs.h)
dnl io.h is really only an NT header; we include this as part of unifying
dnl the configuration
AC_CHECK_HEADERS(io.h)
dnl 
dnl STDC checks for stdlib but also for some others.  We should probably
dnl NOT use HAVE_STDLIB_H; instead, use #if STDC_HEADERS .... #else declare 
dnl  function #endif
AC_CHECK_HEADERS(stdlib.h)
dnl
dnl Check that the stat macros work correctly.  Define STAT_MACROS_BROKEN
dnl otherwise
AC_HEADER_STAT
dnl
dnl Checks for typedefs, structures, and compiler characteristics.
dnl If this discovers that const doesn't work, defines const as empty
dnl so that you can use const in the program without fear.
AC_C_BIGENDIAN
AC_C_CONST
dnl
dnl Eventually, these should look at an environment variable for the
dnl cross-compilation values, rather than assuming 4.
AC_CHECK_SIZEOF(void *,4)
AC_CHECK_SIZEOF(int,4)
dnl
dnl TYPE_UID_T and TYPE_SIZE_T get the types of these; if they aren't around,
dnl adds definitions that make these ints (again so you can use them without
dnl fear)
AC_TYPE_UID_T
AC_TYPE_SIZE_T
dnl
dnl See if both time.h and sys/time.h may be included (see autoconf 2 docs)
AC_HEADER_TIME
dnl
dnl Checks for library functions.
dnl This tests for needing -traditional on gcc when using ioctl.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
dnl
dnl Check for return type from free
dnl (who needs this?)
AC_CACHE_CHECK(whether free returns void, ac_cv_func_free_void,
[AC_TRY_COMPILE([#include <stdlib.h>],
[int free(void *);void *p; return free(p);],
  ac_cv_func_free_void=no, ac_cv_func_free_void=yes, ac_cv_func_free_void=yes)])
if test $ac_cv_func_free_void != yes; then
  AC_DEFINE(HAVE_FREE_RETURN_INT)
fi
dnl
AC_TYPE_SIGNAL
dnl
dnl Check for specific signal values: SIGSYS, SIGBUS, SIGQUIT
AC_CACHE_CHECK([whether SIGSYS is defined],ac_cv_have_sigsys,
[AC_TRY_COMPILE([#include <signal.h>],[int i=SIGSYS;],
ac_cv_have_sigsys=yes,ac_cv_have_sigsys=no)])
if test "$ac_cv_have_sigsys" = "no" ; then
    AC_DEFINE(MISSING_SIGSYS)
fi
AC_CACHE_CHECK([whether SIGBUS is defined],ac_cv_have_sigbus,
[AC_TRY_COMPILE([#include <signal.h>],[int i=SIGBUS;],
ac_cv_have_sigbus=yes,ac_cv_have_sigbus=no)])
if test "$ac_cv_have_sigbus" = "no" ; then
    AC_DEFINE(MISSING_SIGBUS)
fi
AC_CACHE_CHECK([whether SIGQUIT is defined],ac_cv_have_sigquit,
[AC_TRY_COMPILE([#include <signal.h>],[int i=SIGQUIT;],
ac_cv_have_sigquit=yes,ac_cv_have_sigquit=no)])
if test "$ac_cv_have_sigquit" = "no" ; then
    AC_DEFINE(MISSING_SIGQUIT)
fi

AC_FUNC_VPRINTF
dnl
dnl PETSc also wants the check that VPRINTF takes void * or char * pointers.
AC_CACHE_CHECK([whether vprintf requires a char * last argument],
ac_cv_func_vprintf_char_p,
[AC_TRY_COMPILE([#include <stdio.h>
#include <stdarg.h>],[
va_list Argp;
vprintf( "%d", Argp );],ac_cv_func_vprintf_char_p=no,ac_cv_func_vprintf_char_p=yes)])
if test "$ac_cv_func_vprintf_char_p" = "yes" ; then
    AC_DEFINE(HAVE_VPRINTF_CHAR)
fi
dnl
dnl This is an example of a general test for the named functions)
AC_CHECK_FUNCS(getcwd gethostname gettimeofday getwd socket strstr uname)
AC_CHECK_FUNCS(getpwuid memmove realpath readlink)
AC_CHECK_FUNCS(memalign)
AC_CHECK_FUNCS(rand drand48)
AC_CHECK_FUNCS(sigaction signal sigset)
dnl
dnl Solaris and Linux both have sysinfo, but with different numbers of args
dnl Linux:
dnl #include <linux/kernel.h>
dnl #include <linux/sys.h>
dnl int sysinfo( struct sysinfo *info )
dnl Solaris:
dnl #include <sys/systeminfo.h>
dnl long sysinfo(int command, char*buf, long count )
AC_CACHE_CHECK([for sysinfo],ac_cv_func_sysinfo,
[AC_TRY_LINK(,[
    sysinfo();],ac_cv_func_sysinfo=yes,ac_cv_func_sysinfo=no)])
if test "$ac_cv_func_sysinfo" = "yes" ; then
    AC_CHECK_HEADERS(linux/kernel.h linux/sys.h sys/systeminfo.h)
    AC_CACHE_CHECK([whether sysinfo takes three arguments],
ac_cv_func_sysinfo3,
[AC_TRY_COMPILE([
#ifdef HAVE_LINUX_KERNEL_H
#include <linux/kernel.h>
#include <linux/sys.h>
#elif defined(HAVE_SYS_SYSTEMINFO_H)
#include <sys/systeminfo.h>
#else
'Cannot check sysinfo without special headers'
#endif
],[
    char buf[10];
    long  count=10;
    sysinfo( 1, buf, count );],
ac_cv_func_sysinfo3=yes,ac_cv_func_sysinfo3=no)])
    if test "$ac_cv_func_sysinfo3" = "yes" ; then
        AC_DEFINE(HAVE_SYSINFO_3ARG)
    else
        AC_DEFINE(HAVE_SYSINFO)
    fi
fi
dnl
dnl Some PETSc checks look for MISSING_xxx instead of HAVE_xxx.  The 
dnl following handles that
if test "$ac_cv_func_getpwuid" != "yes" ; then
    AC_DEFINE(MISSING_GETPWUID)
fi
if test "$ac_cv_func_socket" != "yes" ; then
    AC_DEFINE(MISSING_SOCKETS)
fi
dnl
dnl Test Fortran issues
AC_LANG_FORTRAN77
AC_CACHE_CHECK([whether integer*4 etc handled in Fortran],ac_cv_prog_f77_stars,[AC_TRY_COMPILE(,[
        integer*4 i
        real*8 d
],ac_cv_prog_f77_stars=yes,ac_cv_prog_f77_stars=no)])
if test "$ac_cv_prog_f77_stars" != "yes" ; then
   AC_DEFINE(MISSING_FORTRANSTAR)
fi
AC_CACHE_CHECK([whether dreal is provided in Fortran],ac_cv_prog_f77_dreal,
[AC_TRY_LINK(,[
       double precision d
       d = dreal(3.0)
],ac_cv_prog_f77_dreal=yes,ac_cv_prog_f77_dreal=no)])
if test "$ac_cv_prog_f77_dreal" != "yes" ; then
    AC_DEFINE(MISSING_DREAL)
fi
dnl
dnl I believe that the blas are required.  Here's a test for that
AC_CACHE_CHECK([whether the BLAS are available],ac_cv_func_blas,
[save_LIBS="$LIBS"
LIBS="$LIBS $BLAS_LIB"
AC_TRY_LINK(,[
        call dgemm()
        call ddot()
],ac_cv_func_blas=yes,ac_cv_func_blas=no)
LIBS="$save_LIBS"
])
if test "$ac_cv_func_blas" != "yes" ; then
    Fatal_errors_seen=yes
    AC_MSG_WARN([configure could not find the BLAS library.  If no
    BLAS library is available, see the installation instructions about
    downloading one.  If one is available in an unusual place, use the
    --with-blas=path and --with-lapack=path options to configure to 
    specify the location.

    Since many PETSc routines require the BLAS, configure is stopping here.
    Rerun configure when the BLAS are available.])
fi
dnl
dnl
AC_LANG_CPLUSPLUS
AC_CACHE_CHECK([whether signal casts are needed for C++],ac_cv_prog_cxx_signal_cast,[
AC_TRY_COMPILE([#include <signal.h>
static void myhandler(int sig){ exit(1);}],[
signal(SIGFPE,myhandler);],
ac_cv_prog_cxx_signal_cast=no,ac_cv_prog_cxx_signal_cast=yes)])
if test "$ac_cv_prog_cxx_signal_cast" = "yes" ; then
    AC_DEFINE(SIGNAL_CAST)
fi
dnl
dnl Return to C
AC_LANG_C
dnl
dnl T3D didn't provide DGESVD
dnl AC_CHECK_FUNCS(dgesvd_)
dnl
dnl IBM MPI needs
dnl (need a test for this)
dnl AC_DEFINE(HAVE_BROKEN_REQUEST_FREE)
dnl
dnl Fortran BLAS should define
dnl AC_DEFINE(HAVE_SLOW_NRM2)
dnl
dnl
echo "Checking for special routines for floating-point exceptions" 1>&6
dnl
dnl 
  AC_CHECK_HEADERS(floatingpoint.h sunmath.h)
  AC_CHECK_FUNCS(ieee_flags ieee_handler)
  if test -n "$HAVE_FLOATINGPOINT_H" -a -n "$HAVE_IEEE_FLAGS" -a -n "$HAVE_IEEE_HANDLER -a -n "$HAVE_SUNMATH_H" ; then
    HAVE_SOLARIS_STYLE_FPTRAP="yes"

  elif test -n "$HAVE_FLOATINGPOINT_H" -a -n "$HAVE_IEEE_FLAGS" -a -n "$HAVE_IEEE_HANDLER; then
    # Despite the documentation, the IEEE functions are in libm,
    # at least in SunOS 4.1.4.  We need to do this to get 
    # the compiler to link against -lm .
    AC_SEARCH_LIBS(ieee_flags, m)
    dnl AC_CHECK_LIB(m,sin)
    HAVE_SUN4_STYLE_FPTRAP="yes"
  fi

  AC_CHECK_LIB(fpe,handle_sigfpes)
  AC_CHECK_HEADERS(sigfpe.h)
  if test -n "$HAVE_SIGFPE_H" ; then
    HAVE_IRIX_STYLE_FPTRAP="yes"
  fi

  AC_CHECK_HEADERS(fpxcp.h fptrap.h)
  AC_CHECK_FUNCS(fp_sh_trap_info fp_trap fp_enable fp_disable)
  if test -n "$HAVE_FPXCP_H" -a -n "$HAVE_FPTRAP_H" -a -n "$HAVE_FP_SH_FPXCP_H" -a -n "$HAVE_FP_TRAP" ; then
    HAVE_RS6000_STYLE_FPTRAP="yes"
  fi

if test "$Fatal_errors_seen" != "no" ; then
    AC_MSG_ERROR([Configure is aborting because of errors])
fi

dnl
dnl The "extra commands" are not executed in the environment of the
dnl configure script, and hence can't include any variables.
dnl
dnl Note that the input and output filenames are not handled correctly
dnl by configure in the case where configure lives in a subdirectory.
dnl To work around this, we use the output:input file name options
dnl
AC_OUTPUT(bmake/config/base.site:../bmake/config/base.site.in bmake/config/base:../bmake/config/base.in bmake/config/base_variables:../bmake/config/base_variables.in)
dnl
dnl
dnl  Make stdout come back to the screen
dnl
if test "$print_tests" != "yes" ; then
    exec 1>&9
fi

echo "********** Configuring PETSc for your system *************"
if test -z "$BMAKEDIR" ; then
  BMAKEDIR=default
  if test -n "$PETSC_ARCH_SET" -a  "$PETSC_ARCH" != "$BMAKEDIR" ; then
    echo "Use setenv PETSC_ARCH $BMAKEDIR before using make"
  fi
else 
  if test -z "$PETSC_ARCH_SET" -o  "$PETSC_ARCH" != "$BMAKEDIR" ; then
    echo "Use setenv PETSC_ARCH $BMAKEDIR before using make"
  fi
fi
if test -n "$PETSC_DIR_NOT_SET" ; then
  echo "Use setenv PETSC_DIR $PETSC_DIR before using make"
fi
echo "Do make BOPT=g (or BOPT=O, BOPT=g_c++, or BOPT=O_c++) to build the libraries"
echo "***************************************************************"

dnl Move the files into the bmake area in their own directory

rm  -rf                                                                                  bmake/$BMAKEDIR
if test ! -d bmake/$BMAKEDIR ; then mkdir bmake/$BMAKEDIR ; fi
mv  -f bmake/config/base.site                                                            bmake/$BMAKEDIR/base.site
mv  -f bmake/config/base_variables                                                       bmake/$BMAKEDIR/base_variables
mv  -f bmake/config/base                                                                 bmake/$BMAKEDIR/base
cat bmake/config/petscconf.h | sed s/'^#define '/'#define PETSC_'/g | grep '^#define' >  bmake/$BMAKEDIR/petscconf.h
touch                                                                                    bmake/$BMAKEDIR/petscfix.h    


