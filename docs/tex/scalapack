| 
|   Maybe it would be useful to have a disclaimer right
| at the beginning of all PETSc documentation regarding 
| the 800 pound gorilla. This is because this is a common
| question naive people ask (and most people are naive).
| Something like:
| 
|   PETSc is not replacement or competitor to Scalapack
| or Lapack. Rather it is a complementary package that
| provides the infrastructure and software for the large scale 
| (possibly parallel) numerical solution of partial
| differential equations. Scalapack and Lapack are not
| intended for this class of problems.
| 
|   Comments?
| 
|   Barry
| 
|   I don't like the use of the work "complementary"
| but I can't think of a better one. I'd like a word
| that clearly puts PETSc on the higher side.
| 

I like the idea, but I believe that it is important to note that to PETSc,
Scalapack and Lapack are like sin or sqrt - routines that can be used in
special cases, and that PETSc, in addition to providing a higher-level of
functionality and abstraction, provides transparent access to such
special-purpose libraries.
[A
>
> How about something like the following:
>
>
> PETSc is not a replacement or competitor of ScaLAPACK, LAPACK, or
> MINPACK (don't know if you want to mention MINPACK also?).  Rather
> PETSc is a complementary package that provides the infrastructure and
> software for large-scale (possibly parallel) numerical solution of
> partial differential equations.  Our uniquely wide perspective
> markedly contrasts with traditional software packages, which typically
> address only one facet of solving large-scale PDEs.  In addition to
I don't like this part here because lapack scalapack and minpack 
don't relly address any part of lsrge scale (or even small scale)
PDEs. 
> providing a higher level of functionality and abstraction, PETSc can
> provide transparent access to such special-purpose libraries for
> particular. PETSc currently employs parts of LAPACK, SPARSPAK, and
> BlockSolve.
>

In fact, on the rare occasions that dense matrix operations are
required PETSc calles Lapack (Scalapack perhaps in the future)
routines without requiring the user to deal with the arcane 
and old fashion Lapack calling sequences.

-------------------------------------------------------------------

Lois' draft #2:

PETSc is not a replacement or competitor of ScaLAPACK, LAPACK, or
MINPACK.  Rather, PETSc is a complementary package that provides the
infrastructure and software for large-scale (possibly parallel)
numerical solution of partial differential equations.  Our uniquely
wide perspective markedly contrasts with traditional software
packages, which typically address only one facet of solving PDEs.  In
addition to providing a higher level of functionality and abstraction,
PETSc can provide transparent access to such special-purpose libraries
for particular cases. 

PETSc currently employs parts of LAPACK, SPARSPAK, and BlockSolve, and
extensions to include ScaLAPACK and BLACS (and/or others?) are
intended.  For example, the PETSc interface for solving linear
equations uses {\em the same} calling sequence for uniprocessor and
parallel sparse and dense systems.  PETSc automatically employs the
appropriate LAPACK routines on the few occasions requiring
uniprocessor dense matrix operations; likewise, application
programmers can specify the use of BlockSolve for preconditioning
sparse, symmetric, parallel systems.  PETSc shields the user from
dealing with the involved calling sequences and data structures of
LAPACK and BlockSolve, while also providing enhanced functionality for
data structure manipulation.


  My original intention was to deal with the question "Why are
you doing PETSc when Scalapack does everything, and clearly 
Scalapack must be better?" So I'm not sure that mentioning other 
packages by name fits my idea. Also the statement, I think, is getting 
much too long.

 I noticed you softened my use of "arcane" and "old-fashion Fortran". Pity

  Lois,

  I still disaggree about the goals of Lapack/Linpack and Minpack.
I think the solution of PDEs played very little role in
their motivation, design and implementation.

 Maybe Jorge can fill us in on the case of Minpack. Jorge in 1981
was Minpack at all motivated (except maybe in the very abstract 
way) for the solution of PDEs.

  Barry


  You may well ask why PETSc when Scalapack is also being 
developed? The reason is Scalapack focuses on a small, relatively
unimportant subset of the software needed for the parallel 
numerical solution of PDEs. In addition, Scalapack, since it 
is coded in Fortran 77 is cumbersome, difficult to use 
and extremely inflexible. The full functionality of PETSc
may be accessed from Fortran 77, C or C++ and comes with 
the flexibility of correctly using object oriented techniques. 
In other words, Scalapack sucks!
