From gropp@mcs.anl.gov Thu Jul 14 09:44:35 1994
Received: from julia.math.ucla.edu (root@julia.math.ucla.edu [128.97.4.254]) by antares10.mcs.anl.gov (8.6.4/8.6.4) with SMTP id JAA04345 for <bsmith@mcs.anl.gov>; Thu, 14 Jul 1994 09:44:32 -0500
Received: from poplar.math.ucla.edu by julia.math.ucla.edu 
	(Sendmail 4.1/1.11) id AA13579; Thu, 14 Jul 94 07:44:28 PDT
Received: from julia.math.ucla.edu by poplar.math.ucla.edu 
	(Sendmail 5.0/1.11) id AA24663; Thu, 14 Jul 1994 07:44:27 +0800
Received: from antares10.mcs.anl.gov (antares9.mcs.anl.gov) by julia.math.ucla.edu 
	(Sendmail 4.1/1.11) id AA13576; Thu, 14 Jul 94 07:44:25 PDT
Received: from godzilla (godzilla.mcs.anl.gov [140.221.5.136]) by antares10.mcs.anl.gov (8.6.4/8.6.4) with ESMTP id JAA04340; Thu, 14 Jul 1994 09:44:24 -0500
From: William Gropp <gropp@mcs.anl.gov>
Date: Thu, 14 Jul 1994 09:44:20 -0500
Message-Id: <199407141444.JAA10814@godzilla>
To: bsmith@math.ucla.edu, curfman@mcs.anl.gov
Subject: petsc design
Content-Length: 1005
Status: RO

I thought I'd get the ball rolling with a first cut at the design.

Principles:
Consistent interface to all packages:
    Cookie
    Destroy
	Self
	Children
    Copy?
    Inquiry
    Parameter manipulation
        Default
        Set/get value
    Performance data
	Operation counts
	Memory usage
	Other ?
    Print
	Contents of structure
	What I am
	Graphics (?)
    Error handling

Consistent error checking
    Parameter values and ranges
    Structures valid
    Assignable error handlers

User-friendly includes
    All user includes in a single petsc/include directory
    Prototypes included
    Private includes in package directories
    (This makes it easier to distribute and install binaries for multiple
    users)

Consistent layering
    Instead of routines to set parameters in lower-level packages (like ksp 
    from sles), all packages provide ways to access the contexts of the
    packages.  This is an alternate path to the general parameter database 
    mechanism.

Comments?
Bill

From curfman@mcs.anl.gov Thu Jul 14 14:41:25 1994
Received: from mcs.anl.gov (thales.mcs.anl.gov [140.221.2.8]) by antares10.mcs.anl.gov (8.6.4/8.6.4) with ESMTP id OAA12809; Thu, 14 Jul 1994 14:41:23 -0500
Message-Id: <199407141941.OAA12809@antares10.mcs.anl.gov>
To: William Gropp <gropp@mcs.anl.gov>, bsmith
cc: curfman
Subject: Re: petsc design 
In-reply-to: Your message of "Thu, 14 Jul 1994 09:44:20 CDT."
             <199407141444.JAA10814@godzilla> 
Date: Thu, 14 Jul 1994 14:41:19 -0500
From: Lois Curfman McInnes <curfman@mcs.anl.gov>
Status: RO


>Principles:
>Consistent interface to all packages:
>    Cookie
>    Destroy
>	Self
>	Children
>    Copy?
>    Inquiry
>    Parameter manipulation
>        Default
>        Set/get value
>    Performance data
>	Operation counts
>	Memory usage
>	Other ?  
>    Print
>	Contents of structure
>	What I am
>	Graphics (?)
>    Error handling
>
>Consistent error checking
>    Parameter values and ranges
>    Structures valid
>    Assignable error handlers
>
>User-friendly includes
>    All user includes in a single petsc/include directory
>    Prototypes included
>    Private includes in package directories
>    (This makes it easier to distribute and install binaries for multiple
>    users)
>
>Consistent layering
>    Instead of routines to set parameters in lower-level packages (like ksp 
>    from sles), all packages provide ways to access the contexts of the
>    packages.  This is an alternate path to the general parameter database 
>    mechanism.
>

Here are a few of my ideas:

Perhaps include timing data in the "performance data" part of the
interface.

Consistent style:
  - Naming and spelling conventions for routines, contexts, etc.
  - What's needed to create a context within each package?
  - Should in/out variables be allowed?
  - How should uniprocessor and multiprocessor versions of packages be handled?
      - naming conventions, design, contexts

Consistent documentation:
  - Special considerations for Fortran users:
      - Document routines that are invalid for Fortran users.  
        For example, interpret "MC" for macros in man pages.
      - Document routines that behave differently for Fortran users
        (such as SpPrint - writes to standard output only).
   - For routines that set functions, specify function calling sequence. 
     (for example, SVSetMonitor)

Miscellaneous needs:
  - System routine to get machine parameters (such as machine epsilon)
  - Fortran interface upgrade to handle setting routine names (such as
    ITSetMonitor).  Currently only special cases are handled properly
    (such as SVSetMonitor).

