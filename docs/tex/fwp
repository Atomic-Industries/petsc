
3.  Mathematical Libraries

Related publications

\subitem [18] L. Curfman McInnes, W. Gropp, B. Smith {\em  Scalable 
              Libraries for Solving Systems of Nonlinear Equations 
              and Unconstrained Minimization Problems}, to appear in the 
              Proceedings of the Second Scalable Parallel Libraries 
              Conference, 
              October 11-14, 1994, Mississippi State University, IEEE Press.

\subitem [3] W. Gropp, B. Smith {\em Users Manual for KSP: 
             Data-Structure-Neutral Codes Implementing Krylov Space Methods},
             Argonne National Laboratory Report ANL-93/30.

\subitem [4] B. Smith {\em Extensible PDE Solvers Package Users Manual},
             Argonne National Laboratory Report ANL-94/40.

\subitem [16] P. Ciarlet Jr. and F. Lamour, B. Smith {\em On the Influence of
              the Partitioning Schemes on the Efficiency of Overlapping 
              Domain Decomposition Methods}, Proceedings of the Fifth
              Symposium on the Frontiers of
              Massively Parallel Computation held in 
              McLean, VA, February 6-9, 1995, IEEE Press, pp. 375--383.

\subitem [14] T. Chan, B. Smith and J. Zou, {\em Multigrid and Domain
              Decomposition Methods for Unstructured Meshes}, Proceedings of 
              the Third International 
              Conference on Numerical Methods and Applications, 
              World Scientific Publishing,  1994, pp. 53--62.

\subitem [15]  W. Gropp, B. Smith {\em Parallel Domain Decomposition Software},
              in Domain-Based Parallelism and Problem Decomposition
              Methods in Computational Science and Engineering, editors 
              D. Keyes, Y. Saad and D. Truhlar, SIAM, Philadelphia, PA,
              1994. 

  Related Talks 

  IMACS Meeting, Atlanta, July 1994 "Data Structure Neutral PDE Solvers"

  SIAM Annual Meeting, San Diego, July 1994 two talks on PETSc

  U. of I. Urbana, Oct. 1994 seminar "The Extensible PDE Solvers Package
      Component of PETSc"

  1994 POOMA Conference, Sante Fe, Dec. 1994 "PETSc"

  1994 POOMA Conference, Sante Fe, Dec. 1994 "Applications of PETSc"

  Chinese University of Hong Kong, Dec. 1994, "The Basic Components of PETSc"

  Hong Kong University of Science and Technology, Dec. 1994, 
      "High Level Petsc"

  Frontiers 95, Mclean, VA, Feb 1995, "The Influence of
              the Partitioning Schemes on the Efficiency of Overlapping 
              Domain Decomposition Methods"

FY 1994 
 
PETSc (Portable, Extensible, Tools for Scientific computing) 
is a large toolkit of software for portable, parallel 
(and serial) scientific computation. 
The software ranges from low-level data structures for vectors and
matrices through high-level techniques for solving partial differential 
equations.
PETSc provides a clean and effective implementation of algorithms, 
with a uniform approach for solving each class of problems (such 
as linear systems).  
The library also enables easy customization and extension of both 
algorithms and implementations.  

This approach promotes code reuse and flexibility, and separates the
issues of parallelism from the choice of algorithms. 
Hence, the library adapts to the user, rather than the 
other way around, so that the package serves a wide range of application
programmers with varying needs and different levels of experience.
Perhaps the most effective demonstration of the PETSc library's utility 
is its use in a wide variety of large-scale applications, including the 
modeling of electromagnetics, compressible flow, reacting flow, 
high-temperature superconductivity, and automotive disk brakes.
Some of the unique features of PETSc that are critical to these
applications are:

  * data-structure-neutral linear and nonlinear solution techniques,
  * uniform interface to direct and iterative linear solvers,
  * vector and sparse matrix data structures,
  * portable and efficient parallel operations for data exchange and
    special operations, such as matrix-vector products, 
  * tools for X-Windows visualization, and
  * portable system interfaces (e.g., to enable floating point exceptions).

The PETSc package uses modern software technology to provide a 
portable, flexible, and extensible library 
environment. We use an aggressive data-structure-neutral implementation that 
minimizes dependence on particular data structures (even vectors).
This approach permits separation of the implementation 
language from the user-interface language.  
Hence, the PETSc software may be used with either C or Fortran, 
and extensions for C++ are currently under development.
This approach also enables algorithms to serve as executable 
templates, since the source code is written with high-level
abstractions so that it can be easily understood and modified.

Data and state encapsulation in the form of context variables
is the key to the library organization.
Each module of PETSc has its own context, which is a data type 
defined by a C structure that contains information about the local 
state, option values, interface routines, data structures and their 
associated operations, and work space.  
This object hides the details of an implementation or algorithm and
permits the programmer to deal with the mathematical problem rather 
than the details of a specific implementation.
When used in conjunction with other sophisticated C programming 
strategies, contexts provide simple and consistent interfaces
and are far more powerful and maintainable than the use of 
reverse communication.

To provide a clean and effective software environment, PETSc 
is designed as a multi-level library.

That is, rather than providing one routine for each task, and then
building other, higher level routines over those, PETSc supplies
a hierarchy of routines, many of which are implemented by lower-level
routines from the library.
This organization enables the user to employ the appropriate
level of abstraction for a particular problem.
Some of the PETSc modules are listed below:

  * KSP - A data-structure-neutral implementation of
     many popular Krylov space iterative methods suitable for 
     serial or parallel machines \cite{ksp-user-ref}.
  * SLES - A higher-level interface to a variety
    of preconditioners and Krylov space methods (both uni- and 
    multi-processor versions) \cite{sles-user-ref}.  
  * SNES - A data-structure-neutral 
    implementation of trust region and line search Newton's 
    methods for the solution of nonlinear systems (both uni- and 
    multi-processor versions) \cite{snes-user-ref}.
  * Extensible PDE Solvers - A package for the solution of 
    elliptic PDEs using either finite elements or finite differences in 
   two or three dimensions on either structured or unstructured grids 

During 1994 we completed the sequential codes portion of PETSc including 
object oriented elliptic PDE solvers. In addition, the unconstrained
minimization software was completed.

FY 1995 

We are completing the port of PETSc to use MPI as the exclusive 
message passing system. At the same time we are taking the opportunity 
to improve the organization of PETSc through the use of abstract 
classes. Previous versions of PETSc had a much more limited hierarchy
of classes. PETSc will be fully parallelized so that all objects, 
including grids, nonlinear equations, etc. can be 
easily manipulated in parallel by application codes.
 
Support for general, parallel block structured grid problems, with 
good load balancing, will be developed. This is to support the use of
PETSc components in the oil reservoir model being developed as part 
of ACTI. 


FY 1996

By this time, PETSc will be completely thread safe. 

As the number of processors in a massively parallel processing system grows,
it becomes increasingly important to develop algorithms that scale by dividing
problems up among smaller clusters of processors rather than a single
processor.  We will extend our numerical, data-structure neutral tools (in a
backward compatible way) to include algorithms that use clusters of clusters
of processors.  This work will be conducted as part of our joint work with IBM
on the ANL/IBM CRADA. During this year we will develop software 
paradigms for this support.

We will also continue to develop efficient parallel support for the numerical 
solution of coupled systems of nonlinear PDEs. 

FY 1997

In 1997 we plan to develop production versions of the basic PETSc components 
(grids, matrices, vectors, nonlinear equations, etc.) for distributed 
memory machines based on symmetric multiprocessor nodes. The PETSc interface
would remain the same, which means all the PETSc applications will run 
out of the box with high efficiency on the next generation of high 
performance parallel 
machines. 

Relations to other projects: 

  PETSc will form the basis for all the nonlinear and linear equation 
solvers needed for the Oil reservoir models being developed in the 
ACTI project jointly with UT Austin and Rice University.

  PETSc will provide a simple interface for grid based problems that 
require the calculation of Jacobians using the automatic differentiation
in ADIFOR. 

  The output form PETSc codes will be able to drive the virtual 
environments including the CAVE. 

  The Coral project uses the PETSc communication component as well as 
the parallel linear system solvers. 

  The superconductivity thing of Gary Leaf and David Levine uses 
PETSc (in the words of David) we couldn't have done it without PETSc.
