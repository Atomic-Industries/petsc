****************************************************************************
*                                                                          *
* Summary of user interface additions and changes among PETSc 2.0 versions *
*                                                                          *
****************************************************************************

Public releases of PETSc:

 - PETSc 2.0.Beta.4  - first public release,   June 21, 1995
 - PETSc 2.0.Beta.6  - second public release,  July 30, 1995
 - PETSc 2.0.Beta.8  - third public release,   October 13, 1995
 - PETSc 2.0.Beta.10 - fourth public release,  December 15, 1995
 - PETSc 2.0.13      - fifth public release,   April 18, 1996
 - PETSc 2.0.15      - sixth public release,   October 4, 1996
 - PETSc 2.0.16      - PRIVATE release,        December 10, 1996
                       for "Bring Your Own Code" Workshop participants
 - PETSc 2.0.17      - seventh public release, April 5, 1997
 - PETSc 2.0.18      - Private release
 - PETSc 2.0.19      - Private release
 - PETSc 2.0.20      - Private release

Note: We announce new PETSc releases to the petsc-users mailing list,
which one can join by sending e-mail to majordomo@mcs.anl.gov with the
message, "subscribe petsc-users".

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

The PETSc 2.0 software is still under development, so that we will
continually add new features and enhanced functionality in upcoming
releases.  Also, small changes in usage and calling sequences of PETSc
routines will continue to occur.  Although keeping one's code
accordingly up-to-date can be somewhat annoying, all PETSc users will
be rewarded in the long run with a cleaner, better designed, and
easier-to-use interface.

We suggest that users who want to upgrade their current PETSc
application codes from a particular version to the most recent release
proceed through the changes listed in this file in increasing order of
version numbers.  (Note: One can determine the release number of any
current PETSc installation by running any PETSc program with the option
"-version" or by looking in the file petsc/include/petsc.h)

Many of the interface changes can be handled quickly and easily by
using global replacement via your favorite text editor.  See the file
petsc/Code-Management for some tips that we find helpful in keeping our
own code up to date and that should be generally useful for effective
code management.

**************************************************************************

You must use an MPI implementation that conforms to MPI 1.1 standard.
For the MPICH version this means at least version 1.0.12.
If you installed MPICH before February 1996, you have a previous
version and you must install the latest release. Versions of the 
SGI MPI implementation before May 1996 are also out-of-date and 
need replacement.

**************************************************************************

NEW FEATURES and CHANGES in PETSc 2.0.18, 2.0.19, and 2.0.20.

 --------
 GENERAL:
 --------
  - Complex numbers performance upgrade:
    Added support for using optimized Fortran kernels for some key complex
    numbers numerical routines (such as matrix-vector products, vector 
    norms, etc.) instead of the default C++ routines.  This implementation 
    exploits the maturity of Fortran compilers while retaining the identical 
    user interface.  For example, on rs6000 machines, the base single-node
    performance when using the Fortran kernels is 4-5 times faster than
    the default C++ code.  See installation instructions in the 
    'Installation' file.

 ---------------------------
 AO (application orderings):
 ---------------------------

  - Changed AOCreateDebug() to AOCreateBasic(); changed AOCreateDebugIS() to 
    AOCreateBasicIS().

  - Now the AOxxxToxxxXX() remapping routines will not map negative entries
    in the input arrays. This allows one to map, say neighbor lists, that 
    use negative entries to indicate non-existent neighbors due to boundaries
    etc.

 --------------------------
 TS (Time Stepping Module):
 --------------------------

 -------------------------
 SNES (Nonlinear Solvers):
 -------------------------

  - Added support for using matrix colorings within finite difference Jacobian
    approximations.  See the section "Finite Difference Jacobian Approximations"
    of the users manual for more details.  Also see the man pages for
        SNESDefaultComputeJacobianWithColoring()

  - Fixed a bug in method SNES_EQ_NLS.

  - Increased the default maximum number of function evaluations to 100000.

 --------------------------------------
 SLES (Linear Solvers): See PC and KSP
 --------------------------------------

 ------------------------------
 KSP (Krylov subspace methods):
 ------------------------------

 ---------------------
 PC (Preconditioners):
 ---------------------

  - Added -pc_lu_fill and -pc_ilu_fill to replace -mat_lu_fill and -mat_ilu_fill
    and added the commands PCLUSetFill() and PCILUSetFill()

 ---------------
 MAT (Matrices):
 ---------------

  - Added support for matrix colorings, which are intended primarily for use
    in finite difference Jacobian approximations.  See the SNES section above
    for more info.  New routines include:
       MatFDColoringCreate()
       MatFDColoringSetParameters()
       MatFDColoringSetFrequency()
       MatFDColoringSetFunction()
       MatFDColoringSetFromOptions()
       MatFDColoringView()
       MatFDColoringPrintHelp()
       MatFDColoringApply()
       MatFDColoringDestroy()

  - Added matrix option, MatSetOption(mat,MAT_NEW_NONZERO_ALLOCATION_ERROR),
    that will cause an error if a new entry that has not been preallocated
    is generated in a sparse matrix.  (currently implemented for AIJ and BAIJ
    matrices only).  This is a useful flag when debugging memory preallocation.

  - Replaced the options -mat_lu_fill and -mat_ilu_fill with -pc_lu_fill and -pc_ilu_fill

  - Added MatSetValuesBlockedLocal() for BAIJ matrices

  - Changed the final argument of  MatGetTypeFromOptions() from type int* to PetscTruth*.

  - Added MatCreateSeqAdj() for supplying adjacancy matrices to PETSc to do 
    reordering on (for example RCM to reduce bandwidth and thus get better cache 
    performance) and eventually partioners.

  - MatSetLocalToGlobalMapping() and MatSetLocalToGlobalMappingBlocked() now take a 
    ISLocalToGlobalMapping object rather  then a list of indices.

 ------------------------
 DA (Distributed Arrays):
 ------------------------

  - If you are using the DAGetGlobalIndices() routine and the DA_STENCIL_STAR
    type stencil, the local-to-global mapping indices now include the inactive 
    corner ghost nodes.   This is useful, e.g., when using MatSetValuesLocal()
    to set matrix elements, including corner boundary nodes.

 --------------
 VEC (Vectors):
 --------------

 - VecSetLocalToGlobalMapping() now takes a ISLocalToGlobalMapping object rather
   than a list of indices.

 - Added VecCreateMPIWithArray().

 - Changed calling sequence for VecCreateGhost() and added VecCreateGhostWithArray(),
   VecGhostUpdateBegin/End(), VecGhostGet/RestoreLocalRepresentations().

 ----------------
 IS (Index Sets):
 ----------------

 - Added ISGlobalToLocalMappingApply() to allow one to convert lists that are in
   the global numbering to a local numbering.

 - Added a communicator as the first argument to ISLocalToGlobalMappingCreate()

 ----------------
 Draw (Graphics):
 ----------------

 - Added routines for drawing simple histograms. See DrawHistCreate().

 - Removed the option -draw_x_private_colormap and made a private
   colormap the default. Added the option -draw_x_shared_colormap 
   to indicate that you do not want to use a private colormap. If you use
   Netscape on your machine and are also doing contour plots, you generally
   don't want to use a shared colormap.

 - Improved colors used in the contour plotting.
 
 - Changed DrawText() -> DrawString(),  DrawTextVertical() ->  DrawStringVertical()
   DrawTextSetSize() ->  DrawStringSetSize() and DrawTextGetSize() -> DrawStringGetSize()

 --------
 VIEWERS:
 --------

 - Added VIEWER_STDOUT_() and VIEWER_STDERR_()

 -------
 SYSTEM:
 -------

  - Added the option -get_resident_set_size that causes the program to call 
    PetscGetResidentSetSize() at the end of the run and print how much 
    physical memory each process used.

  - Changed OptionsGetProgramName() to PetscGetProgramName() and changed the
    calling sequence to match PetscGetHostname(), etc.

  - Changed BINARY_INT and BINARY_SCALAR to PETSC_INT and PETSC_SCALAR.

 ---------------
 ERROR HANDLING:
 ---------------

 --------------
 EVENT LOGGING:
 --------------

 ------------------
 FORTRAN INTERFACE:
 ------------------

  - Added routines to map between C and Fortran representations of communicators
      extern int  MPICCommToFortranComm(MPI_Comm,int *);
      extern int  MPIFortranCommToCComm(int,MPI_Comm*);
    this provide the same functionality as
      extern int  PetscCObjectToFortranObject(void *,int *);
      extern int  PetscFortranObjectToCObject(int,void *);
    do for PETSc objects.

  - Removed the macros Double, DBLE, PetscDoubleExp as they are no longer required, PETSc
    now compiles on the Cray T3D/T3E with the -dp option that correctly handles
    Fortran code that uses double precision (Cray calls double precision single
    precision)

  - Added support for MatGetRow() MatRestoreRow() from Fortran, see manpage for
    Fortran calling sequence.

  - Added PetscBinaryOpen(), PetscBinaryClose(), PetscBinaryRead() and PetscBinaryWrite()
    for binary IO from Fortran; see src/vec/examples/tests/ex20.F. This is not
    needed for most users.


**************************************************************************

NEW FEATURES and CHANGES in PETSc 2.0.17

 --------
 GENERAL:
 --------
  - Added support for Windows NT/95 using the Microsoft Developers Studio
    Visual C++.  See the file 'Installation' for details.

  - Other new machines on which this release has been tested:
       Cray T3E, SGI Origin
    See the file petsc/Installation for a complete list.

 --------------------------
 TS (Time Stepping Module):
 --------------------------
  - Modified the pseudo-transient continuation updates:
     - Changed the default update to
           dt = current_dt*previous_fnorm/current_fnorm.
     - Added the routine TSPseudoIncrementDtFromInitialDt() and the 
       corresponding option -ts_pseudo_increment_dt_from_initial_dt
       to indicate use of the alternative update formula
           dt = initial_dt*initial_fnorm/current_fnorm.

  - Changed the calling sequence of TSRegister().

 -------------------------
 SNES (Nonlinear Solvers):
 -------------------------
  - Added support for computing large, sparse Jacobians efficiently via 
    finite differences, see Section 5.6 (Finite Difference Jacobian
    Approximations) of the users manual.

  - Added the routines SNESGetNumberLinearIterations() and
    SNESSetConvergenceHistory().  See man pages for details.

  - Activated a counter of function evaluations, which is used in 
    convergence tests to terminate solver if the number of function
    evaluations exceeds a given tolerance.  Note: Users of matrix-free
    Newton-Krylov methods may need to reset the default allowable
    maximum (1000), via SNESSetTolerances() or -snes_max_func <maxf>.

  - Changed the calling sequence of SNESRegister().

 --------------------------------------
 SLES (Linear Solvers): See PC and KSP
 --------------------------------------

 ------------------------------
 KSP (Krylov subspace methods):
 ------------------------------
  - Changed the calling sequence of KSPRegister().

 ---------------------
 PC (Preconditioners):
 ---------------------
  - Changed the calling sequence of PCRegister().

  - New Additive Schwarz variants (preconditioner type PCASM):
    - Added the routine PCASMSetType() (and the corresponding option
      -pc_asm_type [basic,restrict,interpolate,none]) for setting the
      variant of the additive Schwarz method.  See the man page and
      users manual for details.

    - Changed the default variant of PCASM from full restriction and
      interpolation to full restriction only, since this version requires
      less communication and for many problems converges faster than
      the basic variant that uses full restriction and interpolation.  
      Users can still employ the basic ASM by calling 
            PCASMSetType(pc,PC_ASM_BASIC)
      or by using the option -pc_asm_type basic.

    - Added an interface to the SPAI preconditioner implementation of 
      Steven Bernard; see src/contrib/spai. This has undergone little
      testing and optimization; it is intended mainly for "hackers".

 ---------------
 MAT (Matrices):
 ---------------
  - Added matrix option, MatSetOption(mat,MAT_NEW_NONZERO_LOCATION_ERROR),
    that will cause an error if a new nonzero is generated in a sparse
    matrix.  (currently implemented for AIJ and BAIJ matrices only).  
    This is a useful flag when using SAME_NONZERO_PATTERN in calling
    SLESSetOperators() to ensure that the nonzero pattern truely does 
    remain unchanged.  For examples, see the programs
          petsc/src/snes/examples/tutorials/[ex5.c,ex5f.F]

  - Added the routine MatSetUnfactored(), intended primarily for use 
    with in-place ILU(0) factorization as a preconditioner for
    matrix-free Krylov methods.  See man page for details.

  - Added MatConvertRegisterAll() and MatLoadRegisterAll() to allow the
    restriction of the matrix routines linked into an application code.
    This can decrease the size of your executable and the time it takes to 
    link your program. For details, see the man page and
          petsc/src/snes/examples/tutorials/ex5.c

  - Added the routine MatSetValuesBlocked(), for more efficient assembly
    of block AIJ formatted matrices (MATSEQBAIJ and MATMPIBAIJ). 

  - Changed the calling sequence of MatReorderingRegister();

 ------------------------
 DA (Distributed Arrays):
 ------------------------
  - Added additional arguments to DACreate1d(), DACreate2d(), and 
    DACreate3d() to allow the user to set the distribution of nodes on
    each processor; set these arguments to PETSC_NULL for the standard
    default distribution.

  - Modified DAGetInfo() to return the type of periodicity. 
 
 --------------
 VEC (Vectors):
 --------------
  - Added the routine VecCreateGhost() to create vectors that have ghost
    padding at the end of the local array. This is useful for gathering 
    remote values to perform local calculations that involve off-processor
    ghost values.  This is often appropriate for codes using unstructured
    grids.  See petsc/src/vec/examples/tutorials/ex9.c for possible usage.

 ----------------
 IS (Index Sets):
 ----------------

 ----------------
 Draw (Graphics):
 ----------------
   - Application codes should not need to use
          #include "draw.h" 
     any more from C/C++, since this file is now included automatically
     when "petsc.h" or any other PETSc include file is included.

 --------
 VIEWERS:
 --------
   - VIEWER_DRAWX_WORLD, VIEWER_DRAWX_SELF, VIEWER_MATLAB_WORLD are now
     supported from Fortran. 

   - Added VIEWER_DRAWX_(MPI_Comm comm) from C. Useful for rapid code
     prototyping without having to declare a Viewer.

 -------
 SYSTEM:
 -------
   - Since memory leaks and uninitialized memory can be serious problems
     for large-scale application codes, we've added several new tools to
     assist in their diagnosis.  These tools are all work in conjunction
     with the PETSc memory allocation (the default for codes that are
     compiled in debug mode with BOPT=[g,g_c++,g_complex]).

      - Added the runtime option -trmalloc_log, which activates logging
        of all calls to malloc via the new routines PetscTrLog() and
        PetscTrLogDump().

      - Added the routine PetscGetResidentSetSize() to determine the total 
        memory used by a process (this is activated by -trmalloc_log); see
        the man page for details.

      - Added the option -trmalloc_nan for tracking down allocated
        memory that is used before it has been initialized.  This option
        calls the new routines PetscInitializeNans() and 
        PetscInitializeLargeInts().  So far these work on the Sun4 system.

 ---------------
 ERROR HANDLING:
 ---------------
  - The error checking macros SETERRQ() and SETERRA() now have the calling
    sequence
        SETERRQ(int ierr,int pierr,char *message);
    where pierr is an additional integer error code passed to the error
    handler.  Currently you should just set pierr=1.

  - Also, SETERRQ() and SETERRA() now use the macro __FUNC__ to keep
    track of routine names.  Users need not worry about this in their
    application codes, but can take advantage of this feature if desired
    by setting this macro before each user-defined routine that may
    call SETERRQ(), SETERRA(), CHKERRQ(), or CHKERRA().  __FUNC__ should
    be set to a string containing the routine name.  For example,
         #undef __FUNC__  
         #define __FUNC__ "MyRoutine1"
         int MyRoutine1() { 
             /* code here */
             return 0;
         }
    See petsc/src/snes/examples/tutorials/ex3.c for an example.

  - PETSc error handlers now take two additional arguments. Consult the 
    man page for PetscPushErrorHandler() for more information.


 --------------
 EVENT LOGGING:
 --------------
  - Changed PLogPrintSummary(MPI_Comm,FILE *) to 
    PLogPrintSummary(MPI_Comm,char *).

  - Now the option -log_summary takes [filename] as an optional argument.

 ------------------
 FORTRAN INTERFACE:
 ------------------
  - Added some limited support for direct use of Fortran90 pointers in
    the routines
       Vec[Get,Restore]ArrayF90(),  Mat[Get,Restore]ArrayF90(),
       IS[Get,Restore]IndicesF90(), ISBlock[Get,Restore]IndicesF90(),
       VecDuplicateVecsF90(),       VecDestroyVecsF90(),
       DAGetGlobalIndicesF90().
    See the man pages and the section 'Fortran90' in the users manal for 
    details.  Unfortunately, these routines currently work only with the
    NAG F90 compiler.  We hope to support other compilers as well, but we 
    will need assistance from the vendors since the Fortran90/C interface
    is not a defined standard. 

  - Added the macro PetscDoubleExp(a,b) 
      = a d b (machines where double precision arithmetic is used)
      = a e b (machines where single precision arithmetic is used, e.g., Crays)
    This macro is intended for use only if you wish to maintain a Fortran
    code that is portable to both the Cray T3d/T3e and other Unix machines.

  - For mixed Fortran/C users: added the makefile flag FCONF that may be
    used in place of the flag CONF.  For an example of usage, see
            src/vec/examples/tutorials/makefile


**************************************************************************

NEW FEATURES and CHANGES in PETSc 2.0.16

 --------
 GENERAL:
 --------
  - Added the option -compare <tolerance> option for incremental debugging;
    see the users manual for more details.

  - Added tags file so that vi users can easily browse PETSc source files
    (just as emacs users already can by using etags).  See the users manual
    subsection "VI users" for details.

  - We have stopped distributing the UNIX-style manpages with PETSc.  
    Instead, we now only distribute the HTML version.  You can still access
    the man pages with the command $PETSC_DIR/bin/petscman.  Alternatively,
    you can directly view $PETSC_DIR/docs/www/www.html.

 --------------------------
 TS (Time Stepping Module):
 --------------------------

 -------------------------
 SNES (Nonlinear Solvers):
 -------------------------
  - You can now attach several SNES monitoring routines with
    SNESSetMonitor() instead of only one as previously allowed.  Similarly,
    multiple monitors can be used from the options database (e.g.,
    -snes_monitor and -snes_xmonitor).

 --------------------------------------
 SLES (Linear Solvers): See PC and KSP
 --------------------------------------

 -----------------------------
 KSP (Krylov subspace methods):
 -----------------------------
  - You can now attach several KSP monitoring routines with 
    KSPSetMonitor() instead of only one as previously allowed.  Similarly,
    multiple monitors can be used from the options database (e.g.,
    -ksp_monitor and -ksp_xmonitor).

 ---------------------
 PC (Preconditioners):
 ---------------------

 ---------------
 MAT (Matrices):
 ---------------
  - Added the routines MatSetValuesLocal(), MatZeroRowsLocal() and
    MatSetLocalToGlobalMapping() to enable the user to set values in
    a matrix using a local numbering of the nodes rather than a
    global numbering.

  - Added the option MAT_IGNORE_OFF_PROC_ENTRIES for MatSetOptions(),
    which causes all entries on any processor destined to be stored on
    a different processor to be dropped instead. This is useful if you
    know that the "owning" processor is also always generating the correct
    entries, so PETSc need not ship over the duplicate entry generated on
    another processor.

  - Added options MAT_COLUMNS_UNSORTED and MAT_ROWS_UNSORTED for
    MatSetOptions() to enable switching betwen sorted and unsorted input.

 ------------------------
 DA (Distributed Arrays):
 ------------------------

 --------------
 VEC (Vectors):
 --------------
  - Changed the SCATTER_ALL argument in VecScatterXXX() routines to
    SCATTER_FORWARD.

  - Added the routines VecSetValuesLocal() and VecSetLocalToGlobalMapping() 
    to allow the user to set values into a vector using a local numbering
    of the nodes rather than a global numbering.
  
  - Added the routine VecSetOption(Vec,VEC_IGNORE_OFF_PROCESSOR_ENTRIES),
    which causes all entries on any processor destined to be stored on a
    different processor to be dropped instead. This is useful if you know
    that the "owning" processor is also always generating the correct 
    entries, so PETSc need not transfer the duplicate entries generated
    on another processor.

 ----------------
 IS (Index Sets):
 ----------------

 ----------------
 Draw (Graphics):
 ----------------
  - The numbers on the axis plots are much improved.

  - You can now pass PETSC_DECIDE as the x and y arguments in
    DrawOpenX() and ViewerDrawOpenX() to let PETSc place non-overlapping
    windows on the display.

 --------
 VIEWERS:
 --------

 -------
 SYSTEM:
 -------
  - Added routines PetscSynchronizedPrintf(MPI_Comm,format,args) and 
    PetscSynchronizedFlush(MPI_Comm), which allow groups of processes to 
    print to stdout as one would expect.  I.e., the output from processor 0
    is followed by the output from processor 1, etc.  Very useful during code
    development.  This can often be a substitute for attempting to
    sequentialize printf() statements via PetscSequentialPhaseBegin() and
    PetscSequentialPhaseEnd().

  - Added the command line option -options_file <filename> that causes all 
    options in the file named <filename> to be treated as if typed on the 
    command line.

  - Added the option -log_trace [filename] (and the corresponding routine
    PLogTraceBegin()) that allows tracing of all PETSc calls; useful to see
    where a program is hanging without running in the debugger.  Can be used
    in conjunction with the -log_info option.

  - Added PetscRandomSetInterval() to enable the user to set an interval
    over which random numbers will be uniformly distributed.

 --------------
 EVENT LOGGING:
 --------------

 ------------------
 FORTRAN INTERFACE:
 ------------------
  - Added the Fortran interface for VecDuplicateVecs(), VecDestroyVecs(),
    VecMAXPY(), VecMDot(), and VecMTDot().


**************************************************************************

NEW FEATURES and CHANGES in PETSc 2.0.15

Highlights of new features in version 2.0.15, added since the last
public release of PETSc (2.0.Beta.13).  See details in the sections below.

 - Added support for shared version of PETSc libraries for several
   machines to enable faster linking and smaller executables
 - Added new parallel block row matrix format, improved efficiency for
   block diagonal formats
 - Added a suite of routines to help manage the mappings between an
   application-defined ordering of variables and the ordering used by
   PETSc for matrices and vectors
 - Expanded users manual information for performance tuning and profiling
 - The option -log_summary now summarize of message-passing activity
   as well as flop rates.
 - Running the test suite now requires much less disk space.
 - Example programs are in the process of being reorganized into tutorials
   and tests (see, e.g., petsc/src/sles/examples/tutorials for
   tutorial-style examples for the linear solvers).  
 - The HTML version of the PETSc man pages now provides indices 
   (organized by both concepts and routine names) to tutorial examples.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 --------
 GENERAL:
 --------
  - Added support for shared libraries for the machines
         PETSC_ARCH = [sun4,solaris,alpha,IRIX,IRIX64,linux]
    to enable faster linking and smaller executables. To compile the
    shared libraries, install PETSc as usual and then execute the command
         make BOPT=g shared
    from the PETSc home directory (or use whatever BOPT you like). You
    can remove the shared libraries with the command
         make BOPT=g deleteshared
    Note: Shared libraries can also be used with PETSC_ARCH=freebsd and
    PETSC_ARCH=hpux if some minor modifications are made.  For detailed
    instructions, see the files $(PETSC_DIR)/bmake/$(PETSC_ARCH)/base.
    Please write to us at petsc-maint@mcs.anl.gov if you encounter
    any problems when using the shared libraries.

  - Users must now ALWAYS set the environmental variable PETSC_DIR
    to indicate the PETSc home directory.  Previously, PETSC_DIR was
    set within the various makefiles within the PETSc installation.
    However, since this causes problems for shared libraries on some
    machines, the environmental variable PETSC_DIR is now used instead.

  - Added global variables for use in debuggers:
      PetscGlobalRank - processor's rank in MPI_COMM_WORLD
      PetscGlobalSize - number of processors in MPI_COMM_WORLD

  - For complex numbers versions (e.g., BOPT=g_complex):
    Added a global variable defining the imaginary number "i": PETSC_i

 --------------------------
 TS (Time Stepping Module):
 --------------------------
  - Changed TS_PSEUDO_POSITION_INDEPENDENT_TIMESTEP ->  TS_PSEUDO_POSIND

  - Changed TSPseudoSetPositionIndependentTimeStep() -> TSPseudoSetPosIndTimeStep().
        Even Barry couldn't stand names that long :-)

 -------------------------
 SNES (Nonlinear Solvers):
 -------------------------
  - The user can now set parameters used in matrix-free approximations of
    Jacobian-vector products, with the options
      -snes_mf_err <err>   : square root of relative error in computing function
      -snes_mf_umin <umin> : minimum iterate parameter
    or by calling the routine SNESSetMatrixFreeParameters().

  - Added the option -snes_mf_operator, which allows the user to apply
    the default matrix-free Jacobian but retain the user-provided Jacobian
    preconditioner matrix. 

  - Added the routine SNESGetTolerances() to extract the various
    parameters used for convergence testing.

  - Initialized iteration counter to 0 for successive calls to SNES solvers.

  - Changed the names for SNES runtime options associated with particular
    solvers to the forms
       -snes_eq_ls_<parameter_name> - nonlinear equations, line search method
       -snes_eq_tr_<parameter_name> - nonlinear equations, trust region method
       -snes_um_ls_<parameter_name> - unconstrained minimization, line search method
       -snes_um_tr_<parameter_name> - unconstrained minimization, trust region method
    Run program with -help for a detailed list of options.

 --------------------------------------
 SLES (Linear Solvers): See PC and KSP
 --------------------------------------
 - Changed the default linear solvers from GMRES(30) with Jacobi preconditioning to
     uniprocessor:   GMRES(30) with ILU(0) preconditioning
     multiprocessor: GMRES(30) with block Jacobi preconditioning, where there
                     is 1 block per processor, and each block is solved with ILU(0)
   See the users manual for additional options for the block Jacobi method.
   You can still employ the old default at runtime with the option
     -pc_type jacobi

 -----------------------------
 KSP (Krylov subspace methods):
 -----------------------------
  - Added routines KSPComputeEigenvalues(), KSPComputeEigenvaluesExplicitly()
    and runtime options -ksp_compute_eigenvalues, -ksp_plot_eigenvalues,
    -ksp_compute_eigenvalues_explictly and -ksp_plot_eigenvalues_explicitly 
    for users interested in examining the eigenvalues of the preconditioned
    operator to better understand the convergence of a chosen iterative method.

  - Changed KSPSetCalculateExtremeSingularValues() 
                         -> KSPSetComputeExtremeSingularValues()

  - Changed KSPSetCalculateResidual() -> KSPSetComputeResidual()

 ---------------------
 PC (Preconditioners):
 ---------------------
  - Added the routine PCSetModifySubMatrices(), which allows the user to
    set an optional routine for modifying the entries of the submatrices
    that arise in certain subdomain-based preconditioners (ASM, block
    Jacobi, block Gauss-Seidel).

 ---------------
 MAT (Matrices):
 ---------------
  - Eliminated routine MatGetSubmatrix(); now use MatGetSubMatrices() even
    when extracting just 1 submatrix.

  - Added routine MatDestroyMatrices().

  - Fixed bug in MatGetSubMatrices() for successive calls for matrices having
    different nonzero structure.

  - Added routine MatGetBlockSize().

  - Changed routine MatGetInfo() so that it returns more information.
    See man page for details.

  - Changed usage of MatGetReordering() and MatRegisterOrdering(); see man pages.

  - Changed the prefix used for matrix operation names within
    MatShellSetOperation() and MatHasOperation():  
         MAT_<OPERATION> -> MATOP_<OPERATION>
    For example, MAT_MULT -> MATOP_MULT.

 ------------------------
 DA (Distributed Arrays):
 ------------------------

 --------------
 VEC (Vectors):
 --------------

 ----------------
 IS (Index Sets):
 ----------------
  - Changed ISCreateSeq() to ISCreateGeneral()

  - Changed ISCreateStrideSeq() to ISCreateStride()

  - Added routine ISCreateBlock() to create a blocked index set.  See
    the man page for details and related routines.

 ----------------
 Draw (Graphics):
 ----------------
  - Added -draw_x_private_colormap option that causes PETSc to allocate
    a separate colormap for PETSc graphics windows. This prevents bad
    contour plots due to Netscape altering the default color map.

  - You can now zoom in and out of contour plots using the option 
    -draw_pause -1 and left and center mouse buttons.

  - The option -draw_contour_grid will display the underlying grid on a
    contour plot.

 --------
 VIEWERS:
 --------
  - Added routine ViewerGetFormat().

  - Added options -viewer_matlab_machine and -viewer_matlab_port

  - Changed ASCII_FORMAT_xxx to VIEWER_FORMAT_ASCII_xxx
    and ASCII_FORMAT_INFO_DETAILED to VIEWER_FORMAT_ASCII_INFO_LONG

  - Changed BINARY_FORMAT_xxx to VIEWER_FORMAT_BINARY_xxx

  - PETSc now provides basic support for VRML viewers.  Currently,
    one can draw surface contours of vector fields with the routine
    DFVecDrawTensorSurfaceContour().  Note that the VRML utilities
    will be expanded and the interface will change in the near future.

 -------
 SYSTEM:
 -------

 --------------
 EVENT LOGGING:
 --------------

 ------------------
 FORTRAN INTERFACE:
 ------------------
  - Changed PETSC_NULL_CHAR to PETSC_NULL_CHARACTER

  - Replaced PETSC_DEFAULT with PETSC_DEFAULT_INTEGER and
    PETSC_DEFAULT_DOUBLE_PRECISION.  I.e., Fortran users must
    specify the parameter type for which they are using a default.
    See, e.g., manpage for KSPSetTolerances() for details.


**************************************************************************

NEW FEATURES and CHANGES in PETSc 2.0.14

 --------
 GENERAL:
 --------
 - Changed option -malloc_debug to -trdebug

 - Changed option -notrmalloc to -trmalloc_off

 - Running the test suite now requires much less disk space.
   See petsc/bmake/common for a description of the various
   classes of example problems.

 - Changed PetscSetDisplay() to PetscGetDisplay(); see man page for details.

 - Added the option -debugger_nodes node1,node2,... to allow only
   certain processes to start in the debugger instead of all of them.

 - Added the option -debugger_pause <sleeptime> to allow additional
   time if the debugger has trouble attaching to the program in time.

 - Added a suite of routines of the form AOxxx to help manage mappings
   between an application-defined ordering of variables and the ordering
   used by PETSc for vectors and matrices.  For instance, if your partitioning
   scatters vector components all across the processors while PETSc maps the
   first block to the first processor, second block to the second processor
   etc., these routines help map back and forth between the two orderings.
   See the man pages for AOCreateDebug(), AOPetscToApplication(), and
   AOApplicationToPetsc() as well as the users manual.

 - Added routines PetscObjectGetNewTag(), PetscObjectRestoreNewTag().

 - Added new routine PetscMPIDump(), which dumps listing of incomplete MPI
   operations. The corresponding runtime option is -mpidump; see the
   manpage for details.

 --------------------------
 TS (Time Stepping Module):
 --------------------------
 
 -------------------------
 SNES (Nonlinear Solvers):
 -------------------------

 --------------------------------------
 SLES (Linear Solvers): See PC and KSP
 --------------------------------------

 -----------------------------
 KSP (Krylov subspace methods):
 -----------------------------
 - Changed CGType -> KSPCGType, CG_SYMMETRIC ->KSP_CG_SYMMETRIC,
   CG_HERMITIAN -> KSP_CG_HERMITIAN

 ---------------------
 PC (Preconditioners):
 ---------------------
  - PCBJACOBI, PCGS, and PCASM preconditioners: Changed default solver for
    each block from LU to ILU (no KSP method, just the incomplete factor and
    triangular solves), as this is more efficient for many problems.  To
    use the old default of LU, specify the option "-sub_pc_type lu".  See
    The users manual for more info on setting the block solver options.

  - Added option -pc_ilu_reuse_reordering and PCSetReuseReordering(), which
    allow the same matrix reordering to be used for several similar matrices.

  - The PETSc interface to BlockSolve95 preconditioners can now be used if
    you program in C++ using BOPT=[g_c++,O_c++].  Note, however, that
    BlockSolve95 still cannot be used with complex numbers.

 ---------------
 MAT (Matrices):
 ---------------
 - Added the parallel block row format, MATMPIBAIJ.  See the manpage for
   MatCreateMPIBAIJ().

 - The option -mat_block_size for when using MatLoad() has been changed to 
    -matload_block_size

 - The option -mat_bdiag_ndiag and -mat_bdiag_vals have been replaced with
   just one option, -mat_bdiag_diags

 - Added a new option for use with MatLoad(), -matload_bdiag_diags

 - MatMult() and MatSolve() for the MATSEQBDIAG and MATMPIBDIAG formats
   have been optimized for blocksizes of 2,3,4, and 5, resulting in much
   better performance.

 - Changed MatOrdering() to MatReordering().

 - Changed the names for MatOption (used in MatSetOption).  All names now
   begin with the prefix "MAT_" ... For example,
      COLUMNS_SORTED -> MAT_COLUMNS_SORTED
      ROW_ORIENTED   -> MAT_ROW_ORIENTED
   Also, changed the following:
      SYMMETRIC_MATRIX -> MAT_SYMMETRIC
      STRUCTURALLY_SYMMETRIC_MATRIX -> MAT_STRUCTURALLY_SYMMETRIC
   See the manpage for a complete list.

 - Changed the names for MatAssemblyType (used in MatAssemblyBegin
   and MatAssemblyEnd):
     FLUSH_ASSEMBLY -> MAT_FLUSH_ASSEMBLY
     FINAL_ASSEMBLY -> MAT_FINAL_ASSEMBLY

 ------------------------
 DA (Distributed Arrays):
 ------------------------
  - Added the routine DAGetProcessorSubset() to extract a subset of
    processors that own certain parts of a distributed array.

 --------------
 VEC (Vectors):
 --------------

 ----------------
 IS (Index Sets):
 ----------------

 ----------------
 Draw (Graphics):
 ----------------

 --------
 VIEWERS:
 --------
 - Name changes for default viewers:
   STDOUT_VIEWER_SELF  -> VIEWER_STDOUT_SELF
   STDERR_VIEWER_SELF  -> VIEWER_STDERR_SELF
   STDOUT_VIEWER_WORLD -> VIEWER_STDOUT_WORLD

 - Added new default viewers to allow quick graphical visualization:
     VIEWER_DRAWX_SELF (1 processor)
     VIEWER_DRAWX_WORLD (all processors)

 - Added ViewerPushFormat() and ViewerPopFormat(); see the manpages.

 -------
 SYSTEM:
 -------

 --------------
 EVENT LOGGING:
 --------------
 - Option -info changed to -log_info [no_mat,no_sles]

 - New routines PLogEventActivate(), PLogEventDeActivate(),
   PLogInfoActivateClass(), PLogInfoDeActivateClass(),
   PLogEventActivateClass(), and PLogEventDeActivateClass()
   allow one selectively to turn off and on what events or informative 
   messages are logged or not logged.

 - The option -log_summary now provides information about 
   message-passing activity in addition to floating point
   performance.

 ------------------
 FORTRAN INTERFACE:
 ------------------
  - Changed Fortran interface to DAGetGlobalIndices() so that it is
    consistent with the Fortran interface to related routines.  See
    The Fortran chapter of the users manual for details.

  - For those using .F version: added macro Double so you can write
    Fortran code that compiles portably on Cray T3D and other machines.
    See, e.g., src/vec/examples/ex19.F


**************************************************************************

NEW FEATURES and CHANGES in PETSc 2.0.13

Highlights of new features in version 2.0.13, added since the last
public release of PETSc (2.0.Beta.10).  See details in the sections below.

  - New scalable time-stepping module (2.0.13)
  - Support for complex numbers in most of the KSP solvers (2.0.13)
  - New overlapping additive Schwarz preconditioner (parallel and
      sequential versions) (2.0.Beta.12)
  - Improved logging capabilities, including (1) gathering of data for
      viewing with Upshot/Nupshot when using MPICH and (2) optional use of
      multiple stages for monitoring (2.0.Beta.12)
  - Enhancements to Fortran interface, including support of files with
      suffixes .F and .f (2.0.Beta.12)
  - New high-level interface to BlockSolve95, a software package of
      high-performance parallel preconditioners (ICC and ILU) for
      symmetric and structurally symmetric systems. (2.0.Beta.11)
  - Miscellaneous improvements and enhancements throughout the software
  - Improved HTML version of man pages with full hypertext links

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 ---------
  GENERAL:
 ---------
  - Changed the format of PetscInitialize(), see manpage for details:
      C/C++: PetscInitialize(int *argc,char ***args,char *file,char *help);
      Fortran: PetscInitialize(character filename,integer ierr)

  - You must change "include" statements in all your makefiles from
       include $(PETSC_DIR)/bmake/$(PETSC_ARCH)/$(PETSC_ARCH)
    to
       include $(PETSC_DIR)/bmake/$(PETSC_ARCH)/base

  - Introduced PetscBarrier(PetscObject), which waits until all
    processors associated with the object reach this point.

  - Introduced PetscRandomCreate(), PetscRandomGetValue(), and 
    PetscRandomDestroy() for generating random numbers.

  - Changed MPIU_Seq_begin() -> PetscSequentialPhaseBegin()
  - Changed MPIU_Seq_end() -> PetscSequentialPhaseEnd()
  - Changed MPIU_printf() -> PetscPrintf()
  - Changed MPIU_fprintf() -> PetscFPrintf()

--------------------------
 TS (Time Stepping Module):
 --------------------------
  - We are introducing a new scalable time-stepping (TS) module,
    which currently supports forward and backward Euler methods. 
    We hope to add additional methods.  These are designed to be used
    for solving time dependent (non)linear PDEs using the 
    "method of lines".

 -------------------------
 SNES (Nonlinear Solvers):
 -------------------------
  - In order to employ a more uniform naming convention throughout
    SNES, we've made a name few changes.  The prefix SNES_EQ
    indicates routines for solving systems of nonlinear equations,
    while SNES_UM denotes routines for unconstrained minimization
    problems.
       - Changed the method SNES_EQ_NLS -> SNES_EQ_LS,
         SNES_UM_NLS -> SNES_UM_LS, etc.  See petsc/include/snes.h
         for details.
       - Changed SNESDefaultConverged() -> SNESConverged_EQ_LS(),
            SNESConverged_UMTR() -> SNESConverged_UM_TR(),
            SNESConverged_UMLS() -> SNESConverged_UM_LS(),
            SNESTrustRegionDefaultConverged() -> SNESConverged_EQ_TR().

  - Added SNESSetTolerances(); eliminated SNESSetAbsoluteTolerance(),
    SNESSetRelativeTolerance(), SNESSetSolutionTolerance(),
    SNESSetMaxIterations(), and SNESSetMaxFunctionEvaluations().

 --------------------------------------
 SLES (Linear Solvers): See PC and KSP
 --------------------------------------

 ---------------------
 PC (Preconditioners):
 ---------------------

 ---------------------------
 KSP (Krylov Space Package):
 ---------------------------
 - Changed KSPSetBinv() -> KSPSetPC().
 - Changed KSPGetBinv() -> KSPGetPC().
 - Changed KSPUnwindPre() ->KSPUnwindPreconditioner().
 - Changed KSPGMRESSetOrthogRoutine() -> KSPGMRESSetOrthogonalization().

 - Changed KSPCGGetEigenvalues() to KSPComputeExtremeSingularValues() and
   changed KSPCGDefaultMonitor() to KSPSingularvalueMonitor(), which can
   also be activated with the option -ksp_singmonitor. These routines work
   for CG and GMRES.

 ---------------
 MAT (Matrices):
 ---------------
  - MatReorderingRegister() has been changed. It takes an new third 
    argument, PETSC_TRUE or PETSC_FALSE indicating that the reordering 
    routine needs a symmetric nonzero structure. It also takes a new 
    fourth argument indicating if the i and j indices begin at 0 or 1.
    The first argument is now returned to the user, rather than supplied
    by the user, thus allowing several reordering libraries to work 
    together without fear that two different people will choose the 
    same integer to represent different orders. See the man page or
    users manual for details.

  - It is now possible to save dense matrices to files as dense matrices
    by calling ViewerSetFormat(viewer,BINARY_FORMAT_NATIVE,name) before 
    calling MatView(). Note that if you do this, the matrix must be 
    read back in as dense.
    
  - Changed input parameters of MatCreateShell(); see manpage for details.
  - Changed MatGetFormatFromOptions() -> MatGetTypeFromOptions().
  - Changed MatGetCol()  -> MatGetColumn().
  - Changed MatRestoreCol() -> MatRestoreColumn().
  - Changed MatValidMatrix(Mat,int *) -> MatValid(Mat,PetscTruth*).
  - Changed MatEqual(Mat,int *) -> MatEqual(Mat,PetscTruth*).

  - MatShellSetMult() has been replaced with
    MatShellSetOperation(mat,MAT_MULT,(void *)multiply_routine); furthermore, the 
    first argument to multiply_routine is now Mat, not the user context.
    To get the user context call MatShellGetContext(mat, void **ctx);
    Similar changes occur for MatShellSetXXXX(), so that now it is
    possible for users to provide any matrix operation for their shell 
    matrices.

 ------------------------
 DA (Distributed Arrays):
 ------------------------

 --------------
 VEC (Vectors):
 --------------
 - Introduced VecAXPBY(), which computes y = alpha x + beta y. 
 - Introduced VecSetRandom(), which sets the vector elements to random values;
   use in conjunction with PetscRandomCreate().
 - Changed VecPMult() -> VecPointwiseMult().
 - Changed VecPDiv() -> VecPointwiseDivide().

 ----------------
 IS (Index Sets):
 ----------------

 - Changed ISIsPermutation(IS) to ISPermutation(IS,PetscTruth*).
 - Changed ISIsIdentity(IS) to ISIdentity(IS,PetscTruth*).
 - Changed ISEqual(IS,int*) to ISEqual(IS,PetscTruth*).
 - Changed ISSorted(IS,int*) to ISSorted(IS,PetscTruth*).
 - Changed IndexSetType to ISType.

 ----------------
 Draw (Graphics):
 ----------------

 --------
 VIEWERS:
 --------
  - The routines MatView(), VecView(), DAView() etc., can no longer be
    called with a Draw object as the viewer.  Instead, such routines
    must be called with a Viewer created by a call to ViewerDrawOpenX().

  - Added ViewerBinaryGetDescriptor(), useful for binary I/O in conjunction
    with ViewerFileOpenBinary().

  - Changed ViewerFileGetPointer() to ViewerASCIIGetPointer().
  - Changed ViewerFileSetFormat() to ViewerSetFormat().

  - Introduced ViewerGetFormat() for extracting the viewer format.

  - Changed FILE_FORMAT_XXX to ASCII_FORMAT_XXXX.

 -------
 SYSTEM:
 -------
  - Changed SYRead() -> PetscBinaryRead().
  - Changed SYWrite() -> PetscBinaryWrite().
  - Changed SYType -> PetscBinaryType().
  - Changed SYINT -> BINARY_INT, SYSCALAR -> BINARY_SCALAR, etc.
  - Changed other SYXXX routines -> PetscXXX routines.
  - Changed TrXXX routines -> PetscTrXXX.

  - Removed include file "include/sysio.h"; use "include/sys.h" instead.


 --------------
 EVENT LOGGING:
 --------------
  - PLogEventRegister() takes an additional final argument, a string
    indicating the color to associate with the event. For example, "Red:".


 ----------------------------------------------------------------------
  CONTRIB (Contributed modules that are not officially part of PETSc):
 ----------------------------------------------------------------------

    The directory $(PETSC_DIR)/src/contrib contains software modules that
    use PETSc but are not part of the official PETSc package.  We encourage
    users who have developed such code that they want to share with others
    to let us know by writing to petsc-maint@mcs.anl.gov.

    - version 2.0.Beta.12 users only : Vector/Grid Utilities (VGI) within
      contrib have been reorganized as part of PETSc-proper.  See the
      README file and examples in petsc/src/dfvec.  This PETSc component is
      just beginning development, so changes in ther interface will be
      happening in the near future.


**************************************************************************

NEW FEATURES and CHANGES in PETSc 2.0.Beta.12


 -------------------------
 SNES (Nonlinear Solvers):
 -------------------------
  - The default tolerances for solving systems of nonlinear equations have
    been changed.  Now relative tolerance, rtol, is 1.e-8 and absolute
    tolerance, atol is 1.e-50

  - SNESSolve() now has the form SNESSolve(SNES snes,Vec x,int *its),
    where the vector x indicates the initial guess for the nonlinear solver.
    The user should initialize the vector, x, prior to calling SNESSolve.
    In particular, to employ an initial guess of zero, the user should
    explicitly set this vector to zero by calling VecSet().

    We've also eliminated SNESSetSolution().
    Note: We introduced these changes to promote uniformity among the linear
    and nonlinear solvers, and to make time-steping more natural, since in
    this case the initial guess generally comes from the previous time-step.

  - The user no longer needs to call SNESSetUp(), as this will automatically
    be called from within SNESSolve() if necessary.  However, note that if
    calling SNESSetUp(), the routine now takes an additional argument, Vec x,
    which is a vector of the same type to be used in the SNESSolve(). SNES
    needs to know the layout of the vector in order to complete the setup. 

  - Users must explicitly activate monitoring within SNES if desired by
    using SNESSetMonitor() or the option -snes_monitor.  Monitoring is no
    longer set by default for the unconstrained minimization solvers.

  - When providing the Jacobian (or Hessian) matrix in the routine set
    by SNESSetJacobian (or SNESSetHessian), one should not pass a 0 to
    indicate reuse of the preconditioner.  Instead, pass back the flag 
    SAME_PRECONDITIONER and do not touch the preconditioner argument.

 --------------------------------------
 SLES (Linear Solvers): See PC and KSP
 --------------------------------------
  - SLESSetOperators() and PCSetOperators():  The flag indicating the
    matrix structure for successive linear solves has been changed.  This
    flag now refers to the preconditioner matrix only, and the options are:
    SAME_PRECONDITIONER, SAME_NONZERO_PATTERN, DIFFERENT_NONZERO_PATTERN.
    See the man pages for details. 

 ---------------------
 PC (Preconditioners):
 ---------------------
  - Added PCShellSetName() and PCShellGetName() for associating a name
    with shell preconditioners.

  - Added new block Gauss-Seidel preconditioner (PCBGS) for sequential AIJ
    matrices.  Use the option -pc_type bgs.

  - Added new overlapping additive Schwarz preconditioner (PCASM), for both
    sequential and parallel AIJ matrix formats.  Use the option -pc_type asm.
    Related routines:
     - PCASMSetSubdomains(), option -pc_asm_blocks <blocks> default: 1 per proc
     - PCASMSetOverlap(), option -pc_asm_overlap <overlap>  default: 1
    Currently we do not provide any partitioning code, so you must do your
    own partitioning or use the natural, by blocks along the diagonal. See
    $(PETSC_DIR)/src/sles/examples/ex14.c.

 ---------------------------
 KSP (Krylov Space Package):
 ---------------------------
  - Changed the GMRES default restart to 30 from 10.

 ---------------
 MAT (Matrices):
 ---------------
  - Changed the option -mat_bdiag_bsize to -mat_block_size.
  - Changed MatEqual(Mat,Mat) to MatEqual(Mat,Mat,int*).
  - Changed MatValid(Mat) to MatValid(Mat,int*).
    
 ------------------------
 DA (Distributed Arrays):
 ------------------------
  - Added routine DAGetInfo() for extracting info about the DA.
  - Added routine DARefine() for refining the size of a DA.

 --------------
 VEC (Vectors):
 --------------
  - Added VecGetType() to extract the type and name of a vector.
  - Changed VecValid(Vec) to VecValid(Vec,int*)

 ----------------
 IS (Index Sets):
 ----------------
  - Added ISEqual() to check if two IS have the same set of indices.
  - Added ISSort() to sort the indices.
  - Added ISSorted() to check if the index set has been sorted.

 ---------------
  EVENT LOGGING:
 ---------------
  - PLogEventRegister() now returns the event id (integer) rather than 
    taking one as the first argument.  See the manpage for details.

  - PETSc now supports the event logging option -log_mpe [logfilename],
    which creates a logfile of events appropriate for viewing with Upshot
    or Nupshot (part of MPICH).  To use this logging option, the user must
    employ the MPICH implementation of MPI and must:
      - Install the MPE package (part of MPICH).
      - Edit $(PETSC_DIR)/bmake/$(PETSC_ARCH)/$(PETSC_ARCH).site
        to add the flag -DHAVE_MPE to the PCONF variable, e.g.,
            PCONF = -DHAVE_MPE
      - (Re)compile the PETSc libraries.
      - Run executables with the option -log_mpe [logfilename].
      - If logfilename is not specified, it creates a file mpe.log
      - Use upshot/nupshot (part of MPICH distribution) to visualise
        the logfile. - "nupshot mpe.log"

 ------------------
 FORTRAN INTERFACE:
 ------------------
  - Fortran null arguments for charactor strings must be PETSC_NULL_CHAR
    instead of PETSC_NULL. This is because certain machines (such as the
    Cray T3D) handle character strings so differently from other variables
    that we cannot represent null the same way for both character strings
    and other varables.  Thus, for example, one would use
       call OptionsGetInt(PETSC_NULL_CHAR,'-n',n,flg,ierr)

  - PETSc now supports Fortran files ending in the suffix .f (as well as
    the suffix .F). The main difference for .f files compared to .F files
    is that one cannot declare PETSc objects with their type (such as Mat A);
    rather, PETSc objects must be declared as integers.  Thus,
       Mat  A,B      (.F style)
    becomes 
      integer A,B    (.f style)
    In addition, when using .f files, one must use the conventional Fortran
    include statments rather than the analogous #include for .F files, where
    these include files are located in the directory
        $(PETSC_DIR)/include/finclude
    Also, the entire path of the include file must be hardwired.  See
    $(PETSC_DIR)/src/snes/examples/[ex12.F and ex10.f] for examples.

  - When using the .F suffix in Fortran, one should include files with
        #include "include/FINCLUDE/xxx.h" 
    rather than 
        #include "include/finclude/xxx.h"



**************************************************************************

NEW FEATURES and CHANGES in PETSc 2.0.Beta.11


 -----------------------------------------------
 SNES (Simplified Nonlinear Equations Solvers):
 -----------------------------------------------
  - Changed SNESGetMethodFromContext() and SNESGetMethodName() to SNESGetType().  
  - Changed SNESSetMethod() to SNESSetType() and -snes_method to -snes_type.
  - The argument POSITIVE_FUNCTION_VALUE or NEGATIVE_FUNCTION_VALUE has been
    removed from SNESSetFunction(). Some people found this confusing and it
    actually offers little performance advantage. 
  - SNESSetSolution() no longer takes a function and context to set the 
    initial guess.  Instead, the user should just set the initial guess in
    the vector provided.  We introduced this change to make time-steping more 
    natural, since in this case the initial guess generally comes from the
    previous time-step.

 -----------------------------------------------------------
 SLES (Simplified Linear Equations Solvers): See PC and KSP
 -----------------------------------------------------------
  - PETSc now provides a high-level interface to BlockSolve95, a software
    package of high-performance parallel preconditioners (ICC and ILU) for
    symmetric and structurally symmetric systems.  BlockSolve95 is available
    by anonymous ftp at info.mcs.anl.gov in the directory pub/BlockSolve95,
    and further information is available at the WWW address: 
          http://www.mcs.anl.gov/blocksolve95/index.html.  
    (Note: Users who employ BlockSolve through the PETSc interface need not
    concern themselves with many details provided within the BlockSolve95
    users manual.  PETSc automatically handles matrix assembly, preconditioner
    setup, etc. as described in the PETSc users manual.  See petsc/Installation
    for information about installing PETSc with BlockSolve95.
   
 ---------------------
 PC (Preconditioners):
 ---------------------
  - Changed PCGetMethodFromContext() and PCGetMethodName() to PCGetType().
  - Changed PCSetMethod() to PCSetType() and -pc_method to -pc_type.


 ---------------------------
 KSP (Krylov Space Package):
 ---------------------------
  - Changed KSPGetMethodFromContext() and KSPGetMethodName() to KSPSetType().
  - Changed KSPSetMethod() to KSPSetType() and -ksp_method to -ksp_type.
  - Changed KSPSetRightPreconditioner() to KSPSetPreconditionerSide().
  - Changed format of KSPGetPreconditionerSide(); see man page for details.

 ---------------
 MAT (Matrices):
 ---------------
 - Added the routine MatCopy(Mat,Mat).
 - Changed MatGetType() and MatGetName() -> MatGetType(Mat,MatType *,char **);
 - Changed MatScale() to MatDiagonalScale()
 - Added the routine MatScale() for scaling by a number.
 - Changed MatShellCreate() to MatCreateShell() to be consistent with all 
   other MatCreates.
    
 --------------
 VEC (Vectors):
 --------------
  - Changed VecFreeVecs() -> VecDestroyVecs() for consistency in using Destroy.

 ---------------
  EVENT LOGGING:
 ----------------
  - Changed PLogStageName() -> PLogStageRegister() to be consistent with PLogEventRegister().

 --------
 GENERAL:
 --------
  - PetscNull has become PETSC_NULL (sorry for the gratuitous change).

  - OptionsGetXXX() and OptionsHasName() now return error codes and take 
    one additional argument, an integer that indicates if the option was found.


**************************************************************************

NEW FEATURES and CHANGES in PETSc 2.0.Beta.9 and 2.0.Beta.10:


 -----------------------------------------------
 Draw (Graphics)
 -----------------------------------------------
  DrawCtx     -> Draw 
  DrawAxisCtx -> DrawAxis
  DrawLGCtx   -> DrawLG
  DrawLG()    -> DrawLGDraw()
  DrawAxis()  -> DrawAxisDraw() 

   The last two sound funny but,...

 -----------------------------------------------
 SNES (Simplified Nonlinear Equations Solvers):
 -----------------------------------------------


 -----------------------------------------------------------
 SLES (Simplified Linear Equations Solvers): See PC and KSP
 -----------------------------------------------------------

   
 ---------------------
 PC (Preconditioners):
 ---------------------
  - Added PCILUSetInPlace() and corresponding option -pc_ilu_in_place, which
    are intended to save space whenever the preconditioner and linear system
    matrices differ (such as for matrix-free KSP methods with explicit
    preconditioner matrices).  Currently only MATSEQAIJ() and MATSEQBDIAG()
    matrix formats supports this.


 ---------------------------
 KSP (Krylov Space Package):
 ---------------------------
  - Added iterative refinement option for GMRES.

 ---------------
 MAT (Matrices):
 ---------------
  - The matrix formats MATSEQAIJ and MATMPIAIJ now by default employ i-nodes
    (identical nodes) when possible.  We search for consecutive rows with
    the same nonzero structure, thereby reusing matrix information for
    increased efficiency.  Related options database keys are:
      -mat_aij_no_inode  - Do not use inodes
      -mat_aij_inode_limit <limit> - Set inode limit (max limit=5)

    If you are solving mulitcomponent problems on the IBM rs6000 or DEC alpha
    you should see enhanced performance while using the AIJ matrix format.

  - Added binary I/O for all matrix types.  See man pages for MatLoad() and
    MatView().

  - Added option -mat_view_draw, which calls MatView() with an x-window display
    to show matrix sparsity structure upon completion of the MatAssemblyEnd()
    phase.  Also added -mat_view_info and -mat_view_info_detailed.

  - Changed calling sequence of MatGetFormatFromOptions(). 

  - Added support for MatConvert() to/from all matrix formats.

  - Added the argument MatGetSubMatrixCall to MatGetSubMatrix() routine.

  - Changed the second argument type of MatNorm() from MatNormType to NormType.

  - Changed the use of MatGetArray() for Fortran programmers only!
    See Ch 7 of users manual and mat/examples/ex36.F for details.

  - Added basic support for parallel dense matrix format (MATMPIDENSE).
    Changed the calling sequence of MatCreateSeqDense().
    
 ------------------------
 DA (Distributed Arrays):
 ------------------------


 --------------
 VEC (Vectors):
 --------------
  - Changed the VecScatterCtxXXX() routines to simply VecScatterXXX()
    and VecScatterCtx to simply VecScatter.

  - Replaced VecNorm(), VecAMax(), and VecASum() with VecNorm(), whose second
    argument is of type NormType (one of NORM_1 NORM_2 or NORM_INFINITY).

  - VecGetVecs() replaced with VecDuplicateVecs().

  - Changed the use of VecGetArray() for Fortran programmers only!
    See Ch 7 of users manual and vec/examples/ex21.F for details.

 ----------------
 IS (Index Sets):
 ----------------
  - Changed the use of ISGetIndices() for Fortran programmers only!
    See Ch 7 of users manual and is/examples/ex3.F for details.

 --------
 VIEWERS:
 --------
  - DrawSyncFlush no longer uses the pause option. Instead you should put 
    in an explicit call to DrawPause().  

 -------
 SYSTEM:
 -------
 - Changed PETSCMALLOC -> PetscMalloc
           PETSCFREE   -> PetscFree
           PETSCMIN    -> PetscMin
           PETSCMAX    -> PetscMax
           PETSCABS    -> PetscAbsInt and PetscAbsScalar

 - Added PetscNull (can use anyplace null is needed)

 - In Fortran, the first argument to OptionsGet*() functions should be changed
   from ' ' to PetscNull.

 ---------------
  EVENT LOGGING:
 ----------------
 - All user-defined events that are registered by PLogEventRegister() should
   use an integer, rnum, such that 
         PLOG_USER_EVENT_LOW <= rnum < PLOG_USER_EVENT_HIGH

 - Different parts of a program can now be monitored separately by using
   PLogPushStage() and PLogPopStage().

 --------
 GENERAL:
 --------
  - For those using PETSc as a sequential library it is now possible to 
    compile and run PETSc programs without installing or using an implementation
    of MPI. To do this, edit the file petsc/bmake/$PETSC_ARCH/$PETSC_ARCH.site
    and change the lines that define the location of MPI to 

    MPI_LIB        =  $(PETSC_DIR)/lib/lib$(BOPT)/$(PETSC_ARCH)/libmpiuni.a
    MPI_INCLUDE    =  -I$(PETSC_DIR)/src/mpiuni
    MPIRUN         =  $(PETSC_DIR)/src/mpiuni/mpirun

    If you compile PETSc with this, you will only be able to run PETSc on 
    one processor and can run the program directly without using the 
    mpirun command.

    This code is experimental and still work in progress, though we 
    have tested it on all our examples, it still may not always work perfectly.

 - Added a chapter in the users manual about PETSc GUI utilities, PETScView
   and PETScOpts.

 - Added explicit support in makefile system for both 32 and 64 bit IRIX
   machines.  Set PETSC_ARCH=IRIX64 for the 64-bit case; use PETSC_ARCH=IRIX
   otherwise.

 - The macros PetscTimeXXX() have been removed, you should use instead
   time = PetscGetTime(); See the man page. Also for logging consider using 
   the -log option, see the man page for PLogBegin().

 - Use the command make BOPT=? testexamples to replace the command 
   make BOPT=? ACTION=testexamples tree

 - On the IBM rs6000, the debugger xldb is available from the PETSc command 
   line with -start_in_debugger xldb or -on_error_attach_debugger xldb 


**************************************************************************


NEW FEATURES and CHANGES in PETSc 2.0.Beta.7 and 2.0.Beta.8:

  The Fortran interface is now available.  It has undergone only limited
  testing, so please mail any problems to petsc-maint.mcs.anl.gov.  See 
  Chapter 7 of the users manual for instructions on using PETSc from Fortran. 

  If you are using the BlockSolve interface, you will have to get the 
  latest version, BlockSolve 2.0 with support for ILU(0) as well 
  as ICC.  This code is not ready for general release; it should be
  available within a few weeks.

 -------------------
 GRIDS and STENCILS:
 -------------------
  - The grid and stencil modules have been temporarily omitted from the
    PETSc distribution while they undergo major expansion.

 -----------------------------------------------
 SNES (Simplified Nonlinear Equations Solvers):
 -----------------------------------------------
  - The SNES method names for solving systems of nonlinear equations must
    be stated in full as follows: SNES_EQ_NLS, SNES_EQ_NTR, SNES_EQ_NTEST.
    The previous aliases for these methods (SNES_NLS, SNES_NTR, SNES_NTEST)
    are no longer supported.  The intent is to avoid confusion with
    unconstrained minimization solvers.

  - Removed SNESDefaultMatrixFreeComputeJacobian(); now the user should
    explicitly create the matrix-free context with 
    SNESDefaultMatrixFreeMatCreate() and destroy it with MatDestroy().

  - The final flag argument in SNESSetFunction() should now be either 
    POSITIVE_FUNCTION_VALUE or NEGATIVE_FUNCTION_VALUE rather than 0 or 1.

  - Added a line search method for unconstrained minimization problems;
    fixed a bug in method SNES_EQ_NLS.

 -----------------------------------------------------------
 SLES (Simplified Linear Equations Solvers): See PC and KSP
 -----------------------------------------------------------
   
 ---------------------
 PC (Preconditioners):
 ---------------------
  - Changed PCLUSetInplace() to PCLUSetInPlace().

  - Added the routine PCEisenstatUseDiagonalScaling()
    (option: -pc_eisenstat_diagonal_scaling), which causes the Eisenstat 
    preconditioner to do an additional diagonal preconditioning.

  - Changed options database key for PCEisenstatSetOmega() from
     -pc_sor_omega to -pc_eisenstat_omega.

  - Sequential AIJ matrices now support block Jacobi preconditioners.

 ---------------------------
 KSP (Krylov Space Package):
 ---------------------------
  - Fixed spelling mistake for Gram-Schmidt (i.e., 
     -ksp_gmres_unmodifiedgrammschmidt is changed to 
     -ksp_gmres_unmodifiedgramschmidt).

 ---------------
 MAT (Matrices):
 ---------------
  - Use the options INSERT_VALUES and ADD_VALUES instead of INSERTVALUES and
    ADDVALUES.

  - Name changes for some matrix routines:
      MatCreateSequentialAIJ()   -> MatCreateSeqAIJ()
      MatCreateSequentialRow()   -> MatCreateSeqRow()
      MatCreateSequentialDense() -> MatCreateSeqDense()
      MatCreateSequentialBDiag() -> MatCreateSeqBDiag()

  - The options database keys used by MatCreate() have been modified as follows:
      -mat_seqaij   : AIJ type, uses MatCreateSeqAIJ()
      -mat_mpiaij   : parallel AIJ type, uses MatCreateMPIAIJ()
      -mat_aij      : either, depending on communicator

      -mat_seqrow   : row type, uses MatCreateSeqRow()
      -mat_mpirow   : parallel row type, uses MatCreateMPIRow()
      -mat_row      : either, depending on communicator

      -mat_seqbdiag : block diagonal type, uses MatCreateSeqDiag()
      -mat_mpibdiag : parallel block diagonal type, uses MatCreateMPIBDiag()
      -mat_bdiag    : either, depending on communicator

      -mat_mpirowbs : rowbs type, uses MatCreateMPIRowbs()
      -mat_seqdense : dense type, uses MatCreateSeqDense()

      The -option mpi_objects has been removed in favor of specifying the 
      particular storage format.

  - The names of several matrix types used in MatConvert() have been 
    changed; see mat.h.

  - Any applications programmer using MatGetReordering() can first call
    MatGetReorderingTypeFromOptions() to extract the matrix reordering
    from the options database.  Note that programmers using the SLES 
    interface to LU/ILU solvers should not need these routines.

  - The block diagonal matrix formats now support dynamic memory allocation.
    The formats now also support the commands
      - MatSetOption(mat,NO_NEW_DIAGONALS) - disable the addition of matrix
        elements in diagonals that do not already exist
      - MatSetOption(mat,YES_NEW_DIAGONALS) - enable allocation of new
        diagonals (default)

  - The AIJ matrix formats now support both 0-based indexing and 1-based
    indexing.  (Previous versions used only 1-based indexing, where row and
    column indices begin at 1, not 0, for full compatibility with standard
    Fortran 77 storage.)  The default has been changed from 1 to 0.  Use
    the option -mat_aij_oneindex for 1-based indexing. Note that this change
    does not affect your application code at all.

  - When using the MATSEQAIJ matrix format on an IBM RS6000 or SP, you can
    use the option -mat_aij_essl to cause all LU factorizations to use the
    IBM supplied factorization, which may be faster for certain matrices.

  - Added the routine MatLoad() - Reads matrices in binary format.

  - Use MatView() in conjunction with ViewerFileOpenBinary() for binary
    ouput of matrices.

  - Added MatReorderingRegister(), MatReorderingRegisterAll(), and
    MatReorderingRegisterDestroy(), so that users can add new sparse 
    matrix reorderings to the package.

  - Added support for MatNorm() and MatTranspose() for all matrix types.

  - Fixed a bug in MatGetName().

  - To indicate use of a symmetric matrix, use the option 
    MatSetOption(mat,SYMMETRIC_MATRIX).  This is necessary for using the
    ICC preconditioner in BlockSolve.

 ------------------------
 DA (Distributed Arrays):
 ------------------------
  - Added support for 3-dimensional distributed arrays.

 --------------
 VEC (Vectors):
 --------------
  - The option mpi_objects has been removed in favor of specifying -vec_mpi
    for the parallel vector storage format (even on just 1 processor).

  - Use the options INSERT_VALUES and ADD_VALUES instead of INSERTVALUES and
    ADDVALUES.

  - Changed SCATTERREVERSE to SCATTER_REVERSE, etc.
    and changed PIPELINEUP to PIPELINE_UP, etc.  (See vec.h)

  - Added the routine VecLoad() - read vectors in binary format.

  - Use VecView() in conjunction with ViewerFileOpenBinary() for binary
    ouput of vectors.

 ----------------
 IS (Index Sets):
 ----------------
  - Changed ISGENERALSEQ to IS_SEQ, ISSTRIDESEQ to IS_STRIDE_SEQ.  (See is.h)

 --------
 VIEWERS:
 --------
  - Changed ViewerFileOpen() to ViewerFileOpenASCII().

  - Added ViewerFileOpenBinary() to binary I/O.

  - Renamed STDOUT_VIEWER to STDOUT_VIEWER_SELF and
    renamed SYNC_STDOUT_VIEWER to STDOUT_VIEWER_WORLD

  - Deleted ViewerFileOpenSync(); now use ViewerFileOpen() with a modified
    calling sequence for both uniprocessor and parallel viewers.

 -------
 SYSTEM:
 -------
  - PetscInitialize() now takes one additional argument, an optional help
    charactor string that is printed if the -help or -h option is given.

  - The last 2 arguments of PetscError() have been switched; see the man page.

  - Changed SYGetRealpath(), SYRemoveHomeDir() to SYGetRealPath()
    SYRemoveHomeDirectory().

  - Changed Trdump(), Trvalid(), Trspace() to TrDump(), TrValid(), TrSpace()

  - Changed PETSCMEMCPY() to PetscMemcpy().  

  - Replaced PETSCMEMSET() with PetscZero() - for initializing memory to zero.

 --------
 GENERAL:
 --------
  - Changed the makefile variable IPETSCDIR to PETSC_DIR.

  - Added PLogDestroy().

  - Changed makefile variable INCLUDEDIRS to PETSC_INCLUDE.

  - The .petscrc file now supports the use of comments 
    (using !, #, or % in column 1 of a line).

  - Many of the directories previously called "src" are now called
    "interface".

  - PETSc now prints a startup message from each process on 
    sucessful startup if the -info option is used.

  - The name of the PETSc graphic program visualization tool has been
    changed from petscsim to petscview (available in petsc/bin).


**************************************************************************

NEW FEATURES in PETSc 2.0.Beta.6:

 - See the file "Performance" at the PETSc ftp site or WWW page for a 
   growing list of tips for performance tuning of PETSc codes.

 - There is now a distributed array for one dimension as well as two.

 - The distributed arrays now support periodic boundary conditions in 
   either x or y direction.

 - The SNES component now provides solvers for unconstrained minimization 
   problems as well as systems of nonlinear equations.  See the users 
   manual and the examples in petsc/src/snes/examples/umin.  

 - SNESCreate() now has an additional input parameter that specifies
   the type of problem being solved.

 - Added the option -snes_ksp_ew_conv, which sets the relative convergence 
   tolerance for KSP methods in SNES using the techniques of Eisenstat and 
   Walker.  

 - Augmented the default convergence test for the trust region method
   SNES_TR so that the trust region parameter is tested.

 - Added new routines:

    o MatGetName() - Returns matrix name.

    o PetscObjectExists() - Determines whether an object exists.

    o PCBJacobiGetSubSLES() - Extracts SLES context for individual blocks
      in block Jacobi preconditioner, enabling the user to specify a different
      linear solver for each block.  See petsc/src/sles/examples/ex5.c.
      This is for expert users; most times you can use the -sub_ksp* and 
      -sub_pc* options.

    o DrawLGIndicateDataPoints() - Draws an x at each data point in your
      line graph.

 - Added conventional definitions for min, max, and absolute value to 
   petsc.h as PETSCMIN, PETSCMAX, and PETSCABS.

-------------------------------------------------------------------------

CHANGES in PETSc 2.0.Beta.6:

 - The utility tkreview has been replaced with petscsim, which is a 
   great way to visualize the flow of computations in your program. 
   See petsc/bin/petscsim.

 - The utility tkoptions has been replaced with petscopts, which is a 
   great way to deal with setting all of PETSc's many options. See 
   petsc/bin/petscopts. This has not been fully tested, but is a demo 
   of things to come.

 - KSPSetTolerances() replaces KSPSetRelativeTolerance(), 
   KSPSetAbsoluteTolerance(), KSPSetDivergenceTolerance(), and 
   KSPSetMaxIterations().  Also, KSPGetTolerances() has an additional
   argument.

**************************************************************************

NEW FEATURES in PETSc 2.0.Beta.5:

 - Added new routines:

   o SNESView(), SLESView(), etc. - Views a solver context, printing
     information about solver options, parameters, methods, etc. 
     The options database commands are -snes_view, -sles_view, etc.

   o MatReorderForNonzeroDiagonal() - Helps to use LU on a poorly ordered 
     sparse matrix that would require numerical pivoting.  Note that this is
     not the same as numerical pivoting and will not help for all matrices.

   o MatGetSubMatrix() - Extracts a submatrix.  Currently this is 
     implemented only for uniprocessor matrices.

 - Users can now add their own events to log using the commands,
   PLogEventRegister(), PLogEventBegin(), PLogEventEnd(), and PLogFlops().
   See petsc/src/sys/examples/ex4.c and the users manual.

-------------------------------------------------------------------------

CHANGES in PETSc 2.0.Beta.5:

 - PETSc now requires more LAPACK routines. So if you built only the 
   part of LAPACK that we supplied in
   ftp://info.mcs.anl.gov/pub/petsc/blas_lapack.tar.Z, either get the 
   complete distribution from netlib or from the ftp indicated above.
   Sorry about this change; we are now distributing all of LAPACK in 
   the tar file, so this won't happen again.

 - Fixed bug in MatView() when used with MPIAIJ matrices and SYNC_STDOUT_VIEWER

 - Fixed bug that didn't allow .petscrc to be used.

 - Fixed bug in BlockSolve interface.

 - Deleted ISCreateMPI().  One may use ISCreateSequential() instead.

 - Changed -logsummary and -logall to -log_summary and -log_all.

 - Fixed bug in PLogDump() that caused event times to be printed 
   incorrectly.  Also fixed -log option to provide much less information, 
   and hence produce smaller logfiles than -log_all.

 - Removed the limitation in MPIAIJ matrices that prevented you from 
   adding new nonzeros once the assembly process was over that would 
   change the communication pattern in Mat-vec operations. Now you may 
   add any new zeros you desire. Not yet done for other matrix 
   implementations.

 - Removed the option "-optionsused"; use "-optionsleft" instead.

 - Add second argument to MatTranspose() to support out-of-place transposes.

 - MatGetReordering() now always returns seperate pointers to the 
   row and column map. They will never point to the same values as they 
   used to.

 - Fixed bug in MatGetRow() for MPIAIJ and MPIROW matrices.

**************************************************************************

NEW FEATURES in PETSc 2.0.Beta.4:

 - Users can provide their own malloc and free for PETSc to use, using 
   the command PetscSetMalloc().

 - MATROW and MATBDIAG formats now support MatRelax (for SOR, SSOR).

 - Petscman now supports HTML format:  petscman [-xmosaic, -netscape]

 - Added several new SNES routines: SNESGetSolutionUpdate, 
   SNESGetNumberUnsuccessfulSteps, SNESGetIterationNumber

 - Added SNESDefaultMatrixFreeMatCreate() to make it easier for 
   users to write matrix-free SNES code but explicitly provide 
   a matrix preconditioner.

 - Added options database analog for KSPSetRightPreconditioner: ksp_right_pc

 - Use the option -logsummary (which calls PLogPrint during PetscFinalize)
   to print a performance monitoring summary to the screen.  

-------------------------------------------------------------------------

CHANGES in PETSc 2.0.Beta.4:

 - To compile a complex version of the library use BOPT=g_complex
   or BOPT=O_complex. For C++ versions use BOPT=g_c++ or 
   BOPT=O_c++. The variable PETSC_VERSION is no longer used.

 - When BOPT=g -notrmalloc turns off malloc tracing, on all other levels
   of BOPT -trmalloc or -trdump turn it on.

 - name changes for some macros to avoid potential external conflicts:
     CHKPTR -> CHKPTRQ,     CHKERR -> CHKERRQ,      SETERR -> SETERRQ
     MALLOC -> PETSCMALLOC, FREE -> PETSCFREE,      NEW -> PETSCNEW
     MEMSET -> PETSCMEMSET, MEMCOPY -> PETSCMEMCOPY

 - Added an additional argument to DACreate2d() to support both box 
   and star stencils.

 - Added an additional argument to SNESCubicLineSearch, etc. to give info
   about line search success/failure.

***************************************************************************


NEW FEATURES in PETSc 2.0.Beta.3:

 - Added aliases to options.  Tired of typing "-sles_method"?  Then just
   add to your .petscrc file "alias -sv -sles_method" 

 - New options database commands: 
    - Use -optionsused to call OptionsAllUsed() through PetscFinalize().
    - Use -mat_ord_nd, mat_ord_rcm, etc. to select ordering type within
      MatGetReordering().

 - MATROW format now supports orderings, ILU & LU factorization, 
   triangular solves, norms, scaling. 

 - added support for HP-UX.

-------------------------------------------------------------------------

CHANGES in PETSc 2.0.Beta.3:

 - You no longer need MPE to build PETSc.

 - Included petsc/include/options.h within petsc/include/petsc.h 

 - Changed distributed array name from RA to DA. Also changed 
   DAGlobalToLocal() to DAGlobalToLocalBegin() followed by 
   DAGlobalToLocalEnd().  

 - Changed usage of KSPBuildSolution() slightly to avoid copying 
   when not needed. 

 - Remove first argument (rflag) from ALL options database commands,
   i.e., OptionsGetInt(0,0,"-m",&m) => OptionsGetInt(0,"-m",&m), etc.

 - Changed the way memory tracing is done. When compiling with BOPT=g
   it is the default, but you may turn it off with -notrmalloc.
   When compiling with BOPT=O it is by default off, but one may 
   turn it on with -trmalloc or -trdump.


***************************************************************************


NEW FEATURES in PETSc 2.0.Beta.2:

 - Full support for matrix-free Newton methods in SNES, including a
   default routine to form Jacobian-vector products.  See
   SNESDefaultMatrixFreeComputeJacobian().

 - Trust region Newton method in SNES (SNES_NTR), use the option
   -snes_method tr.

 - Default Jacobian evaluation routine is provided in SNES,
   SNESDefaultComputeJacobian(), which uses finite difference approximations.

 - New block diagonal data structure, MATBDIAG (currently uniprocessor only)
   See MatCreateSequentialBDiag().

 - Regular array objects - code for easy parallelism of grid problems on
   regular arrays.  See  RACreate2d(), etc.

 - New option to print the version number and release date (-version or -v).

 - Inevatibly others that we're forgetting to mention ... See the users
   guide and the man pages for details.

-------------------------------------------------------------------------

CHANGES in PETSc 2.0.Beta.2:

 - Changed environmental variables PARCH to PETSC_ARCH and
   PETSCLIB to PETSC_DIR 

 - Changed calling sequence of SNESSetJacobian() 

 - Added SNES as first argument to SNES's compute function and Jacobian 

 - Changed matrix options database names:  dense_mat -> mat_dense, etc. 

 - Changed -pc_direct* options to -pc_lu* options, PCDIRECT to PCLU  

 - Changed COMPLEX to PETSC_VERSION and now support PETSC_VERSION=c++
   as well as PETSC_VERSION=complex 

 - Changed MATTYPE, PCMETHOD, KSPMETHOD, SNESMETHOD to  
           MatType, PCMethod, KSPMethod, SNESMethod

 - Changed multigrid type names (See petsc/include/mg.h) 

 - Changed MatBeginAssembly, VecBeginAssembly etc. to MatAssemblyBegin
   etc. 

 - Removed MatCopy.  Now use MatConvert instead. 
 
 - Capitalized certain MACRO variables, such as ScatterAll, 

 - VecCreate became VecDuplicate, [Vec-Mat]CreateInitial[Vector-Matrix]
   became [Vec-Mat]Create 

 - Changed ViewerSyncFileOpen to ViewerFileOpenSync 

 - Changed KSPSetCalculateResidual to use flag.  Removed 
   KSPSetDoNotCalculateResidual, KSPGetWorkCounts, KSPClearWorkCounts 

 - Removed [KSP-PC-SNES]GetMethodFromOptions, [KSP-PC-SNES]PrintMethods.
   Use instead XXXSetFromOptions and XXXPrintHelp. 

 - Dropped the two index set arguments from VecScatterXXX() and 
   VecPipelineXXX(). 

 - When using "make examples" in any of the PETSc examples directories, the 
   compiler statements are printed to the screen ONLY if an error or warning
   is encountered.  Otherise, these statements are successively dumped to the
   file "trashz" and then deleted upon successful compilation.


**************************************************************************

CHANGES in PETSc 2.0.Beta.x from pre-PETSc 2.0 Versions:

This section discusses changes in PETSc 2.0 from versions before
PETSc 2.0.Beta.0. New users of PETSc may wish to skip this information.

-------
ANSI-C
-------

PETSc 2.0 is written in strict ANSI-C.  Previous versions of PETSc used 
the Kernighan and Ritchie pre-ANSI-C standards. This choice was mainly to 
allow compilation on Sun workstations using the Sun bundled C compiler, 
which cannot compile ANSI-C code. 

 - Reasons for change:  ANSI-C provides much better type checking.  Also,
   we can now compile with C++ compilers and thus support complex numbers. 

 - Downside: PETSc can no longer be compiled with the old Sun C compilers.
   Thus, we use GCC.

We have arranged the library so that the version for double precision numbers
compiles with a C compiler and the complex version with a C++ compiler.
This design choice ensures that the PETSc code remains a C code; and 
that no C++ constructs that do not belong in a C code creep in.  One can
easily  compile the double precision version with a C++ 
compiler by using BOPT=g_c++. 

---------------
Error Handling
---------------

The previous versions of PETSc used a global variable to indicate
error conditions, much like the perrror() routines in UNIX. In the new
version of PETSc, all (well, almost all) routines return 0 on success
and non-zero on error.

 - Reasons for change: This approach facilitates the interface of PETSc
   error handling with other packages and allows separate threads to 
   maintain their own error state. 

 - Downside: Routines such as MatCreate(), which used to return the
   newly created matrix in previous PETSc versions, must now return
   the context through an argument.

As with previous PETSc versions, users can still provide their own error 
handling routines.  We also provide several more default error handlers,
including one that will automatically initiate the debugger and trap the 
error, as discussed in the users manual.  When used in conjunction with
MPI, each process can be started in a separate debugger. 

------------------------
Opaque Data Structures
------------------------

In previous versions of PETSc almost all data structures were visible
to the application programmer. Changes to defaults, such as setting
parameters, were done primarily through macros.  In PETSc 2.0 all of
the PETSc data structures are invisible to the user. In terms of C++
this approach is much like making the data structures private.

 - Reasons for change: This approach provides faster compiling and 
   linking, smaller libraries, and safer codes.

 - Downside: More function calls are required for simple actions 
   like setting parameters.

---------------------------------------------
MPI Standard for Message-Passing Parallelism
---------------------------------------------

In the past PETSc contained its own portable message passing system,
Chameleon.  With the development of the world standard for message
passing, MPI, there is no longer a need to provide our own message
passing system.

---------------------------
Krylov Space Solvers (KSP)
---------------------------

The routine KSPSetBinv() requires a PC (preconditioner) object. Thus,
matrix-free methods must wrap their matrix-vector operations inside
``dummy'' objects. The commands MatShellCreate() and PCCreate() with
PCSetType(PC pc,PCSHELL) are provided for this purpose.

 - Reasons for change:  The KSP code is cleaner and can do better
   runtime error checking; this approach conceptually makes sense.

 - Downsides:  Simple example codes are slightly more complicated.
   Also, some components are more interdependent. The true hackers who
   have tried our software complain already that it is too interdependent;
   the user cannot easily extract individual pieces to use in another
   code. We have decided that users must accept this tradeoff. 

-----------------------------------
Common Header for PETSc Structures
-----------------------------------

All the PETSc data structures now have a common header, defined in
$(PETSC_DIR)/include/phead.h.  In this header are, for instance,
routines to destroy the structure as well as cookies and additional
useful data.

----------
Makefiles
----------

Major changes have been made to the makefiles.  We support our own
include file system.  Now each makefile includes only a single file in
the $(PETSC_DIR)/bmake directory.  That file then includes several more.
The file appropriate for configure is generated directly from the
makefile.  There is no makefile.base, as had been present in previous
versions.  Also, the base makefile directory, $(PETSC_DIR)/bmake, now
contains separate subdirectories for each architecture.

---------------------
Installation Scripts
---------------------

Most of the installation scripts have disappeared.  Those that remain 
are relatively short and easy to understand. The bin directory had
gotten out of hand in previous versions of PETSc. 

------------------------------
Handling Command Line Options
------------------------------

The SYArg commands have been replaced by the options database
described in the users manual.  Much like the old SYArg commands, one
can examine the options table at any time with the commands of the form
      OptionsGetInt(pre,name,int *value)
The complete suite of the options commands, as well as additional details
regarding the options database, is discussed in the users manual.

The routines PetscInitialize() and PetscFinalize() also accept several
options on the command line related to error handling, monitoring, etc.
For instance, one can change the method of handling errors with the
option -on_error_abort or -on_error_attach_debugger.

----------
Multigrid
----------

Multigrid retains the same basic abstract format as before. The vector 
objects are no longer pointers to void. The smoothers and coarse grid 
solver are now SLES objects rather than void functions.  

 - Reasons for change: This approach provides better error checking.  
   Also, it is now easier to use a variety of smoothers and solvers,
   since any SLES object can be used. 

 - Downside: Multigrid is now more tightly integrated with the rest of
   PETSc.  For instance, to use a customized smoother, the user must wrap 
   it in a PCSHELL.

-------------------------
Nonlinear Solvers (SNES)
-------------------------

The SNES package encompasses all of the PETSc nonlinear solvers, which 
currently include methods for solving systems of nonlinear equations and 
unconstrained minimization problems. The two problem classes are specified
by SNES_NONLINEAR_EQUATIONS and SNES_UNCONSTRAINED_MINIMIZATION.  The
unconstrained minimization solvers (which comprised the SUMS component
of previous versions) are no longer considered separately.

 - Reasons for change: This approach increases code sharing and simplicity.

--------------------------------------------------------------------------
