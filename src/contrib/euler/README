
Notes about the Euler code:

  - See the file user1.c for an overview of the program and runtime options.
    In particular, note the option -2d, for running the 2-dimensional version
    instead of the 3D default.

  - Multi-model code: version 1:
      - Supports Euler, full-potential, and mixed modes via the options
            -mm_type <euler,fp,hybrid>
        where 
           euler   - Euler everywhere, no full potential (5 DoF per node)
           fp      - FP everywhere, no Euler (1 DoF per node)
           hybrid - mixed Euler and FP (6 DoF per node)
        We use the distributed array with N degrees of freedom per node,
        and N is 5, 1, and 6, respectively, for the three cases.  I.e., for
        the hybrid variants, we currently allocate space for 6 degrees of
        freedom throughout the entire problem domain, even though we will 
        not use all of these.  Any unused DoF are handled by setting the 
        diagonal of the Jacobian to 1 and the corresponding right-hand-side
        vector component to 0.

        Other options:
            -mm_hybrid_euler
               - Euler everywhere with dummy FP (6 DoF per node)
            -mm_hybrid_fp
               - FP everywhere with dummy Euler (6 DoF per node)

      - Simplifying assumption:
        Each processor's locally owned part of the global problem supports
        either the Euler or full potential model throughout it's entire
        region (except perhaps for boundary points?).  This enables retention 
        of existing code modules for residual and Jacobian evaluation, etc.
        In the long run we clearly need to use unstructured codes instead of
        structured ones.

  - Changes in dimensioning:

        The leading dimension of several Fortran arrays is specified by the variable
             dof
        that indicated the degrees of freedom at each node (1,5,or 6) as supported by the
        data structures.  See, e.g., the files dvarbls.h, varbls.h, ibcwork.h

        double precision
     &   dxx(ndof,gxsf1:gxefp1,gysf1:gyefp1,gzsf1:gzefp1)

