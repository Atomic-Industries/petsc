
This directory contains the potential flow code, where both the
matrix-free and regular versions have been merged into a single
program.  See the code itself for extensive documentation.
Also, a summary of changes from the original version is given
below.

Subdirectories:
 - output - Contains output files for use with the potential
   flow code. See the makefile for details regarding this output.

 - original.2.0.13 - Contains original code copied from 
  /home/zhang_k/pfull on 7/19/96 (using version 2.0.13 of PETSc)

 - original.2.0.14 - Contains a copy of this original code
   for the "pfullcj" program (standard version of code, not
   matrix-free), with minor modifications just to get the code
   to run with version 2.0.14 of PETSc.  In addition, the routine
   UserMonitor() was added to this version of code to enable
   comparisons between the original code and the newly modified
   variant.

 - merged.2.0.14 - Merged version of original.2.0.14 where the 
   same source code is used for both the matrix and matrix free approaches

 - merged.2.0.16 - Version that uses the matrix coloring code for 
   computation of the Jacobians via finite differences. Also supports
   the older computation of the Jacobians.

------------------------------------------------------------------
Summary of changes between original code and new version:
------------------------------------------------------------------

 - Merged matrix-free and non-matrix-free codes: default is to
   run the standard version with explicit Jacobian; use
     -matrix_free to activate matrix-free version
 - Added memory preallocation for Jacobian matrix for arbitrary
   processor layout
 - Removed separate matrix data structures for Jacobian and
   preconditioner, since the extra one wasn't ever being used
   in this code ... this was just wasted space!
 - Removed "if" testing for indices out of inner jacobian computational loops
 - Changed names of a few routines - see the code for details
 - Pulled the initial guess computation out of the function evaluation
   routine
 - Removed multiple segments of duplicate code for handling boundary
   conditions in routines
      MySparseFunction(), InnerSparseFunction(), ComputeJacobian()
   Now, all boundary conditions for the function are handled in
   the routine EvaluateFunction()
 - Changed logic that controls formation of Jacobian approximation,
   now controlled by runtime option 
       -jfreq <val>, where <val> = frequency of evaluating Jacobian
   e.g., jfreq=3  ==> evaluate Jacobian every 3rd iteration
 - Added runtime option to print grid and parameter info
     -print_param
 - Removed duplicate printout of help info
 - Initialized user context to 0 
 - Added data to user context to help transition to multiple 
   DOF per node case: user.nc = DOF per node
 - Removed extra layer of indirection in computing Jacobian,
   initial guess, and function
 - Changed variable names j1,y0,y1 to avoid conflicts with
   global declarations of Bessel functions for gcc math library
 - Added "return 0" statements to the end of all routines
   so that PETSc-style error checking can be uniformly used
 - Added consistent error checking throughout code (use of
   CHKERRQ(ierr), etc.)
 - Eliminated unused variables from declaration statements
 - Changed default preconditioner to Jacobi instead of null
 - Augmented base Jacobian approx code to handle complex numbers


-------------------------
Additional Things To Do:
-------------------------

 - Compute various quantities, such as 1/hx, 1/hy, etc. and
   store in user context.  Modify function evaluation code to replace
   divide operations with multiplictions whenever possible, e.g.,
     x/2 -> 0.5*x
   None of these modifications have been done yet!

 - Examine Jacobian approximation code for further optimizations.
   Use coloring.

 - Bug in petsc-2.0.14: MatGetSubMatrix for multiple calls for
   MATSEQAIJ format ==> Until this is fixed, explicitly specify
   -mat_mpiaij (when using just 1 processor) for block Jacobi, ASM
   methods.


------------------------------------------------------------------
Original output
------------------------------------------------------------------

> Dr. Keyes,
> 
> I just tested the code. It works. Here is the result. I used -v option 
> in the command line. You can see it is PETSc Version 2.0.13. 
> 
> [blizzard]/home/zhang_k/pfull%mpirun pfullmf -nox -pc_type bjacobi -ksp_monitor -mx 20 -my 20 -v
> --------------------------------------------------------------------------
>            PETSc Version 2.0.13, Released April 18, 1996.
> Satish Balay, Bill Gropp, Lois Curfman McInnes, Barry Smith.
> Bug reports, questions: petsc-maint@mcs.anl.gov
> Web page: http://www.mcs.anl.gov/petsc/petsc.html
> See petsc/COPYRIGHT for copyright information, petsc/Changes for recent updates.-----------------------------------------------------------------------
> 0 KSP Residual norm 5.106246819488e-01 
> 1 KSP Residual norm 1.177146212073e-07 
> 0 KSP Residual norm 7.397763407677e-04 
> 1 KSP Residual norm 8.688437326914e-08 
> 2 KSP Residual norm 3.122261551607e-11 
> Number of Newton iterations = 2
> 
> pfullcj also can work. 
> 
> Thanks. 
> 
> Jie
