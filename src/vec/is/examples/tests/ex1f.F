C
C static char vcid[] = "$Id: ex1f.F,v 1.3 1996/09/12 16:24:47 bsmith Exp bsmith $"
C
C  Formated test for IS general routines
C
      implicit none
#include "FINCLUDE/petsc.h"
#include "FINCLUDE/is.h"


       integer    i, n, ierr,indices(1000),rank,size,ii(1),iis
       IS         is,newis
       PetscTruth flag

       call PetscInitialize(PETSC_NULL_CHARACTER,ierr)
            CHKERRA(ierr)
       call MPI_Comm_rank(MPI_COMM_WORLD,rank,ierr)
       call MPI_Comm_size(MPI_COMM_WORLD,size,ierr)

C     Test IS of size 0 

       call ISCreateGeneral(MPI_COMM_SELF,0,n,is,ierr) 
            CHKERRA(ierr)
       call ISGetSize(is,n,ierr) 
            CHKERRA(ierr)
       if (n .ne. 0) then
         print*, 'Error getting size of zero IS'
         stop
       endif
       call ISDestroy(is,ierr) 


C     Create large IS and test ISGetIndices(,ierr)

      n = 1000
      do 10, i=1,n
        indices(i) = rank + i
 10   continue
      call ISCreateGeneral(MPI_COMM_SELF,n,indices,is,ierr) 
            CHKERRA(ierr)
      call ISGetIndices(is,ii,iis,ierr) 
            CHKERRA(ierr)
      do 20, i=1,n
        if (ii(i+iis) .ne. indices(i)) then
           print*, 'Error getting indices'
           stop
        endif
 20   continue
      call ISRestoreIndices(is,ii,iis,ierr) 
            CHKERRA(ierr)

C     Check identity and permutation 
  
      call ISPermutation(is,flag,ierr) 
            CHKERRA(ierr)
      if (flag .eq. PETSC_TRUE) then
         print*, 'Error checking permutation'
         stop
      endif
      call ISIdentity(is,flag,ierr) 
            CHKERRA(ierr)
      if (flag .eq. PETSC_TRUE) then
         print*, 'Error checking identity'
         stop
      endif
      call ISSetPermutation(is,ierr) 
            CHKERRA(ierr)
      call ISSetIdentity(is,ierr)  
            CHKERRA(ierr)
      call ISPermutation(is,flag,ierr) 
            CHKERRA(ierr)
      if (flag .ne. PETSC_TRUE) then
         print*, 'Error checking permutation second time'
         stop
      endif
      call ISIdentity(is,flag,ierr) 
            CHKERRA(ierr)
      if (flag .ne. PETSC_TRUE) then
         print*, 'Error checking identity second time'
         stop
      endif

C     Check equality of index sets 

      call ISEqual(is,is,flag,ierr) 
            CHKERRA(ierr)
      if (flag .ne. PETSC_TRUE) then
         print*, 'Error checking equal'
         stop
      endif

C     Sorting 

      call ISSort(is,ierr) 
            CHKERRA(ierr)
      call ISSorted(is,flag,ierr) 
            CHKERRA(ierr)
      if (flag .ne. PETSC_TRUE) then
         print*, 'Error checking sorted'
         stop
      endif

C     Thinks it is a different type?

      call ISStride(is,flag,ierr) 
            CHKERRA(ierr)
      if (flag .eq. PETSC_TRUE) then
         print*, 'Error checking stride'
         stop
      endif
      call ISBlock(is,flag,ierr) 
            CHKERRA(ierr)
      if (flag .eq. PETSC_TRUE) then
         print*, 'Error checking block'
         stop
      endif

      call ISDestroy(is,ierr) 
            CHKERRA(ierr)

C     Inverting permutation

      do 30, i=1,n
        indices(i) = n - i
 30   continue

      call ISCreateGeneral(MPI_COMM_SELF,n,indices,is,ierr) 
            CHKERRA(ierr)
      call ISSetPermutation(is,ierr) 
            CHKERRA(ierr)
      call ISInvertPermutation(is,newis,ierr) 
            CHKERRA(ierr)
      call ISGetIndices(newis,ii,iis,ierr) 
            CHKERRA(ierr)
      do 40, i=1,n
        if (ii(iis+i) .ne. n - i) then
          print*, 'Error getting permutation indices'
          stop
       endif
 40   continue
      call ISRestoreIndices(newis,ii,iis,ierr) 
            CHKERRA(ierr)
      call ISDestroy(newis,ierr) 
            CHKERRA(ierr)
      call ISDestroy(is,ierr) 
            CHKERRA(ierr)
      call PetscFinalize(ierr)
      stop
      end
 






