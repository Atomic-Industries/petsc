#!/usr/local/bin/expect -f
#
#  Simple PETSc MUD demon
#
proc mud_biff {swho gety} {
  puts $gety
  if {[string compare $gety "Barry"] == 0 || [string compare $gety "barry"] == 0} {
    exec /home/bsmith/petsc/maint/mudbiff $gety $swho -display "eagle.mcs.anl.gov:0.0" &
  }
  if {[string compare $gety "BillG"] == 0 || [string compare $gety "billg"] == 0} {
    exec /home/bsmith/petsc/maint/mudbiff $gety $swho -geometry +200+200 -display "godzilla.mcs.anl.gov:0.0" &
  }
  if {[string compare $gety "Lois"] == 0 || [string compare $gety "lois"] == 0} {
    exec /home/bsmith/petsc/maint/mudbiff $gety $swho -display "elvis.mcs.anl.gov:0.0" &
  }
  if {[string compare $gety "Satish"] == 0 || [string compare $gety "satish"] == 0} {
    exec /home/bsmith/petsc/maint/mudbiff $gety $swho -display "maverick.mcs.anl.gov:0.0" &
  }
}

#
#  Some global variables for tracking PETSc team
#
set active_petsc_team_member(Barry)  "Inactive"
set active_petsc_team_member(Satish) "Inactive"
set active_petsc_team_member(BillG)  "Inactive"
set active_petsc_team_member(Lois)   "Inactive"
set active_petsc_team_time(Barry)  "Unknown"
set active_petsc_team_time(Satish) "Unknown"
set active_petsc_team_time(BillG)  "Unknown"
set active_petsc_team_time(Lois)   "Unknown"
 
#
#   Get the most recent petsc-maint added
# 
    set last_petsc_maint [exec ls /mcs/adm/request/petsc-maint/active | sort -n | tail -1]

#
#  Start up the MUD session
#
     spawn telnet wfg.mcs.anl.gov 7777
     expect "*if you have any problems.\r\n\r\n"

     set timeout 90
     send "@connect Petsc paxyjej \r"
     expect "* reading it.\r\n"
     puts "PETSc successfully connected"

     set timeout 60
#
#   Main loop, looks for certain text strings coming back from the MUD server.
#        eventually for each pattern we can call large sophisticated functions.
#
    while (1) {
#       puts "Waiting for text string"
       expect { 
                   "* pages you.*\r\n" { 
                                   scan $expect_out(buffer) "%s pages," swho  
                                   send "page $swho I have received your page\r"
                 } "* pages, ringing the PETSc bell\r\n" {
                                   scan $expect_out(buffer) "%s pages, ringing the PETSc bell\r\n" gety
                                   mud_biff Barry $gety
                                   mud_biff Lois $gety
                                   mud_biff Satish $gety
                 } "* whispers to you, *get *\r\n" { 
                                   scan $expect_out(buffer) "%s whispers to you, \"get %s\"\r\n" swho gety
#                                  patch for bug in scan
                                   set gety [string range $gety 0 [expr [string length $gety] - 3]]
                                   send "mu $swho paging $gety\r"
                                   mud_biff $swho $gety
                 } "* whispers to you, *status*\r\n" { 
                                   scan $expect_out(buffer) "%s whispers to you, status\r\n" swho
                                   send "mu $swho ===========================\r"
                                   send "mu $swho Barry $active_petsc_team_member(Barry) since $active_petsc_team_time(Barry) \r"
                                   send "mu $swho Lois $active_petsc_team_member(Lois) since $active_petsc_team_time(Lois) \r"
                                   send "mu $swho Satish $active_petsc_team_member(Satish) since $active_petsc_team_time(Satish) \r"
                                   send "mu $swho BillG $active_petsc_team_member(BillG) since $active_petsc_team_time(BillG) \r"
                 } "* whispers to you, *\r\n" {
                                   scan $expect_out(buffer) "%s whispers to you, %s\r\n" swho message
                                   send "mu $swho I have received your whisper\r" 
                 } "* pages,*\r\n" { 
                                   scan $expect_out(buffer) "%s pages, %s\r\n" swho  message
                                   send "page $swho I have received your page\r"
                 } "* *to you*: *\r\n" { 
                                   scan $expect_out(buffer) "%s \[to you\]: %s\r\n" swho  message
                                   send "\`$swho I acknowledge your message\r"
                 } "* waves to Petsc.\r\n" { 
                                   scan $expect_out(buffer) "%s waves to Petsc.\r\n" swho
                                   send "emote waves to $swho.\r"
#
#  people arriving
#
                 } "* arrives from the hallway.\r\n" { 
                                   scan $expect_out(buffer) "%s arrives from the hallway.\r\n" swho
                                   send "mu $swho Welcome to PETSc Plaza\r"
                 } "* blinks\r\n" { 
                                   scan $expect_out(buffer) "%s blinks\r\n" swho
                                   send "mu $who Welcome back\r"
                                   set active_petsc_team_member($swho) "Active"
                                   set active_petsc_team_time($swho) [exec date]
                 } "* idles\r\n" { 
                                   scan $expect_out(buffer) "%s idles\r\n" swho
                                   send "mu $swho Later\r"
                                   set active_petsc_team_member($swho) "Inactive"
                                   set active_petsc_team_time($swho) [exec date]
#
#  antisocial to Petsc
#
                 } "* eyes you warily.\r\n" { 
                                   scan $expect_out(buffer) "%s eyes you warily.\r\n" swho
                                   send "eye $swho\r"
                 } "* nudges you.\r\n" { 
                                   scan $expect_out(buffer) "%s nudges you.\r\n" swho
                                   send "mu $swho What is up?\r"
                 } "* pokes you.\r\n" { 
                                   scan $expect_out(buffer) "%s pokes you.\r\n" swho
                                   send "mu $swho What is up?\r"
                 } "* peers at you suspiciously.\r\n" { 
                                   scan $expect_out(buffer) "%s peers at you suspiciously.\r\n" swho
                                   send "peer $swho\r"
                 } "*\r\n" { 
#                                   puts "Irrelevant message"
                 }
       }
#
#   Check petsc-maint, see if anything came in
#
       set last [exec ls /mcs/adm/request/petsc-maint/active | sort -n | tail -1]
       if {$last > $last_petsc_maint} {
          set last_petsc_maint $last
          set subject [exec grep Subject: /mcs/adm/request/petsc-maint/active/$last]
          set from [exec grep From: /mcs/adm/request/petsc-maint/active/$last]
          send "say Another pesky petsc-maint has arrived\r"
          send "say $subject\r"
          send "say $from\r"
       }
    }

    send "@quit\r"

#
#  Other things Petsc should do:
#    respond to @anitsocial acts upon PETSc in a graceful way
#    tell us about nightly build problems
#    tell us where members of the PETSc team are
#


